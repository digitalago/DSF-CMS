{"version":3,"file":"../sass/wufoo-forms.css","sources":["wufoo-forms.scss","00-base/imports/_theme-commons.scss","../bower_components/sass-toolkit/stylesheets/_toolkit.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_settings.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_placeholders.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_clearfix.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_colors.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_fonts.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_intrinsic-ratio.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_nested-context.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_parallax.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_rtl.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_target.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_triangle.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_center.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_viewport.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_underline.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_art.scss","../bower_components/sass-toolkit/stylesheets/toolkit/_set-multiple.scss","../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_settings.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_context.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_helpers.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_parsers.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_query.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_single.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/single/_default.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_double.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default-pair.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_double-string.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_triple.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/triple/_default.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/_resolution.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/parsers/resolution/_resolution.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_no-query.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_respond-to.scss","../bower_components/breakpoint-sass/stylesheets/breakpoint/_legacy-settings.scss","../bower_components/singularity/stylesheets/_singularitygs.scss","../bower_components/singularity/stylesheets/singularitygs/_helpers.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_settings.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_find.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_sass-lists.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_columns.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_span-shared.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_directions.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_sort.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_background-grid.scss","../bower_components/singularity/stylesheets/singularitygs/helpers/_layout.scss","../bower_components/singularity/stylesheets/singularitygs/_language.scss","../bower_components/singularity/stylesheets/singularitygs/language/_parse-list.scss","../bower_components/singularity/stylesheets/singularitygs/language/_parse-add.scss","../bower_components/singularity/stylesheets/singularitygs/language/_span.scss","../bower_components/singularity/stylesheets/singularitygs/_math.scss","../bower_components/singularity/stylesheets/singularitygs/math/_columns.scss","../bower_components/singularity/stylesheets/singularitygs/math/_gutters.scss","../bower_components/singularity/stylesheets/singularitygs/math/_context.scss","../bower_components/singularity/stylesheets/singularitygs/math/_grid.scss","../bower_components/singularity/stylesheets/singularitygs/_grids.scss","../bower_components/singularity/stylesheets/singularitygs/grids/_add.scss","../bower_components/singularity/stylesheets/singularitygs/grids/_find.scss","../bower_components/singularity/stylesheets/singularitygs/_gutters.scss","../bower_components/singularity/stylesheets/singularitygs/gutters/_add.scss","../bower_components/singularity/stylesheets/singularitygs/gutters/_find.scss","../bower_components/singularity/stylesheets/singularitygs/_gutter-styles.scss","../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_add.scss","../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_find.scss","../bower_components/singularity/stylesheets/singularitygs/gutter-styles/_helpers.scss","../bower_components/singularity/stylesheets/singularitygs/_api.scss","../bower_components/singularity/stylesheets/singularitygs/api/_float.scss","../bower_components/singularity/stylesheets/singularitygs/api/_isolation.scss","../bower_components/singularity/stylesheets/singularitygs/api/_calc.scss","../bower_components/modular-scale/stylesheets/_modular-scale.scss","../bower_components/modular-scale/stylesheets/modular-scale/_ratios.scss","../bower_components/modular-scale/stylesheets/modular-scale/_tests.scss","../bower_components/modular-scale/stylesheets/modular-scale/_pow.scss","../bower_components/modular-scale/stylesheets/modular-scale/_calc.scss","../bower_components/modular-scale/stylesheets/modular-scale/_generate-list.scss","../bower_components/modular-scale/stylesheets/modular-scale/_sort-list.scss","../bower_components/modular-scale/stylesheets/modular-scale/_round-px.scss","../bower_components/modular-scale/stylesheets/modular-scale/_function.scss","../bower_components/modular-scale/stylesheets/modular-scale/_function-list.scss","../bower_components/modular-scale/stylesheets/modular-scale/_respond.scss","00-base/settings/_index.scss","00-base/settings/_breakpoints.scss","00-base/settings/_colors.scss","00-base/settings/_grid.scss","00-base/settings/_modular-scale.scss","00-base/settings/_typography.scss","../node_modules/@fortawesome/fontawesome-free/scss/_variables.scss","../node_modules/@fortawesome/fontawesome-free/scss/solid.scss","../node_modules/@fortawesome/fontawesome-free/scss/brands.scss","00-base/mixins/_index.scss","00-base/mixins/library/typography/_index.scss","00-base/mixins/library/typography/_font-size.scss","00-base/mixins/library/typography/_line-height.scss","00-base/mixins/library/typography/_no-bullet.scss","00-base/mixins/library/typography/_no-bullets.scss","00-base/mixins/library/typography/_pretty-bullets.scss","00-base/mixins/library/typography/_text-truncate.scss","00-base/mixins/library/typography/_unstyled-link.scss","00-base/mixins/library/typography/text-replacement/_index.scss","00-base/mixins/library/typography/text-replacement/_replace-text-with-dimensions.scss","00-base/mixins/library/typography/text-replacement/_replace-text.scss","00-base/mixins/library/typography/text-replacement/_squish-text.scss","00-base/mixins/library/reset-utilities/_index.scss","00-base/mixins/library/reset-utilities/_reset-box-model.scss","00-base/mixins/library/reset-utilities/_reset-column.scss","00-base/mixins/library/reset-utilities/_reset-font.scss","00-base/mixins/library/reset-utilities/_reset-form-field.scss","00-base/mixins/library/reset-utilities/_reset-image-hover.scss","00-base/mixins/library/reset-utilities/_reset-quotation.scss","00-base/mixins/library/reset-utilities/_reset-table-cell.scss","00-base/mixins/library/reset-utilities/_reset-tap.scss","00-base/mixins/library/reset-utilities/_reset.scss","00-base/mixins/library/reset-utilities/_reset-user-select.scss","00-base/mixins/library/vendors/_index.scss","00-base/mixins/library/vendors/material-design-icons/_material-icons.scss","00-base/mixins/library/_box-shadows.scss","00-base/mixins/library/_buttons.scss","00-base/mixins/library/_center-block.scss","00-base/mixins/library/_divider-line.scss","00-base/mixins/library/_headline-type.scss","00-base/mixins/library/_highlight-box.scss","00-base/mixins/library/_image-2x.scss","00-base/mixins/library/_image-styles.scss","00-base/mixins/library/_navigation-list.scss","00-base/mixins/library/_no-drag-image.scss","00-base/mixins/library/_svg-bg.scss","00-base/mixins/library/_elements.scss","00-base/mixins/library/custom/_button-arrow.scss","00-base/mixins/library/custom/_view-title.scss"],"sourcesContent":["// restyling wufoo forms\n// import commons\n@import '00-base/imports/theme-commons';\n\n\n#public {\n  background: $white;\n}\n\n\n#header {\n  background: transparent;\n  display: none;\n}\n\n.wufoo .info h2 {\n  display: none;\n}\n\n.wufoo input.text,\n.wufoo textarea.textarea,\n.wufoo select.select,\n  {\n  @include knockout-28;\n  // @include nimbus-bold-reg;\n  font-size: ms(1);\n  color: $almostblack;\n  // padding: 16px 10px 12px 15px;\n  margin-left: 2px;\n}\n\n.name-field .wufoo input.text {\n  min-width: 200px !important;\n}\n\n.wufoo label.choice {\n  font-size: 110% !important;\n  color: $almostblack;\n  padding: 0px 8px;\n}\n\n.wufoo input.text,\n.wufoo textarea.textarea {\n  box-sizing: border-box;\n}\n\n.wufoo label.desc,\n.wufoo legend.desc {\n  @include nimbus-bold-reg;\n  font-size: ms(1) !important;\n  color: $almostblack;\n  padding-bottom: 10px;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n\n.wufoo li span label {\n  @include nimbus-reg;\n  color: $almostblack;\n  text-align: left;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n\nform li.date span label,\nform li.time span label {\n  text-align: left;\n}\n\nform li div label,\nform li span label {\n  font-size: ms(-1);\n}\n\nform li.phone span label {\n  text-align: left;\n}\n\nform li div {\n  max-width: 95%;\n}\n\n.wufoo .focused {\n  background: $light-grey;\n}\n\n.wufoo input {\n  margin-right: 10px;\n}\n\n.wufoo li.focused label.desc,\n.wufoo li.focused legend.desc,\n.wufoo li.focused div,\n.wufoo li.focused span,\n.wufoo li.focused div label,\n.wufoo li.focused span label,\n.safari .wufoo li.focused input.file {\n  color: $black;\n}\n\n.wufoo li.focused {\n  background-color: $white\n}\n\n.wufoo select.select,\n.safari .wufoo select.select {\n  border-radius: 0 !important;\n  font-size: ms(2) !important;\n  color: $almostblack;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background: url('../../img/file_icons/arrow-down.png') no-repeat;\n  background-position: 97% 60%;\n  background-size: contain;\n  // background-size: 15%;\n  background-color: $light-grey;\n  padding: 16px 10px 10px 15px;\n  margin: 0;\n  font-family: \"nimbus-sans\", Helvetica, Arial, sans-serif;\n  border: 0px solid transparent;\n  -webkit-font-smoothing: subpixel-antialiased;\n  min-width: 77px;\n  margin-left: 2px;\n}\n\n.wufoo select.select option {\n  @include nimbus-reg;\n  background-color: $white !important;\n  color: $almostblack;\n  -webkit-appearance: none !important;\n  -moz-appearance: none !important;\n  padding: 6px;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n\ninput.text,\ninput.search,\ntextarea.textarea {\n  border-top: 1px solid $contrastgrey;\n  border-left: 1px solid $contrastgrey;\n  border-right: 1px solid $contrastgrey;\n  border-bottom: 1px solid $contrastgrey;\n  padding: 10px;\n  background: transparent;\n}\n\ninput.btTxt {\n  font-size: ms(3) !important;\n  padding: 10px 15px 10px 15px !important;\n  -webkit-border-radius: 0 !important;\n  border-radius: 0 !important;\n  border: 1px solid $red !important;\n  background-color: $red !important;\n  color: white !important;\n  text-transform: uppercase !important;\n  font-family: $font-set-3 !important;\n  letter-spacing: 1px !important;\n  text-decoration: none !important;\n  -webkit-border-radius: 0 !important;\n  -webkit-font-smoothing: antialiased !important;\n  -webkit-appearance: none !important;\n  margin-left: 2px;\n\n  &:hover,\n  &:focus {\n    color: $red;\n    background-color: white;\n    border: 1px solid $red;\n\n  }\n}\n\nform li {\n  padding: 6px 0% 15px 0% !important;\n}\n\nform li.buttons {\n  padding: 10px 1% 10px 0% !important;\n}\n\n.cloak label {\n  color: $red;\n}\n\ninput.radio {\n  margin: 7px 0px 0px 3px;\n}\n\nform li.section h3 {\n  @include heading-3;\n  padding: 12px 0% 0 0%;\n}\n\n.wufoo .section div {\n  font-size: 100%;\n  @include nimbus-reg;\n  line-height: normal;\n  -webkit-font-smoothing: subpixel-antialiased;\n}\n\nspan.symbol {\n  padding: 8px 6px 0px 0px;\n}\n\n.pgStyle1 var,\n.pgStyle2 td {\n  border: 1px solid $contrastgrey;\n\n}\n\n.pgStyle2 td {\n  border-radius: 0px;\n}\n\n.pgStyle1 .selected var,\n.pgStyle2 var,\n.pgStyle2 var em {\n  background: $red;\n  border-radius: 0px;\n  color: $white;\n}\n\nbutton.link {\n  color: $red;\n\n  &:hover {\n    color: $almostblack;\n  }\n}\n\ndiv[id^=\"instruct\"] {\n  padding: 0px !important;\n  font-size: ms(2) !important;\n}\n\n.wufoo a:-webkit-any-link {\n  color: $red;\n}\n\n// test adding select and radio styling later\n","/* _theme-commons.scss */\n// bower components\n  @import '../bower_components/sass-toolkit/stylesheets/toolkit';\n  @import '../bower_components/breakpoint-sass/stylesheets/breakpoint';\n  @import '../bower_components/singularity/stylesheets/singularitygs';\n  @import '../bower_components/modular-scale/stylesheets/modular-scale';\n\n// settings\n  @import '../settings/index';\n\n// mixins\n  @import '../mixins/index';\n","//////////////////////////////\n// Toolkit Settings\n//////////////////////////////\n@import \"toolkit/settings\";\n@import \"toolkit/placeholders\";\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"toolkit/clearfix\";\n@import \"toolkit/colors\";\n@import \"toolkit/fonts\";\n@import \"toolkit/intrinsic-ratio\";\n@import \"toolkit/nested-context\";\n@import \"toolkit/parallax\";\n@import \"toolkit/rtl\";\n@import \"toolkit/target\";\n@import \"toolkit/triangle\";\n@import \"toolkit/center\";\n@import \"toolkit/viewport\";\n@import \"toolkit/underline\";\n@import \"toolkit/art\";\n@import \"toolkit/set-multiple\";\n","//////////////////////////////\n// Toolkit Settings\n//////////////////////////////\n$Toolkit-Settings: (\n  'clearfix extend': false,\n  'color stack amounts': 25% 50% 75% 85% 90%,\n  'tint shade amounts': 75% 50% 25%,\n  'tint color': #fff,\n  'shade color': #000,\n  'color scale steps': 6,\n  'ligature extend': false,\n  'font face weight': normal,\n  'font face style': normal,\n  'font face inline woff': false,\n  'icon font extend': false,\n  'icon font speak': false,\n  'fade in duration': 1s,\n  'fade in loading class': '.wf-loading',\n  'fade in extend': false,\n  'intrinsic ratio': 16/9,\n  'intrinsic ratio width': 100%,\n  'intrinsic ratio elements': '> *',\n  'intrinsic ratio position': top,\n  'intrinsic ratio extend': false,\n  'nested context contexts': 100%,\n  'nested context position': left,\n  'triangle color': #000,\n  'triangle height': 1em,\n  'triangle width': 1em,\n  'triangle angle': 0,\n  'parallax perspective': 1,\n  'parallax element': 'body',\n  'parallax ios': true,\n  'parallax distance': 0,\n  'vertical midpoint': 50%,\n  'vertical extend': false,\n  'horizontal midpoint': 0%,\n  'horizontal fixed midpoint': 50%,\n  'horizontal fixed': false,\n  'horizontal extend': false,\n  'absolute center vertical midpoint': 50%,\n  'absolute center horizontal midpoint': 0%,\n  'absolute center fixed horizontal midpoint': 50%,\n  'absolute center fixed': false,\n  'absolute center extend': false,\n  'underline background': #fff,\n  'underline color': #00e,\n  'underline clear descenders': true,\n  'underline distance': 1,\n  'underline width': 2,\n  'underline extend': false,\n  'art pixel size': 1px,\n  'art color': black,\n  'art border radius': 0%\n);\n\n//////////////////////////////\n// New Settings module\n//////////////////////////////\n// Global\n$GlobalSettings: $Toolkit-Settings !default;\n// User\n$UserSettings: () !default;\n\n//////////////////////////////\n// User Setting Exists\n//////////////////////////////\n@function user-setting-exists($setting) {\n  @if map-has-key($UserSettings, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n@function user-setting-exists-multiple($settings...) {\n  $Return: ();\n  @each $setting in $settings {\n    $Return: map-merge($Return, ($setting: user-setting-exists($setting)));\n  }\n  @return $Return;\n}\n\n// Toolkit Version\n@function toolkit-has($setting) {\n  @return user-setting-exists($setting);\n}\n\n//////////////////////////////\n// Setting Get\n//////////////////////////////\n@function setting-get($setting) {\n  @if user-setting-exists($setting) {\n    @return map-get($UserSettings, $setting);\n  }\n  @else {\n    @return map-get($GlobalSettings, $setting);\n  }\n}\n\n@function setting-get-multiple($settings...) {\n  $values: ();\n  @each $setting in $settings {\n    $values: map-merge($values, ($setting: setting-get($setting)));\n  }\n  @return $values;\n}\n\n// Toolkit Version\n@function toolkit-get($setting) {\n  @return setting-get($setting);\n}\n\n\n//////////////////////////////\n// Settings Set\n//////////////////////////////\n@function setting-set($setting, $value) {\n  $UserSettings: map-merge($UserSettings, ($setting: $value)) !global;\n  @return true;\n}\n\n@function setting-set-multiple($settings) {\n  $UserSettings: map-merge($UserSettings, $settings) !global;\n  @return true;\n}\n\n@mixin setting-set($setting, $value) {\n  $setting-setter: setting-set($setting, $value) !global;\n}\n\n@mixin setting-change($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n@mixin setting-set-multiple($settings) {\n  $setting-setter: setting-set-multiple($settings) !global;\n}\n\n@mixin setting-change-multiple($settings) {\n  @include setting-set-multiple($settings);\n}\n\n// Toolkit Version\n@function toolkit-set($setting, $value) {\n  @return setting-set($setting, $value);\n}\n\n@mixin toolkit-change($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n@mixin toolkit-set($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function setting-clear($setting) {\n  $Return: ();\n\n  @each $Key, $Value in $UserSettings {\n    $Return: if($setting == $Key, $Return, map-merge($Return, ($Key: $Value)));\n  }\n\n  $UserSettings: $Return !global;\n  @return true;\n}\n\n@function setting-clear-multiple($settings...) {\n  @each $setting in $settings {\n    $clear-the-settings: setting-clear($setting);\n  }\n  @return true;\n}\n\n@function setting-reset() {\n  $UserSettings: () !global;\n  @return true;\n}\n\n@mixin setting-clear($setting) {\n  $setting-clearer: setting-clear($setting);\n}\n\n@mixin setting-clear-multiple($settings...) {\n  $setting-clearer: setting-clear-multiple($settings);\n}\n\n@mixin setting-reset() {\n  $setting-clearer: setting-reset();\n}\n\n// Toolkit Version\n@function toolkit-reset($setting) {\n  @return setting-clear($setting);\n}\n\n@mixin toolkit-reset($setting) {\n  @include setting-clear($setting);\n}\n\n//////////////////////////////\n// Setting Pick\n//////////////////////////////\n@function setting-pick($setting, $input) {\n  @return if($input != null, $input, setting-get($setting));\n}\n\n@function setting-pick-multiple($settings) {\n  $Return: ();\n  @each $setting, $input in $settings {\n    $Return: map-merge($Return, ($setting: setting-pick($input, $setting)));\n  }\n\n  @return $Return;\n}","$Private-Toolkit-Placeholders: () !default;\n\n//////////////////////////////\n// Placeholder Get/Set\n//////////////////////////////\n@function toolkit-placeholder-set($id) {\n  $unique-id: unique-id();\n  $Private-Toolkit-Placeholders: map-merge($Private-Toolkit-Placeholders, ($id: $unique-id)) !global;\n  @return $unique-id;\n}\n\n@function toolkit-placeholder-get($id) {\n  @return map-get($Private-Toolkit-Placeholders, $id);\n}\n\n//////////////////////////////\n// Generate Placeholder Class and Extend\n//////////////////////////////\n@mixin dynamic-extend($id) {\n  $placeholder-id: toolkit-placeholder-get($id);\n\n  @if $placeholder-id == null {\n    $placeholder-id: toolkit-placeholder-set($id);\n    @at-root %#{$placeholder-id} {\n      @content;\n    }\n  }\n  @extend %#{$placeholder-id};\n}\n\n//////////////////////////////\n// Static Mixin Helper\n//////////////////////////////\n@mixin mixin-dryer($id, $extend: true) {\n  @if $extend == true {\n    @include dynamic-extend($id) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","//////////////////////////////\n// Modern Clearfix Mixin\n//////////////////////////////\n@mixin clearfix($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('clearfix extend'));\n\n  @if $extend == true {\n    @include dynamic-extend('clearfix') {\n      @include clearfix(false);\n    }\n  }\n  @else {\n    &:after {\n      content: \"\";\n      display: table;\n      clear: both;\n    }\n  }\n}","//////////////////////////////\n// Compass Extension Imports\n//////////////////////////////\n\n//////////////////////////////\n// Tint and Shade\n//////////////////////////////\n@function tint($color, $amount) {\n  @return mix(toolkit-get('tint color'), $color, $amount);\n}\n\n@function shade($color, $amount) {\n  @return mix(toolkit-get('shade color'), $color, $amount);\n}\n\n//////////////////////////////\n// Luma\n//////////////////////////////\n@function luma($color) {\n  @return (red($color) * .299) + (green($color) * .587) + (blue($color) * .114);\n}\n\n@function luma-gte($color1, $color2) {\n  @if luma($color1) >= luma($color2) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n@function luma-lte($color1, $color2) {\n  @if luma($color1) <= luma($color2) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n@function luma-diff($color1, $color2) {\n  @return luma($color1) - luma($color2);\n}\n\n//////////////////////////////\n// Color Stacks\n//////////////////////////////\n@function color-stack($main, $secondary, $amounts...) {\n  @if length($amounts) == 0 {\n    $amounts: toolkit-get('color stack amounts');\n  }\n  @else if length($amounts) == 1 {\n    $amounts: nth($amounts, 1);\n  }\n\n  $stack: $main;\n\n  @each $amount in $amounts {\n    $stack: join($stack, mix($secondary, nth($stack, 1), $amount));\n  }\n\n  @return $stack;\n}\n\n// Tint Stack\n@function tint-stack($color, $amounts...) {\n  @if length($amounts) > 0 {\n    @return color-stack($color, toolkit-get('tint color'), $amounts);\n  }\n  @else {\n    @return color-stack($color, toolkit-get('tint color'));\n  }\n}\n\n// Shade Stack\n@function shade-stack($color, $amounts...) {\n  @if length($amounts) > 0 {\n    @return color-stack($color, toolkit-get('shade color'), $amounts);\n  }\n  @else {\n    @return color-stack($color, toolkit-get('shade color'));\n  }\n}\n\n// Tint/Shade Stack\n@function tint-shade-stack($color, $amounts...) {\n  $colors: ();\n  @if length($amounts) == 0 {\n    $amounts: toolkit-get('tint shade amounts');\n  }\n  $length: length($amounts);\n\n  // Shades\n  @for $i from 1 through $length {\n    $colors: append($colors, shade($color, nth($amounts, $i)));\n  }\n\n  // Base\n  $colors: append($colors, $color);\n\n  // Tints\n  @for $i from 0 through $length - 1 {\n    $colors: append($colors, tint($color, nth($amounts, $length - $i)));\n  }\n\n  @return $colors;\n}\n\n//////////////////////////////\n// Color Scales\n//////////////////////////////\n@function color-scale($main, $secondary, $steps: null) {\n  $steps: if($steps != null, $steps, toolkit-get('color scale steps'));\n\n  $list: $main;\n\n  $red1: red($main);\n  $red2: red($secondary);\n  $red-diff: (($red1 - $red2) / (($steps - 1)));\n\n  $hue1: hue($main);\n  $hue2: hue($secondary);\n  @if ($hue2 + 359 - $hue1) < abs($hue1 - $hue2) {\n    $hue2: $hue2 + 359;\n  }\n  $hue-diff: ($hue2 - $hue1) / ($steps - 1);\n\n  $sat1: saturation($main);\n  $sat2: saturation($secondary);\n  $sat-diff: 0;\n  @if $sat1 > $sat2 {\n    $sat-diff: ($sat2 - $sat1) / ($steps - 1);\n  }\n  @else {\n    $sat-diff: ($sat1 - $sat2) / ($steps - 1);\n  }\n\n  $lte1: lightness($main);\n  $lte2: lightness($secondary);\n  $lte-diff: 0;\n  @if $lte1 > $lte2 {\n    $lte-diff: ($lte2 - $lte1) / ($steps - 1);\n  }\n  @else {\n    $lte-diff: ($lte1 - $lte2) / ($steps - 1);\n  }\n\n  $alp1: alpha($main);\n  $alp2: alpha($secondary);\n  $alp-diff: 0;\n  @if $alp1 > $alp2 {\n    $alp-diff: ($alp2 - $alp1) / ($steps - 1);\n  }\n  @else {\n    $alp-diff: ($alp1 - $alp2) / ($steps - 1);\n  }\n\n  $hue-hold: $hue1;\n  $sat-hold: $sat1;\n  $lte-hold: $lte1;\n  $alp-hold: $alp1;\n  $color-hold: 0;\n\n  @for $i from 2 through $steps {\n    $hue-hold: $hue-hold + $hue-diff;\n    $sat-hold: $sat-hold + $sat-diff;\n    $lte-hold: $lte-hold + $lte-diff;\n    $alp-hold: $alp-hold + $alp-diff;\n\n    $color-hold: hsla($hue-hold, $sat-hold, $lte-hold, $alp-hold);\n    $list: append($list, $color-hold);\n  }\n\n  @return $list;\n}\n\n","//////////////////////////////\n// Enable ligatures\n//////////////////////////////\n@mixin enable-ligatures($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('ligature extend'));\n\n  @if $extend {\n    @include dynamic-extend('enable ligatures') {\n      @include enable-ligatures;\n    }\n  }\n  @else {\n    -webkit-font-feature-settings:\"liga\",\"dlig\";\n    -moz-font-feature-settings:\"liga=1, dlig=1\";\n    -moz-font-feature-settings:\"liga\",\"dlig\";\n    -ms-font-feature-settings:\"liga\",\"dlig\";\n    -o-font-feature-settings:\"liga\",\"dlig\";\n    font-feature-settings: \"liga\",\"dlig\";\n  }\n}\n\n//////////////////////////////\n// Font Face\n//////////////////////////////\n@mixin font-face($name, $files, $weight: null, $style: null, $inline-woff: null) {\n  $weight: if($weight != null, $weight, toolkit-get('font face weight'));\n  $style: if($style != null, $style, toolkit-get('font face style'));\n  $inline-woff: if($inline-woff != null, $inline-woff, toolkit-get('font face inline woff'));\n\n  $font-stack: ();\n  $font-src: '';\n  $eot: false;\n  $font-extensions: ('eot': 'embedded-opentype', 'woff2': 'woff2', 'woff': 'woff', 'ttf': 'truetype', 'svg': 'svg');\n\n  @each $ext, $format in $font-extensions {\n    @if map-has-key($files, $ext) {\n      @if function-exists(inline-font-files) and $inline-woff == true and ($ext == 'woff' or $ext == 'woff2') {\n        $font-src: inline-font-files(map-get($files, $ext));\n      }\n      @else if function-exists(font-url) {\n        $font-src: font-url(map-get($files, $ext)) format($format);\n        @if $ext == 'eot' {\n          $eot: $font-src;\n          $font-src: font-url(map-get($files, $ext) + '#iefix') format($format);\n        }\n      }\n      @else {\n        $font-src: url(map-get($files, $ext)) format($format);\n        @if $ext == 'eot' {\n          $eot: $font-src;\n          $font-src: url(map-get($files, $ext) + '#iefix') format($format);\n        }\n      }\n      $font-stack: append($font-stack, $font-src, 'comma');\n    }\n\n  }\n\n  @font-face {\n    font-family: $name;\n    font-weight: $weight;\n    font-style: $style;\n    @if $eot {\n      src: $eot;\n    }\n    @if length($font-stack) > 0 {\n      src: $font-stack;\n    }\n  }\n}\n\n//////////////////////////////\n// Icon Font\n// From http://icomoon.io\n//////////////////////////////\n@mixin icon-font($font-stack, $speak: null, $extend: null) {\n  $speak: if($speak != null, $speak, toolkit-get('icon font speak'));\n  $extend: if($extend != null, $extend, toolkit-get('icon font extend'));\n\n  font-family: $font-stack;\n  @if $speak == false {\n    speak: none;\n  }\n  @include icon-font--core($extend);\n}\n\n@mixin icon-font--core($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('icon font extend'));\n\n  @if $extend  {\n    @include dynamic-extend('icon font core') {\n      @include icon-font--core(false);\n    }\n  }\n  @else {\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n\n    @include enable-ligatures($extend);\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n}\n\n//////////////////////////////\n// Font Fade In\n//////////////////////////////\n@mixin content-fade-in($duration: null, $loading: null, $extend: null) {\n  $duration: if($duration != null, $duration, toolkit-get('fade in duration'));\n  $loading: if($loading != null, $loading, toolkit-get('fade in loading class'));\n  $extend: if($extend != null, $extend, toolkit-get('fade in extend'));\n\n  @if $extend == true and $duration == toolkit-get('fade in duration') and $loading == toolkit-get('fade in loading class') {\n    @include dynamic-extend('content fade in') {\n      @include content-fade-in($extend: false);\n    }\n  }\n  @else {\n    opacity: 1;\n    @if not mixin-exists('single-transition') {\n      -webkit-transition: opacity $duration;\n      transition: opacity $duration;\n    }\n    @else {\n      @include single-transition(opacity $duration);\n    }\n\n    #{$loading} & {\n      opacity: 0;\n    }\n  }\n}\n","////////////////////////\n// Fluid Embeds and whatever WITH NO JAVASCIPT!\n////////////////////////\n@mixin intrinsic-ratio-parent($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @if $extend {\n    @include dynamic-extend('intrinsic ratio parent') {\n      @include intrinsic-ratio-parent(false);\n    }\n  }\n  @else {\n    position: relative;\n    height: 0;\n  }\n}\n\n@mixin intrinsic-ratio-child($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @if $extend {\n    @include dynamic-extend('intrinsic ratio child') {\n      @include intrinsic-ratio-child(false);\n    }\n  }\n  @else {\n    display: block;\n    position: absolute;\n    width: 100% !important; // Nuke the external styles\n    height: 100% !important; // Nuke the external styles\n    top: 0;\n    margin: 0;\n    padding: 0;\n  }\n}\n\n@mixin intrinsic-ratio-ratio($ratio: null, $width: null, $position: null) {\n  $ratio: if($ratio != null, $ratio, toolkit-get('intrinsic ratio'));\n  $width: if($width != null, $width, toolkit-get('intrinsic ratio width'));\n  $position: if($position != null, $position, toolkit-get('intrinsic ratio position'));\n\n  padding-#{$position}: (1 / $ratio) * $width;\n  width: $width;\n}\n\n@mixin intrinsic-ratio($ratio: null, $width: null, $elements: null, $position: null, $extend: null) {\n  $ratio: if($ratio != null, $ratio, toolkit-get('intrinsic ratio'));\n  $width: if($width != null, $width, toolkit-get('intrinsic ratio width'));\n  $elements: if($elements != null, $elements, toolkit-get('intrinsic ratio elements'));\n  $position: if($position != null, $position, toolkit-get('intrinsic ratio position'));\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @include intrinsic-ratio-parent($extend);\n\n  @include intrinsic-ratio-ratio($ratio, $width, $position);\n\n  @each $element in $elements {\n    #{$element} {\n    \t@include intrinsic-ratio-child($extend);\n    }\n  }\n}\n\n@mixin ir($ratio: null, $width: null, $elements: null, $position: null, $extend: null) {\n  @include intrinsic-ratio($ratio, $width, $elements, $extend, $position);\n}\n\n@mixin ir-ratio($ratio: null, $width: null, $position: null) {\n  @include intrinsic-ratio-ratio($ratio, $width, $position);\n}","// simple function to find the context of a nested percentage.\n@function nested-context($contexts: null) {\n  $contexts: if($contexts != null, $contexts, toolkit-get('nested context contexts'));\n\n  // First level deep is always 100%\n  $percentage: 100%;\n\n  // Loop through each level\n  @each $context in $contexts {\n    // Invert the percentage to find context\n    $percentage: percentage($percentage / $context);\n  }\n  // Return final percentage\n  @return $percentage;\n}\n\n// mixin to make things easier\n@mixin nested-context($contexts: null, $position: null) {\n  $contexts: if($contexts != null, $contexts, toolkit-get('nested context contexts'));\n  $position: if($position != null, $position, toolkit-get('nested context position'));\n\n  width: nested-context($contexts);\n  @if $position == \"center\" {\n    position: relative;\n    left: 50%;\n    margin-left: nested-context($contexts) * -.5;\n  }\n  @if $position == \"right\" {\n    margin-left: nested-context($contexts) * -1 + 100%;\n  }\n}","// Magic parallax mixins\n@mixin parallax-init($perspective: null, $element: null, $parallax-ios: null) {\n\n  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));\n  $element: if($element != null, $element, toolkit-get('parallax element'));\n  $parallax-ios: if($parallax-ios != null, $parallax-ios, toolkit-get('parallax ios'));\n\n  @if $element == 'body' {\n    @at-root {\n      html, body {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n        overflow: hidden;\n      }\n      body {\n        @include parallax-init-core($perspective, $parallax-ios);\n      }\n    }\n  }\n  @else {\n    @if $element == this {\n      @include parallax-init-core($perspective, $parallax-ios);\n    }\n    @else {\n      @at-root #{$element} {\n        @include parallax-init-core($perspective, $parallax-ios);\n      }\n    }\n  }\n}\n\n@mixin parallax-init-core($perspective: null, $parallax-ios: null) {\n  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));\n  $parallax-ios: if($parallax-ios != null, $parallax-ios, toolkit-get('parallax ios'));\n\n  overflow: auto;\n  @if mixin-exists(perspective) {\n    @include perspective($perspective * 1px);\n  }\n  @else {\n    -webkit-perspective: $perspective * 1px;\n    perspective: $perspective * 1px;\n  }\n  // Allows for smooth scrolling but disables parallax effects.\n  @if $parallax-ios == false {\n    -webkit-overflow-scrolling: touch;\n  }\n  // Make sure 3D perspective is preserved\n  &, & * {\n    @if mixin-exists(transform-style) {\n      @include transform-style(preserve-3d);\n    }\n    @else {\n      -webkit-transform-style: preserve-3d;\n      transform-style: preserve-3d;\n    }\n  }\n}\n\n@mixin parallax($distance: null, $perspective: null) {\n\n  $distance: if($distance != null, $distance, toolkit-get('parallax distance'));\n  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));\n\n  $transform: translateZ($distance * $perspective * 1px) scale(abs($distance - 1));\n\n  @if mixin-exists(transform) {\n    @include transform($transform);\n  }\n  @else {\n    -webkit-transform: $transform;\n    transform: $transform;\n  }\n\n  z-index: $distance * 100;\n}\n","@mixin rtl($property, $value) {\n  $_property: $property;\n  #{$property}: $value;\n\n  @if length($value) == 4 {\n    [dir=\"rtl\"] & {\n      #{$property}: nth($value, 1) nth($value, 4) nth($value, 3) nth($value, 2);\n    }\n  }\n  @else {\n    @if (str-index($property, 'left')) {\n      $property: str-slice($property, 1, str-index($property, 'left') - 1) + 'right';\n    }\n    @else if (str-index($property, 'right')) {\n      $property: str-slice($property, 1, str-index($property, 'right') - 1) + 'left';\n    }\n\n    @if $property != $_property {\n      [dir=\"rtl\"] & {\n        #{$property}: $value;\n      }\n    }\n  }\n}","@mixin target($target) {\n  @at-root {\n    /*! @{target: #{$target}} */\n    & {\n      @content;  \n    }\n    /*! {target: #{$target}}@ */  \n  }\n}","//////////////////////////////\n// Draw triangles\n//////////////////////////////\n\n@mixin triangle($color: null, $height: null, $width: null, $angle: null) {\n\n  $color: if($color != null, $color, toolkit-get('triangle color'));\n  $height: if($height != null, $height, toolkit-get('triangle height'));\n  $width: if($width != null, $width, toolkit-get('triangle width'));\n  $angle: if($angle != null, $angle, toolkit-get('triangle angle'));\n\n  @if nth($angle, 1) == \"top\" or nth($angle, 1) == \"bottom\" {\n    $angle: \"#{$angle}\";\n  }\n\n  @if $angle == \"top\" {\n    $angle: 0;\n  }\n  @if $angle == \"top right\" {\n    $angle: 45 * 7;\n  }\n  @if $angle == \"right\" {\n    $angle: 45 * 2;\n  }\n  @if $angle == \"bottom right\" {\n    $angle: 45 * 1;\n  }\n  @if $angle == \"bottom\" {\n    $angle: 45 * 4;\n  }\n  @if $angle == \"bottom left\" {\n    $angle: 45 * 3;\n  }\n  @if $angle == \"left\" {\n    $angle: 45 * 6;\n  }\n  @if $angle == \"top left\" {\n    $angle: 45 * 5;\n  }\n\n  @if unit($height) == \"\" or unit($height) == \"%\" {\n    @debug \"in triangle #{$height} is not a compatible unit for height.\"\n  }\n\n  @if unit($width) == \"\" or unit($width) == \"%\" {\n    @debug \"in triangle #{$width} is not a compatible unit for width.\"\n  }\n\n  // offset 45deg to make each side start at 0\n  $deg: $angle + 45;\n  // if units, remove units\n  @if unit($deg) == deg {\n    $deg: $deg / 1deg;\n  }\n  // shift to be on a scale from 0 to 90.\n  @while $deg > 90 {\n    $deg: $deg - 90;\n  }\n  @while $deg < 0 {\n    $deg: $deg + 90;\n  }\n  // Get a ratio of 90 to multiply by.\n  $deg: $deg / 90;\n\n  // make sure metrics are reset\n  display: block;\n  width: 0;\n  height: 0;\n  border: 0 solid transparent;\n\n  // run through sides\n  @if $angle <= 45 or $angle > 315 {\n    border-bottom-color: $color;\n    border-width: 0 ($width * abs($deg - 1)) $height ($width * $deg);\n  }\n  @if $angle > 45 and $angle <= 135 {\n    border-left-color: $color;\n    border-width: ($height * $deg) 0 ($height * abs($deg - 1)) $width;\n  }\n  @if $angle > 135 and $angle <= 225 {\n    border-top-color: $color;\n    border-width: $height ($width * $deg) 0 ($width * abs($deg - 1));\n  }\n  @if $angle > 225 and $angle <= 315 {\n    border-right-color: $color;\n    border-width: ($height * abs($deg - 1)) $width ($height * $deg) 0;\n  }\n}","// Vertically center anything, literally anything.\n// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/\n@mixin vertical-center($midpoint: null, $extend: null) {\n  $midpoint: if($midpoint != null, $midpoint, toolkit-get('vertical midpoint'));\n  $extend: if($extend != null, $extend, toolkit-get('vertical extend'));\n\n  top: $midpoint;\n  @include vertical-center-core($extend);\n}\n\n@mixin vertical-center-core($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('vertical extend'));\n  @if $extend {\n    @include dynamic-extend('vertical center') {\n      @include vertical-center-core($extend: false);\n    }\n  }\n  @else {\n    position: relative;\n    @if mixin-exists(transform) {\n      @include transform(translateY(-50%));\n    } @else {\n      -webkit-transform: translateY(-50%);\n      -ms-transform: translateY(-50%);\n      transform: translateY(-50%);\n    }\n  }\n}\n\n//////////////////////////////\n// Horizontal Center\n//////////////////////////////\n@mixin horizontal-center($midpoint: null, $fixed: null, $extend: null) {\n  $fixed: if($fixed != null, $fixed, toolkit-get('horizontal fixed'));\n  $extend: if($extend != null, $extend, toolkit-get('horizontal extend'));\n\n  @if $fixed {\n    $midpoint: if($midpoint != null, $midpoint, toolkit-get('horizontal fixed midpoint'));\n  }\n  @else {\n    $midpoint: if($midpoint != null, $midpoint, toolkit-get('horizontal midpoint'));\n  }\n\n  @if $midpoint != 0% {\n    left: $midpoint;\n  }\n\n  @include horizontal-center-core($fixed, $extend);\n}\n\n@mixin horizontal-center-core($fixed: null, $extend: null) {\n  $fixed: if($fixed != null, $fixed, toolkit-get('horizontal fixed'));\n  $extend: if($extend != null, $extend, toolkit-get('horizontal extend'));\n\n  @if $extend {\n    @if $fixed {\n      @include dynamic-extend('horizontal center fixed') {\n        @include horizontal-center-core(true, false);\n      }\n    }\n    @else {\n      @include dynamic-extend('horizontal center') {\n        @include horizontal-center-core(false, false);\n      }\n    }\n  }\n  @else {\n    @if $fixed {\n      position: fixed;\n      @if mixin-exists(transform) {\n        @include transform(translateX(-50%));\n      } @else {\n        -webkit-transform: translateX(-50%);\n        -ms-transform: translateX(-50%);\n        transform: translateX(-50%);\n      }\n    }\n    @else {\n      position: relative;\n      margin: 0 auto;\n    }\n  }\n}\n\n//////////////////////////////\n// Absolute Center\n//////////////////////////////\n@mixin absolute-center($vertical: null, $horizontal: null, $fixed: null, $extend: null) {\n  $vertical: if($vertical != null, $vertical, toolkit-get('absolute center vertical midpoint'));\n  $fixed: if($fixed != null, $fixed, toolkit-get('absolute center fixed'));\n  $extend: if($extend != null, $extend, toolkit-get('absolute center extend'));\n\n  @if $fixed {\n    $horizontal: if($horizontal != null, $horizontal, toolkit-get('absolute center fixed horizontal midpoint'));\n  }\n  @else {\n    $horizontal: if($horizontal != null, $horizontal, toolkit-get('absolute center horizontal midpoint'));\n  }\n\n  top: $vertical;\n  @if $horizontal != 0% {\n    left: $horizontal;\n  }\n\n  @include absolute-center-core($fixed, $extend);\n}\n\n@mixin absolute-center-core($fixed: null, $extend: null) {\n  $fixed: if($fixed != null, $fixed, toolkit-get('absolute center fixed'));\n  $extend: if($extend != null, $extend, toolkit-get('absolute center extend'));\n\n  @if $extend {\n    @if $fixed {\n      @include dynamic-extend('absolute center fixed') {\n        @include absolute-center-core(true, false);\n      }\n    }\n    @else {\n      @include dynamic-extend('absolute center') {\n        @include absolute-center-core(false, false);\n      }\n    }\n  }\n  @else {\n    @if $fixed {\n      position: fixed;\n      @if mixin-exists(transform) {\n        @include transform(translateY(-50%) translateX(-50%));\n      } @else {\n        -webkit-transform: translateY(-50%) translateX(-50%);\n        -ms-transform: translateY(-50%) translateX(-50%);\n        transform: translateY(-50%) translateX(-50%);\n      }\n    }\n    @else {\n      position: relative;\n      @if mixin-exists(transform) {\n        @include transform(translateY(-50%));\n      } @else {\n        -webkit-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n        transform: translateY(-50%);\n      }\n      margin: 0 auto;\n    }\n  }\n\n}","//////////////////////////////\n// CSS level 4 Viewport\n// http://dev.w3.org/csswg/css-device-adapt/#the-atviewport-rule\n//////////////////////////////\n@mixin viewport {\n  @-webkit-viewport {\n    @content;\n  }\n  @-moz-viewport {\n    @content;\n  }\n  @-ms-viewport {\n    @content;\n  }\n  @viewport {\n    @content;\n  }\n}\n\n","@mixin underline($background: null, $color: null, $clear-descenders: null, $distance: null, $width: null, $extend: null) {\n  $background: if($background != null, $background, toolkit-get('underline background'));\n  $color: if($color != null, $color, toolkit-get('underline color'));\n  $clear-descenders: if($clear-descenders != null, $clear-descenders, toolkit-get('underline clear descenders'));\n  $distance: if($distance != null, $distance, toolkit-get('underline distance'));\n  $width: if($width != null, $width, toolkit-get('underline width'));\n  $extend: if($extend != null, $extend, toolkit-get('underline extend'));\n\n  $PX: .0625em;\n\n  @include underline-core($extend);\n\n  @if mixin-exists(background-image) and function-exists(linear-gradient) {\n    @include background-image(\n      linear-gradient(bottom, $background 75%, $color 75%)\n    );\n  }\n  @else {\n    background-image: linear-gradient(to top, $background 75%, $color 75%);\n  }\n  background-size: (2 * $PX) ((1 + $width) * $PX);\n  background-position: 0 (($width) * $PX) + $distance;\n\n  @if $clear-descenders {\n    text-shadow: (1 * $PX) (1 * $PX) 0 $background, (-1 * $PX) 0 0 $background;\n  }\n}\n\n@mixin underline-core($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('underline extend'));\n\n  @if $extend {\n    @include dynamic-extend('underline') {\n      @include underline-core(false);\n    }\n  }\n  @else {\n    text-decoration: none;\n    background-repeat: repeat-x;\n  }\n}","//////////////////////////////\n// ART!\n// Inspired by http://elrumordelaluz.github.io/Pixelator/\n//////////////////////////////\n@mixin art($art, $px-size: null, $color: null, $radius: null) {\n  $px-size: if($px-size != null, $px-size, toolkit-get('art pixel size'));\n  $color: if($color != null, $color, toolkit-get('art color'));\n  $radius: if($radius != null, $radius, toolkit-get('art border radius'));\n\n  $build: ();\n  $y: $px-size;\n  $x: 0;\n\n  height: $px-size;\n  width: $px-size;\n  border-radius: $radius;\n\n  @for $i from 1 through str_length($art) {\n    $char: str_slice($art, $i, $i);\n    $x: $x + $px-size;\n\n    @if $char == 'n' {\n      $y: $y + $px-size;\n      $x: 0;\n    }\n    @else if $char != ' ' {\n      $border: $x $y 0 $color;\n      $build: append($build, $border, comma);\n    }\n  }\n\n  box-shadow: $build;\n}","@mixin set-multiple($value, $properties...) {\n  $property-length: length($properties);\n  $error-msg: \"The `set-multiple` mixin requires you to pass in a list of properties as the second argument\";\n\n  @if $property-length < 1 {\n    @if feature-exists(at-error) {\n      @error $error-msg;\n    }\n    @else {\n      @warn $error-msg;\n    }\n  }\n\n  // If the first argument passed in is a white-spaced separated list.\n  $properties: if($property-length == 1, nth($properties, 1), $properties);\n\n  @each $property in $properties {\n    #{$property}: $value\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function breakpoint-has($setting) {\n  @if map-has-key($breakpoint, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function breakpoint-get($setting) {\n  @if breakpoint-has($setting) {\n    @return map-get($breakpoint, $setting);\n  }\n  @else {\n    @return map-get($Breakpoint-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function breakpoint-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin breakpoint-change($setting, $value) {\n  $breakpoint-change: breakpoint-set($setting, $value);\n}\n\n@mixin breakpoint-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n@mixin bkpt-change($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n@mixin bkpt-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function breakpoint-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $breakpoint: map-remove($breakpoint, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin breakpoint-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}\n\n@mixin bkpt-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}","//////////////////////////////\n// Private Breakpoint Variables\n//////////////////////////////\n$private-breakpoint-context-holder: ();\n$private-breakpoint-query-count: 0 !default;\n\n//////////////////////////////\n// Breakpoint Has Context\n// Returns whether or not you are inside a Breakpoint query\n//////////////////////////////\n@function breakpoint-has-context() {\n  @if length($private-breakpoint-query-count) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Breakpoint Get Context\n// $feature: Input feature to get it's current MQ context. Returns false if no context\n//////////////////////////////\n@function breakpoint-get-context($feature) {\n  @if map-has-key($private-breakpoint-context-holder, $feature) {\n    $get: map-get($private-breakpoint-context-holder, $feature);\n    // Special handling of no-query from get side so /false/ prepends aren't returned\n    @if $feature == 'no-query' {\n      @if type-of($get) == 'list' and length($get) > 1 and nth($get, 1) == false {\n        $get: nth($get, length($get));\n      }\n    }\n    @return $get;\n  }\n  @else {\n    @if breakpoint-has-context() and $feature == 'media' {\n      @return breakpoint-get('default media');\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n//////////////////////////////\n// Private function to set context\n//////////////////////////////\n@function private-breakpoint-set-context($feature, $value) {\n  @if $value == 'monochrome' {\n    $feature: 'monochrome';\n  }\n\n  $current: map-get($private-breakpoint-context-holder, $feature);\n  @if $current and length($current) == $private-breakpoint-query-count {\n    @warn \"You have already queried against `#{$feature}`. Unexpected things may happen if you query against the same feature more than once in the same `and` query. Breakpoint is overwriting the current context with `#{$value}`\";\n  }\n\n  @if not map-has-key($private-breakpoint-context-holder, $feature) {\n    $v-holder: ();\n    @for $i from 1 to $private-breakpoint-query-count {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n  @else {\n    $v-holder: map-get($private-breakpoint-context-holder, $feature);\n    $length: length($v-holder);\n    @for $i from $length to $private-breakpoint-query-count - 1 {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n\n  @return true;\n}\n\n//////////////////////////////\n// Private function to reset context\n//////////////////////////////\n@mixin private-breakpoint-reset-contexts {\n  $private-breakpoint-context-holder: () !global;\n  $private-breakpoint-query-count: 0 !global;\n}","//////////////////////////////\n// Converts the input value to Base EMs\n//////////////////////////////\n@function breakpoint-to-base-em($value) {\n  $value-unit: unit($value);\n\n  // Will convert relative EMs into root EMs.\n  @if breakpoint-get('base font size') and type-of(breakpoint-get('base font size')) == 'number' and $value-unit == 'em' {\n    $base-unit: unit(breakpoint-get('base font size'));\n\n    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {\n      @return base-conversion($value) / base-conversion(breakpoint-get('base font size')) * 1em;\n    }\n    @else {\n      @warn '#{breakpoint-get(\\'base font size\\')} is not set in valid units for font size!';\n      @return false;\n    }\n  }\n  @else {\n    @return base-conversion($value);\n  }\n}\n\n@function base-conversion($value) {\n  $unit: unit($value);\n\n  @if $unit == 'px' {\n    @return $value / 16px * 1em;\n  }\n  @else if $unit == '%' {\n    @return $value / 100% * 1em;\n  }\n  @else if $unit == 'em' {\n    @return $value;\n  }\n  @else if $unit == 'pt' {\n    @return $value / 12pt * 1em;\n  }\n  @else {\n    @return $value;\n//    @warn 'Everything is terrible! What have you done?!';\n  }\n}\n\n//////////////////////////////\n// Returns whether the feature can have a min/max pair\n//////////////////////////////\n$breakpoint-min-max-features: 'color',\n                              'color-index',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'device-height',\n                              'device-width',\n                              'height',\n                              'monochrome',\n                              'resolution',\n                              'width';\n\n@function breakpoint-min-max($feature) {\n  @each $item in $breakpoint-min-max-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can have a string value\n//////////////////////////////\n$breakpoint-string-features:  'orientation',\n                              'scan',\n                              'color',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'pointer',\n                              'luminosity';\n\n@function breakpoint-string-value($feature) {\n  @each $item in $breakpoint-string-features {\n    @if breakpoint-min-max($item) {\n      @if $feature == 'min-#{$item}' or $feature == 'max-#{$item}' {\n        @return true;\n      }\n    }\n    @else if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature is a media type\n//////////////////////////////\n$breakpoint-media-types:  'all',\n                          'braille',\n                          'embossed',\n                          'handheld',\n                          'print',\n                          'projection',\n                          'screen',\n                          'speech',\n                          'tty',\n                          'tv';\n\n@function breakpoint-is-media($feature) {\n  @each $media in $breakpoint-media-types {\n    @if ($feature == $media) or ($feature == 'not #{$media}') or ($feature == 'only #{$media}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can stand alone\n//////////////////////////////\n$breakpoint-single-string-features: 'color',\n                                    'color-index',\n                                    'grid',\n                                    'monochrome';\n\n@function breakpoint-single-string($feature) {\n  @each $item in $breakpoint-single-string-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature\n//////////////////////////////\n@function breakpoint-is-resolution($feature) {\n  $resolutions: 'device-pixel-ratio', 'dpr';\n\n  @if breakpoint-get('transform resolutions') {\n    $resolutions: append($resolutions, 'resolution');\n  }\n\n  @each $reso in $resolutions {\n    @if index($feature, $reso) or index($feature, 'min-#{$reso}') or index($feature, 'max-#{$reso}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","//////////////////////////////\n// Import Parser Pieces\n//////////////////////////////\n@import \"parsers/query\";\n@import \"parsers/single\";\n@import \"parsers/double\";\n@import \"parsers/triple\";\n@import \"parsers/resolution\";\n\n$Memo-Exists: function-exists(memo-get) and function-exists(memo-set);\n\n//////////////////////////////\n// Breakpoint Function\n//////////////////////////////\n@function breakpoint($query, $contexts...) {\n  $run: true;\n  $return: ();\n\n  // Grab the Memo Output if Memoization can be a thing\n  @if $Memo-Exists {\n    $return: memo-get(breakpoint, breakpoint $query $contexts);\n\n    @if $return != null {\n      $run: false;\n    }\n  }\n\n  @if not $Memo-Exists or $run {\n    // Internal Variables\n    $query-string: '';\n    $query-fallback: false;\n    $return: ();\n\n    // Reserve Global Private Breakpoint Context\n    $holder-context: $private-breakpoint-context-holder;\n    $holder-query-count: $private-breakpoint-query-count;\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n\n    // Test to see if it's a comma-separated list\n    $or-list: if(list-separator($query) == 'comma', true, false);\n\n\n    @if ($or-list == false and breakpoint-get('legacy syntax') == false) {\n      $query-string: breakpoint-parse($query);\n    }\n    @else {\n      $length: length($query);\n\n      $last: nth($query, $length);\n      $query-fallback: breakpoint-no-query($last);\n\n      @if ($query-fallback != false) {\n        $length: $length - 1;\n      }\n\n      @if (breakpoint-get('legacy syntax') == true) {\n        $mq: ();\n\n        @for $i from 1 through $length {\n          $mq: append($mq, nth($query, $i), comma);\n        }\n\n        $query-string: breakpoint-parse($mq);\n      }\n      @else {\n        $query-string: '';\n        @for $i from 1 through $length {\n          $query-string: $query-string + if($i == 1, '', ', ') + breakpoint-parse(nth($query, $i));\n        }\n      }\n    }\n\n    $return: ('query': $query-string,\n        'fallback': $query-fallback,\n        'context holder': $private-breakpoint-context-holder,\n        'query count': $private-breakpoint-query-count\n    );\n    @if length($contexts) > 0 and nth($contexts, 1) != false {\n      @if $query-fallback != false {\n        $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n      }\n      $context-map: ();\n      @each $context in $contexts {\n        $context-map: map-merge($context-map, ($context: breakpoint-get-context($context)));\n      }\n      $return: map-merge($return, (context: $context-map));\n    }\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n    @if $Memo-Exists {\n      $holder: memo-set(breakpoint, breakpoint $query $contexts, $return);\n    }\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// General Breakpoint Parser\n//////////////////////////////\n@function breakpoint-parse($query) {\n  // Increase number of 'and' queries\n  $private-breakpoint-query-count: $private-breakpoint-query-count + 1 !global;\n\n  // Set up Media Type\n  $query-print: '';\n\n  $force-all: ((breakpoint-get('force all media type') == true) and (breakpoint-get('default media') == 'all'));\n  $empty-media: true;\n  @if ($force-all == true) or (breakpoint-get('default media') != 'all') {\n    // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n    $query-print: breakpoint-get('default media');\n    $empty-media: false;\n  }\n\n\n  $query-resolution: false;\n\n  $query-holder: breakpoint-parse-query($query);\n\n\n\n  // Loop over each parsed out query and write it to $query-print\n  $first: true;\n\n  @each $feature in $query-holder {\n    $length: length($feature);\n\n    // Parse a single feature\n    @if ($length == 1) {\n      // Feature is currently a list, grab the actual value\n      $feature: nth($feature, 1);\n\n      // Media Type must by convention be the first item, so it's safe to flat override $query-print, which right now should only be the default media type\n      @if (breakpoint-is-media($feature)) {\n        @if ($force-all == true) or ($feature != 'all') {\n          // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n          $query-print: $feature;\n          $empty-media: false;\n\n          // Set Context\n          $context-setter: private-breakpoint-set-context(media, $query-print);\n        }\n      }\n      @else {\n        $parsed: breakpoint-parse-single($feature, $empty-media, $first);\n        $query-print: '#{$query-print} #{$parsed}';\n        $first: false;\n      }\n    }\n    // Parse a double feature\n    @else if ($length == 2) {\n      @if (breakpoint-is-resolution($feature) != false) {\n        $query-resolution: $feature;\n      }\n      @else {\n        $parsed: null;\n        // If it's a string/number pair,\n        // we check to see if one is a single-string value,\n        // then we parse it as a normal double\n        $alpha: nth($feature, 1);\n        $beta: nth($feature, 2);\n        @if breakpoint-single-string($alpha) or breakpoint-single-string($beta) {\n          $parsed: breakpoint-parse-single($alpha, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n          $parsed: breakpoint-parse-single($beta, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n        }\n        @else {\n          $parsed: breakpoint-parse-double($feature, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n        }\n      }\n    }\n    // Parse a triple feature\n    @else if ($length == 3) {\n      $parsed: breakpoint-parse-triple($feature, $empty-media, $first);\n      $query-print: '#{$query-print} #{$parsed}';\n      $first: false;\n    }\n\n  }\n\n  @if ($query-resolution != false) {\n    $query-print: breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first);\n  }\n\n  // Loop through each feature that's been detected so far and append 'false' to the the value list to increment their counters\n  @each $f, $v in $private-breakpoint-context-holder {\n    $v-holder: $v;\n    $length: length($v-holder);\n    @if length($v-holder) < $private-breakpoint-query-count {\n      @for $i from $length to $private-breakpoint-query-count {\n        @if $f == 'media' {\n          $v-holder: append($v-holder, breakpoint-get('default media'));\n        }\n        @else {\n          $v-holder: append($v-holder, false);\n        }\n      }\n    }\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($f: $v-holder)) !global;\n  }\n\n  @return $query-print;\n}\n","@function breakpoint-parse-query($query) {\n  // Parse features out of an individual query\n  $feature-holder: ();\n  $query-holder: ();\n  $length: length($query);\n\n  @if $length == 2 {\n    // If we've got a string/number, number/string, check to see if it's a valid string/number pair or two singles\n    @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') or (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'string') {\n\n      $number: '';\n      $value: '';\n\n      @if type-of(nth($query, 1)) == 'string' {\n        $number: nth($query, 2);\n        $value: nth($query, 1);\n      }\n      @else {\n        $number: nth($query, 1);\n        $value: nth($query, 2);\n      }\n\n      // If the string value can be a single value, check to see if the number passed in is a valid input for said single value. Fortunately, all current single-value options only accept unitless numbers, so this check is easy.\n      @if breakpoint-single-string($value) {\n        @if unitless($number) {\n          $feature-holder: append($value, $number, space);\n          $query-holder: append($query-holder, $feature-holder, comma);\n          @return $query-holder;\n        }\n      }\n      // If the string is a media type, split the query\n      @if breakpoint-is-media($value) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $query-holder: append($query-holder, nth($query, 2));\n        @return $query-holder;\n      }\n      // If it's not a single feature, we're just going to assume it's a proper string/value pair, and roll with it.\n      @else {\n        $feature-holder: append($value, $number, space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n\n    }\n    // If they're both numbers, we assume it's a double and roll with that\n    @else if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {\n      $feature-holder: append(nth($query, 1), nth($query, 2), space);\n      $query-holder: append($query-holder, $feature-holder, comma);\n      @return $query-holder;\n    }\n    // If they're both strings and neither are singles, we roll with that.\n    @else if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'string') {\n      @if not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n    }\n  }\n  @else if $length == 3 {\n    // If we've got three items and none is a list, we check to see\n    @if type-of(nth($query, 1)) != 'list' and type-of(nth($query, 2)) != 'list' and type-of(nth($query, 3)) != 'list' {\n      // If none of the items are single string values and none of the values are media values, we're good.\n      @if (not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) and not breakpoint-single-string(nth($query, 3))) and  ((not breakpoint-is-media(nth($query, 1)) and not breakpoint-is-media(nth($query, 2)) and not breakpoint-is-media(nth($query, 3)))) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $feature-holder: append($feature-holder, nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n      // let's check to see if the first item is a media type\n      @else if breakpoint-is-media(nth($query, 1)) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $feature-holder: append(nth($query, 2), nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder);\n        @return $query-holder;\n      }\n    }\n  }\n\n  // If it's a single item, or if it's not a special case double or triple, we can simply return the query.\n  @return $query;\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"single/default\";\n\n@function breakpoint-parse-single($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // If it's a single feature that can stand alone, we let it\n  @if (breakpoint-single-string($feature)) {\n    $parsed: $feature;\n    // Set Context\n    $context-setter: private-breakpoint-set-context($feature, $feature);\n  }\n  // If it's not a stand alone feature, we pass it off to the default handler.\n  @else {\n    $parsed: breakpoint-parse-default($feature);\n  }\n\n  @return $leader + '(' + $parsed + ')';\n}\n","@function breakpoint-parse-default($feature) {\n  $default: breakpoint-get('default feature');\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($default, $feature);\n\n  @if (breakpoint-get('to ems') == true) and (type-of($feature) == 'number') {\n    @return '#{$default}: #{breakpoint-to-base-em($feature)}';\n  }\n  @else {\n    @return '#{$default}: #{$feature}';\n  }\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"double/default-pair\";\n@import \"double/double-string\";\n@import \"double/default\";\n\n@function breakpoint-parse-double($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  $first: nth($feature, 1);\n  $second: nth($feature, 2);\n\n  // If we've got two numbers, we know we need to use the default pair because there are no media queries that has a media feature that is a number\n  @if type-of($first) == 'number' and type-of($second) == 'number' {\n    $parsed: breakpoint-parse-default-pair($first, $second);\n  }\n  // If they are both strings, we send it through the string parser\n  @else if type-of($first) == 'string' and type-of($second) == 'string' {\n    $parsed: breakpoint-parse-double-string($first, $second);\n  }\n  // If it's a string/number pair, we parse it as a normal double\n  @else {\n    $parsed: breakpoint-parse-double-default($first, $second);\n  }\n\n  @return $leader + $parsed;\n}\n","@function breakpoint-parse-default-pair($first, $second) {\n  $default: breakpoint-get('default pair');\n  $min: '';\n  $max: '';\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$default}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$default}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$default}: #{$min}) and (max-#{$default}: #{$max})';\n}\n","@function breakpoint-parse-double-string($first, $second) {\n  $feature: '';\n  $value: '';\n\n  // Test to see which is the feature and which is the value\n  @if (breakpoint-string-value($first) == true) {\n    $feature: $first;\n    $value: $second;\n  }\n  @else if (breakpoint-string-value($second) == true) {\n    $feature: $second;\n    $value: $first;\n  }\n  @else {\n    @warn \"Neither #{$first} nor #{$second} is a valid media query name.\";\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @return '(#{$feature}: #{$value})';\n}","@function breakpoint-parse-double-default($first, $second) {\n  $feature: '';\n  $value: '';\n\n  @if type-of($first) == 'string' {\n    $feature: $first;\n    $value: $second;\n  }\n  @else {\n    $feature: $second;\n    $value: $first;\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @if (breakpoint-get('to ems') == true) {\n    $value: breakpoint-to-base-em($value);\n  }\n\n  @return '(#{$feature}: #{$value})'\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"triple/default\";\n\n@function breakpoint-parse-triple($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // separate the string features from the value numbers\n  $string: null;\n  $numbers: null;\n  @each $val in $feature {\n    @if type-of($val) == string {\n      $string: $val;\n    }\n    @else {\n      @if type-of($numbers) == 'null' {\n        $numbers: $val;\n      }\n      @else {\n        $numbers: append($numbers, $val);\n      }\n    }\n  }\n\n  $parsed: breakpoint-parse-triple-default($string, nth($numbers, 1), nth($numbers, 2));\n\n  @return $leader + $parsed;\n\n}\n","@function breakpoint-parse-triple-default($feature, $first, $second) {\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$feature}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$feature}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$feature}: #{$min}) and (max-#{$feature}: #{$max})';\n}\n","@import \"resolution/resolution\";\n\n@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  @if breakpoint-get('transform resolutions') and $query-resolution {\n    $resolutions: breakpoint-make-resolutions($query-resolution);\n    $length: length($resolutions);\n    $query-holder: '';\n\n    @for $i from 1 through $length {\n      $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';\n      @if $i == 1 {\n        $query-holder: $query;\n      }\n      @else {\n        $query-holder: '#{$query-holder}, #{$query}';\n      }\n    }\n\n    @return $query-holder;\n  }\n  @else {\n    // Return with attached resolution\n    @return $query-print;\n  }\n}\n","@function breakpoint-make-resolutions($resolution) {\n  $length: length($resolution);\n\n  $output: ();\n\n  @if $length == 2 {\n    $feature: '';\n    $value: '';\n\n    // Find which is number\n    @if type-of(nth($resolution, 1)) == 'number' {\n      $value: nth($resolution, 1);\n    }\n    @else {\n      $value: nth($resolution, 2);\n    }\n\n    // Determine min/max/standard\n    @if index($resolution, 'min-resolution') {\n      $feature: 'min-';\n    }\n    @else if index($resolution, 'max-resolution') {\n      $feature: 'max-';\n    }\n\n    $standard: '(#{$feature}resolution: #{$value})';\n\n    // If we're not dealing with dppx,\n    @if unit($value) != 'dppx' {\n      $base: 96dpi;\n      @if unit($value) == 'dpcm' {\n        $base: 243.84dpcm;\n      }\n      // Write out feature tests\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n    }\n    @else {\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';\n      $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n      $output: append($output, $fallback, space);\n    }\n\n  }\n\n  @return $output;\n}\n","@function breakpoint-no-query($query) {\n  @if type-of($query) == 'list' {\n    $keyword: nth($query, 1);\n\n    @if type-of($keyword) == 'string' and ($keyword == 'no-query' or $keyword == 'no query' or $keyword == 'fallback') {\n      @return nth($query, 2);\n    }\n    @else {\n      @return false;\n    }\n  }\n  @else {\n    @return false;\n  }\n}\n","////////////////////////\n// Default the Breakpoints variable\n////////////////////////\n$breakpoints: () !default;\n$BREAKPOINTS: () !default;\n\n////////////////////////\n// Respond-to API Mixin\n////////////////////////\n@mixin respond-to($context, $no-query: false) {\n  @if length($breakpoints) > 0 and length($BREAKPOINTS) == 0 {\n    @warn \"In order to avoid variable namespace collisions, we have updated the way to add breakpoints for respond-to. Please change all instances of `$breakpoints: add-breakpoint()` to `@include add-breakpoint()`. The `add-breakpoint()` function will be deprecated in a future release.\";\n    $BREAKPOINTS: $breakpoints !global;\n    $breakpoints: () !global;\n  }\n\n  @if type-of($BREAKPOINTS) != 'map' {\n    // Just in case someone writes gibberish to the $breakpoints variable.\n    @warn \"Your breakpoints aren't a map! `respond-to` expects a map. Please check the value of $BREAKPOINTS variable.\";\n    @content;\n  }\n  @else if map-has-key($BREAKPOINTS, $context) {\n    @include breakpoint(map-get($BREAKPOINTS, $context), $no-query) {\n      @content;\n    }\n  }\n  @else if not map-has-key($BREAKPOINTS, $context) {\n    @warn \"`#{$context}` isn't a defined breakpoint! Please add it using `$breakpoints: add-breakpoint(`#{$context}`, $value);`\";\n    @content;\n  }\n  @else {\n    @warn \"You haven't created any breakpoints yet! Make some already! `@include add-breakpoint($name, $bkpt)`\";\n    @content;\n  }\n}\n\n//////////////////////////////\n// Add Breakpoint to Breakpoints\n// TODO: Remove function in next release\n//////////////////////////////\n@function add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($breakpoints) == 0 {\n    @return $output;\n  }\n  @else {\n    @if map-has-key($breakpoints, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      @return $breakpoints;\n    }\n    @else if not map-has-key($breakpoints, $name) or $overwrite == true {\n      @return map-merge($breakpoints, $output);\n    }\n  }\n}\n\n@mixin add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($BREAKPOINTS) == 0 {\n    $BREAKPOINTS: $output !global;\n  }\n  @else {\n    @if map-has-key($BREAKPOINTS, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      $BREAKPOINTS: $BREAKPOINTS !global;\n    }\n    @else if not map-has-key($BREAKPOINTS, $name) or $overwrite == true {\n      $BREAKPOINTS: map-merge($BREAKPOINTS, $output) !global;\n    }\n  }\n}\n\n@function get-breakpoint($name: false) {\n  @if $name == false {\n    @return $BREAKPOINTS;\n  }\n  @else {\n    @return map-get($BREAKPOINTS, $name);\n  }\n}\n","@mixin legacy-settings-warning {\n  $legacyVars: (\n    'default-media': 'default media',\n    'default-feature': 'default feature',\n    'force-media-all': 'force all media type',\n    'to-ems': 'to ems',\n    'resolutions': 'transform resolutions',\n    'no-queries': 'no queries',\n    'no-query-fallbacks': 'no query fallbacks',\n    'base-font-size': 'base font size',\n    'legacy-syntax': 'legacy syntax'\n  );\n\n  @each $legacy, $new in $legacyVars {\n    @if global-variable-exists('breakpoint-' + $legacy) {\n      @warn \"In order to avoid variable namspace collisions, we have updated the way to change settings for Breakpoint. Please change all instances of `$breakpoint-#{$legacy}: {{setting}}` to `@include breakpoint-set('#{$new}', {{setting}})`. Variable settings, as well as this warning will be deprecated in a future release.\"\n    }\n  };\n\n  //////////////////////////////\n  // Hand correct each setting\n  //////////////////////////////\n  @if global-variable-exists('breakpoint-default-media') and $breakpoint-default-media != breakpoint-get('default media') {\n    @include breakpoint-set('default media', $breakpoint-default-media);\n  }\n  @if global-variable-exists('breakpoint-default-feature') and $breakpoint-default-feature != breakpoint-get('default feature') {\n    @include breakpoint-set('default feature', $breakpoint-default-feature);\n  }\n  @if global-variable-exists('breakpoint-force-media-all') and $breakpoint-force-media-all != breakpoint-get('force all media type') {\n    @include breakpoint-set('force all media type', $breakpoint-force-media-all);\n  }\n  @if global-variable-exists('breakpoint-to-ems') and $breakpoint-to-ems != breakpoint-get('to ems') {\n    @include breakpoint-set('to ems', $breakpoint-to-ems);\n  }\n  @if global-variable-exists('breakpoint-resolutions') and $breakpoint-resolutions != breakpoint-get('transform resolutions') {\n    @include breakpoint-set('transform resolutions', $breakpoint-resolutions);\n  }\n  @if global-variable-exists('breakpoint-no-queries') and $breakpoint-no-queries != breakpoint-get('no queries') {\n    @include breakpoint-set('no queries', $breakpoint-no-queries);\n  }\n  @if global-variable-exists('breakpoint-no-query-fallbacks') and $breakpoint-no-query-fallbacks != breakpoint-get('no query fallbacks') {\n    @include breakpoint-set('no query fallbacks', $breakpoint-no-query-fallbacks);\n  }\n  @if global-variable-exists('breakpoint-base-font-size') and $breakpoint-base-font-size != breakpoint-get('base font size') {\n    @include breakpoint-set('base font size', $breakpoint-base-font-size);\n  }\n  @if global-variable-exists('breakpoint-legacy-syntax') and $breakpoint-legacy-syntax != breakpoint-get('legacy syntax') {\n    @include breakpoint-set('legacy syntax', $breakpoint-legacy-syntax);\n  }\n}","//////////////////////////////\n// Default Settings\n//////////////////////////////\n$Singularity-Settings: (\n  'grids': (-1px: 12),\n  'gutters': (-1px: .25),\n  'gutter styles': (-1px: 'opposite'),\n  'output': 'isolation',\n  'direction': 'ltr',\n  'mobile first': true,\n  'include border box': false,\n  'include clearfix': false,\n  'background grid color': chocolate,\n  'asymmetric output': 'isolation',\n  'calc include min-width': true,\n  'debug': false\n);\n\n//////////////////////////////\n// User Settings\n//////////////////////////////\n$singularity: () !default;\n\n//////////////////////////////\n// Import General Helpers\n//////////////////////////////\n@import \"singularitygs/helpers\";\n\n//////////////////////////////\n// Import Language Helpers\n//////////////////////////////\n@import \"singularitygs/language\";\n\n//////////////////////////////\n// Import Math\n//////////////////////////////\n@import \"singularitygs/math\";\n\n//////////////////////////////\n// Import Grid Helpers\n//////////////////////////////\n@import \"singularitygs/grids\";\n\n//////////////////////////////\n// Import Gutters Helpers\n//////////////////////////////\n@import \"singularitygs/gutters\";\n\n//////////////////////////////\n// Import Gutter Styles\n//////////////////////////////\n@import \"singularitygs/gutter-styles\";\n\n//////////////////////////////\n// Import APIs\n//////////////////////////////\n@import \"singularitygs/api\";","//////////////////////////////\n// Setting Helpers\n//////////////////////////////\n@import \"helpers/settings\";\n\n//////////////////////////////\n// Code Helpers\n//////////////////////////////\n@import \"helpers/find\";\n@import \"helpers/sass-lists\";\n@import \"helpers/columns\";\n@import \"helpers/span-shared\";\n@import \"helpers/directions\";\n@import \"helpers/sort\";\n\n//////////////////////////////\n// UI Helpers\n//////////////////////////////\n@import \"helpers/background-grid\";\n\n//////////////////////////////\n// Layout Helpers\n//////////////////////////////\n@import \"helpers/layout\";","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function sgs-has($setting) {\n  @if map-has-key($singularity, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function sgs-get($setting) {\n  @if sgs-has($setting) {\n    @return map-get($singularity, $setting);\n  }\n  @else {\n    @return map-get($Singularity-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function sgs-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Singularity settings should be spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $singularity: map-merge($singularity, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin sgs-change($setting, $value) {\n  $sgs-change: sgs-set($setting, $value);\n}\n\n@mixin sgs-set($setting, $value) {\n  @include sgs-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function sgs-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $singularity: map-remove($singularity, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin sgs-reset($settings...) {\n  $sgs-reset: sgs-reset($settings);\n}","//////////////////////////////\n// Find Object Keys\n//\n// Returns\n//////////////////////////////\n@function find-object-keys($haystack) {\n  $Keys: map-keys($haystack);\n  $List: ();\n  @each $Key in $Keys {\n    @if $Key != -1px {\n      @if unit($Key) == 'em' {\n        $Key: $Key / 1em * 16px;\n      }\n      $List: append($List, $Key);\n    }\n  }\n  @return quicksort($List);\n}\n\n//////////////////////////////\n// Find Object\n//\n// Finds relevant object\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-object($haystack, $user-object: null) {\n  // If a user object has been passed in, bypass the whole function and just return that object.\n  @if $user-object != null and $user-object != false {\n    @return $user-object;\n  }\n\n  $Length: length($haystack);\n  $Mobile-First: sgs-get('mobile first');\n\n  // Haystack must be map\n  @if type-of($haystack) != 'map' {\n    @warn \"DEPRECATION: In order to remove global variable naming conflicts, Singularity's settings have been moved into the single `$singularity` variable. Please refer to our documentation (https://github.com/Team-Sass/Singularity/wiki) on how to update your settings. In the next version of Singularity, this warning will be removed. #{nth($haystack, 1)} has been returned.\";\n    @return nth($haystack, 1);\n  }\n\n  @if $Length > 1 {\n    // Grab Breakpoint Context\n    @if not function-exists(breakpoint-get-context) {\n      @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. First item used.\";\n      @return map-get($haystack, -1px);\n    }\n    // Get Breakpoint Contexts\n    $Query-Min: breakpoint-get-context('min-width');\n    $Query-Max: breakpoint-get-context('max-width');\n\n    @if length($Query-Min) == 1 {\n      $Query-Min: nth($Query-Min, 1);\n    }\n    @else if length($Query-Min) > 1 {\n      @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\n      @return map-get($haystack, -1px);\n    }\n\n\n    @if length($Query-Max) == 1 {\n      $Query-Max: nth($Query-Max, 1);\n    }\n    @else if length($Query-Max) > 1 {\n      @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\n      @return map-get($haystack, -1px);\n    }\n\n    // If there is no min or max context, return first item\n    @if $Query-Min == false and $Query-Max == false {\n      $RETURN: map-get($haystack, -1px);\n      @return $RETURN;\n    }\n\n    // Convert to PX\n    @if $Query-Min != false and  unit($Query-Min) == 'em' {\n      $Query-Min: $Query-Min / 1em * 16px;\n    }\n    @if $Query-Max != false and unit($Query-Max) == 'em' {\n      $Query-Max: $Query-Max / 1em * 16px;\n    }\n\n    $Find-Haystack: find-object-keys($haystack);\n    $Reverse-Haystack: reverse($Find-Haystack);\n\n    $Smallest: nth($Find-Haystack, 1);\n    $Largest: nth($Reverse-Haystack, 1);\n    $Context: $Query-Min;\n\n    @if not $Mobile-First {\n      $Context: $Query-Max;\n    }\n\n    // Loop over each item in Context to find if any of the items pass.\n    @each $Query-Context in $Context {\n      @if $Query-Context != false {\n        // If it's smallest than the smallest MQ, use the 1st grid\n        @if $Query-Context < $Smallest {\n          $RETURN: map-get($haystack, -1px);\n          @return $RETURN;\n        }\n        // If it's larger than or equal to the largest MQ, use the last grid\n        @else if $Query-Context >= $Largest {\n          $RETURN: map-get($haystack, $Largest);\n          @return $RETURN;\n        }\n        // If it's in between the smallest and largest, go run a check.\n        @else {\n          // Loop through each MQ.\n          @for $j from 1 through length($Reverse-Haystack) {\n            $Query: nth($Reverse-Haystack, $j);\n\n            // If the MQ is greather than or equal to the the MQ in question, use it! (mobile first)\n            @if ($Mobile-First) {\n              @if $Query-Context >= $Query {\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\n                @return $RETURN;\n              }\n            }\n            // If the MQ is less than or equal to the the MQ in question, use it! (not mobile first)\n            @else {\n              @if $Query-Context <= $Query {\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\n                @return $RETURN;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  // All else fails, return the first item\n  @else {\n    $RETURN: map-get($haystack, -1px);\n    @return $RETURN;\n  }\n}\n","// ---------------------------------------------------------------------------\n// Sass List Helpers\n//\n// - list-sum()\n// - query-list()\n\n// ---------------------------------------------------------------------------\n// Functions\n\n// Return the sum of all items in a list.\n//\n// list-sum($list)\n// - $list  : <list>\n@function list-sum($list) {\n  $sum: 0;\n  @each $item in $list {\n    $sum: $sum + $item;\n  }\n  @return $sum;\n}\n\n// Return list of index locations where a query appears in a list,\n// including unit queries.\n//\n// query-list($list, $query [, $mode])\n// - $list    : <list>\n// - $query   : <anything>\n// - $mode    : none | unit\n//            - \"none\" (default) runs a standard query.\n//            - \"unit\" finds all items with the same unit.\n@function query-list(\n  $list,\n  $query,\n  $mode: none\n) {\n  $return: ();\n\n  // loop through $list\n  @for $i from 1 through length($list) {\n    @if $mode == unit {\n      // if the list item matches the query, write where it is to the list.\n      @if unit(nth($list, $i)) == $query {\n        $return: append($return, $i);\n      }\n    }\n    @else {\n      // if the list item matches the query, write where it is to the list.\n      @if nth(nth($list, $i), 1) == $query {\n        $return: append($return, $i);\n      }\n    }\n  }\n\n  // if nothing matches then return false.\n  @if $return == () {\n    $return: false;\n  }\n\n  // return list.\n  @return $return;\n}\n\n// Reverses direction of a list\n@function reverse($list) {\n  $length: length($list);\n  $return: ();\n  @for $i from 0 to $length {\n    $return: append($return, nth($list, $length - $i));\n  }\n  @return $return;\n}","@function end-row($span, $location, $columns) {\n  @if $location == 'last' or $location == 'omega' {\n    @return true;\n  }\n  @else {\n    @if $location + ($span - 1) == column-count($columns) {\n      @return true;\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n@function start-row($location) {\n  @if $location == 'first' or $location == 'alpha' {\n    @return true;\n  }\n  @else if $location == 1 {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}","@mixin span-shared {\n  $include-border-box: sgs-get('include border box');\n  $include-clearfix: sgs-get('include clearfix');\n\n  @if $include-border-box {\n    @if mixin-exists(box-sizing) {\n      @include box-sizing(border-box);\n    }\n    @else {\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n  }\n\n  @if $include-clearfix {\n    @if mixin-exists(clearfix) {\n      @include clearfix;\n    }\n    @else {\n      &:after {\n        content: \"\";\n        display: table;\n        clear: both;\n      }\n    }\n  }\n}","//////////////////////////////\n// Find Opposite Direction\n//////////////////////////////\n@function opposite-direction($dir) {\n  @if $dir == 'left' {\n    @return right;\n  }\n  @else if  $dir == 'right' {\n    @return left;\n  }\n  @else if $dir == 'ltr' {\n    @return rtl;\n  }\n  @else if $dir == 'rtl' {\n    @return ltr;\n  }\n  @else if $dir == 'top' {\n    @return bottom;\n  }\n  @else if $dir == 'bottom' {\n    @return top;\n  }\n  @else {\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find Direction Name\n//////////////////////////////\n@function named-direction($dir) {\n  @if $dir == 'ltr' {\n    @return left;\n  }\n  @else if $dir == 'rtl' {\n    @return right;\n  }\n  @else {\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\n    @return false;\n  }\n}","//////////////////////////////\n// Quicksort\n// http://rosettacode.org/wiki/Sorting_algorithms/Quicksort\n//////////////////////////////\n@function quicksort($list) {\n\n  $QS-Less: ();\n  $QS-Equal: ();\n  $QS-Large: ();\n\n  $QS-Length: length($list);\n\n  $QS-Seed: round($QS-Length / 2);\n\n  @if $QS-Length > 1 {\n    $QS-Seed: nth($list, $QS-Seed);\n    @each $Item in $list {\n      @if $Item < $QS-Seed {\n        $QS-Less: append($QS-Less, $Item);\n      }\n      @else if $Item == $QS-Seed {\n        $QS-Equal: append($QS-Equal, $Item);\n      }\n      @else {\n        $QS-Large: append($QS-Large, $Item);\n      }\n    }\n    $QS-Less: quicksort($QS-Less);\n    $QS-Large: quicksort($QS-Large);\n\n    $QS-Return: join($QS-Less, $QS-Equal);\n    $QS-Return: join($QS-Return, $QS-Large);\n\n    @return $QS-Return;\n  }\n\n  @return $list;\n}\n\n//////////////////////////////\n// Sort Map function\n//////////////////////////////\n@function sort-map($map, $reverse: false) {\n  $Sort-Map-Keys: quicksort(map-keys($map));\n  $Sort-Map-Map: ();\n\n  @if $reverse {\n    $Sort-Map-Keys: reverse($Sort-Map-Keys);\n  }\n\n  @each $key in $Sort-Map-Keys {\n    $Sort-Map-Map: map-merge($Sort-Map-Map, ($key: map-get($map, $key)));\n  }\n\n  @return $Sort-Map-Map;\n}","// -----------------------------------------------\n// Grid Background\n\n@mixin background-grid(\n  $columns: null,\n  $gutter: null,\n  $gutter-style: null,\n  $color: null\n) {\n\n  $color: if($color != null, $color, sgs-get('background grid color'));\n\n  @if sgs-get('debug') != false {\n    $columns: if($columns != null, $columns, sgs-get('grids'));\n    $gutter: if($gutter != null, $gutter, sgs-get('gutters'));\n    $gutter-style: if($gutter-style != null, $gutter-style, sgs-get('gutter styles'));\n\n    @include background-build($columns, $gutter, $gutter-style, $color)\n  }\n}\n\n@function background-map($columns, $gutters, $gutter-styles) {\n  $Grids: ();\n  $Gutters: ();\n  $Styles: ();\n\n  @if $columns and type-of($columns) != 'map' {\n    $Grids: (-1px: $columns);\n  }\n  @else {\n    $Grids: sgs-get('grids');\n  }\n\n  @if $gutters and type-of($gutters) != 'map' {\n    $Gutters: (-1px: $gutters);\n  }\n  @else {\n    $Gutters: sgs-get('gutters');\n  }\n\n  @if $gutter-styles and type-of($gutter-styles) != 'map' {\n    $Styles: (-1px: $gutter-styles);\n  }\n  @else {\n    $Styles: sgs-get('gutter styles');\n  }\n\n  // Build 1st Depth Map\n  $Holder: ();\n\n  // Grids\n  @each $k, $v in $Grids {\n    $Holder: map-merge($Holder, ($k: ('grid': $v)));\n  }\n  // Gutters\n  @each $k, $v in $Gutters {\n    $Grid: map-get($Holder, $k);\n\n    $Map: ('gutter': $v);\n    @if $Grid != null {\n      $Grid: map-get($Grid, 'grid');\n      @if $Grid != null {\n        $Map: map-merge($Map, ('grid': $Grid));\n      }\n    }\n\n    $Holder: map-merge($Holder, ($k: $Map));\n  }\n  // Style\n  @each $k, $v in $Styles {\n    $Grid: map-get($Holder, $k);\n    $Gutter: map-get($Holder, $k);\n\n    $Map: ('style': $v);\n    @if $Grid != null {\n      $Grid: map-get($Grid, 'grid');\n      @if $Grid != null {\n        $Map: map-merge($Map, ('grid': $Grid));\n      }\n    }\n    @if $Gutter != null {\n      $Gutter: map-get($Gutter, 'gutter');\n      @if $Gutter != null {\n        $Map: map-merge($Map, ('gutter': $Gutter));\n      }\n    }\n\n    $Holder: map-merge($Holder, ($k: $Map));\n  }\n\n  $Holder: sort-map($Holder);\n  $Return: ();\n\n  // Build full stack for each breakpoint\n  @for $i from 1 through length($Holder) {\n    $Key: nth(nth($Holder, $i), 1);\n    $Value: nth(nth($Holder, $i), 2);\n\n    $Previous: ();\n    @if $i > 1 {\n      $Previous: nth(nth($Return, $i - 1), 2);\n    }\n\n    @if not map-has-key($Value, 'grid') {\n      $Sort-Grid: map-get($Previous, 'grid');\n      $Value: map-merge($Value, ('grid': $Sort-Grid));\n    }\n\n    @if not map-has-key($Value, 'gutter') {\n      $Sort-Gutter: map-get($Previous, 'gutter');\n      $Value: map-merge($Value, ('gutter': $Sort-Gutter));\n    }\n\n    @if not map-has-key($Value, 'style') {\n      $Sort-Style: map-get($Previous, 'style');\n      $Value: map-merge($Value, ('style': $Sort-Style));\n    }\n\n    $Return: map-merge($Return, ($Key: $Value));\n  }\n\n  @return $Return;\n}\n\n@mixin background-build($columns, $gutters, $gutter-styles, $color) {\n  $Background-Map: background-map($columns, $gutters, $gutter-styles);\n  $Display: true;\n\n  $Column-Color: $color;\n  $Inverse-Column-Color: mix(black, $color, 15%);\n  $Gutter-Color: mix(white, $color, 25%);\n  $Direction: named-direction(sgs-get('direction'));\n\n  $encodeMap:(\n    '%\"':'%25%22',\n    '<':'%3C',\n    ' ':'%20',\n    '=':'%3D',\n    '\\\"':'%22',\n    ':':'%3A',\n    '/':'%2F',\n    '.':'%2E',\n    '>':'%3E',\n    '#':'%23',\n    '-':'%2D'\n  );\n\n  @each $bkpt, $def in $Background-Map {\n    $Grid: map-get($def, 'grid');\n    $Gutter: map-get($def, 'gutter');\n    $Style: map-get($def, 'style');\n\n    $Grid-Count: column-count($Grid);\n\n    $SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\">';\n\n    $Gutter-Width: gutter-span($Gutter, $Grid, $Style);\n    @if unit($Gutter-Width) != '%' and unit($Gutter-Width) != '' {\n      $Gutter-Width: 0%;\n    }\n\n    @if $Style == 'fixed' {\n      $Gutter-Width: 0%;\n    }\n    $Counter-Width: 0%;\n    $holder: ();\n\n    @for $i from 1 through $Grid-Count {\n      $Holder-Gradient: ();\n      $Loop-Width: column-span(1, $i, $Grid, $Gutter, $Style);\n\n      @if index($Style, 'split') and $i == 1 {\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\n        $Counter-Width: ($Gutter-Width / 2);\n      }\n\n      $Loop-Color: $Column-Color;\n      @if (index($Style, 'fixed') or $Gutter-Width == 0%) and ($i % 2 == 0 ) {\n        $Loop-Color: $Inverse-Column-Color;\n      }\n\n      @if $i != $Grid-Count {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width;\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Gutter-Width;\n        }\n        @else {\n          $Display: false;\n        }\n\n      }\n      @else if $i == 1 {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $SVG: $SVG + '<rect x=\"#{$Loop-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width + $Gutter-Width;\n        }\n        @else {\n          $Display: false;\n        }\n\n      }\n      @else if $i == $Grid-Count and index($Style, 'split') {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width;\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\n        }\n        @else {\n          $Display: false;\n        }\n      }\n      @else {\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n      }\n    }\n\n    $SVG: $SVG + '</svg>';\n\n    @each $char, $code in $encodeMap {\n      $index: str-index($SVG, $char);\n      @while $index {\n        $index: str-index($SVG, $char);\n        $SVG: str-slice($SVG, 1, $index - 1) + $code + str-slice($SVG, $index + str-length($char));\n        $index: str-index($SVG, $char);\n      }\n    }\n\n    @if $Display {\n\n      @if $bkpt != -1px {\n        @include breakpoint($bkpt) {\n          background-image: url('data:image/svg+xml,' + $SVG);\n        }\n      }\n      @else {\n        background-image: url('data:image/svg+xml,' + $SVG);\n      }\n    }\n    @else {\n      @warn 'Cannot generate a Background Grid for grid `#{$Grid}` with gutters `#{$Gutter}` and gutter style `#{$Style}`';\n    }\n  }\n}\n","//////////////////////////////\n// Wrapper mixin for overriding the global contexts as a block\n//////////////////////////////\n@mixin layout($grid: false, $gutter: false, $output-style: false, $gutter-style: false) {\n\n  @if type-of($grid) == 'map' {\n    $layout: $grid;\n    @if map-has-key($layout, 'grid') {\n      $grid: map-get($layout, 'grid');\n    }\n\n    @if map-has-key($layout, 'gutter') {\n      $gutter: map-get($layout, 'gutter');\n    }\n\n    @if map-has-key($layout, 'output style') {\n      $output-style: map-get($layout, 'output style');\n    }\n    @if map-has-key($layout, 'output') {\n      $output-style: map-get($layout, 'output');\n    }\n\n    @if map-has-key($layout, 'gutter style') {\n      $gutter-style: map-get($layout, 'gutter style');\n    }\n  }\n\n  // Private holder for current global context\n  $layout-private-grid-holder: sgs-get('grids');\n  $layout-private-gutter-holder: sgs-get('gutters');\n  $layout-private-output-holder: sgs-get('output');\n  $layout-private-gutter-style-holder: sgs-get('gutter styles');\n\n  // Overides current global contexts, but only if needed\n  @if $grid != false {\n    @include sgs-reset('grids');\n    @if type-of($grid) != 'map' {\n      @include sgs-change('grids', (-1px: $grid));\n    }\n    @else {\n      @include sgs-change('grids', $grid);\n    }\n  }\n  @if $gutter != false {\n    @include sgs-reset('gutters');\n    @if type-of($gutter) != 'map' {\n      @include sgs-change('gutters', (-1px: $gutter));\n    }\n    @else {\n      @include sgs-change('gutters', $gutter);\n    }\n  }\n  @if $output-style != false {\n    @include sgs-reset('output');\n    @include sgs-change('output', $output-style);\n  }\n  @if $gutter-style != false {\n    @include sgs-reset('gutter styles');\n    @if type-of($gutter-style) != 'map' {\n      @include sgs-change('gutter styles', (-1px: $gutter-style));\n    }\n    @else {\n      @include sgs-change('gutter styles', $gutter-style);\n    }\n  }\n\n  // All the things!\n  @content;\n\n  // REset ALL the settings\n  @include sgs-reset('grids');\n  @include sgs-reset('gutters');\n  @include sgs-reset('output');\n  @include sgs-reset('gutter styles');\n  // Resets global contexts\n  @include sgs-change('grids', $layout-private-grid-holder);\n  @include sgs-change('gutters', $layout-private-gutter-holder);\n  @include sgs-change('output', $layout-private-output-holder);\n  @include sgs-change('gutter styles', $layout-private-gutter-style-holder);\n}\n\n//////////////////////////////\n// Layout At\n// Wrapper mixin for a combined Breakpoint/Layout call\n//////////////////////////////\n@mixin layout-at($layout, $breakpoint) {\n  @include breakpoint($breakpoint) {\n    // If a single value is passed in, assume it's a grid\n    @if type-of($layout) != map {\n      @include layout($layout) {\n        @content;\n      }\n    }\n    // If it is a map, we've got key/values to work with\n    @else {\n      $grid: false;\n      $gutter: false;\n      $output-style: false;\n      $gutter-style: false;\n\n      @if map-has-key($layout, 'grid') {\n        $grid: map-get($layout, 'grid');\n      }\n\n      @if map-has-key($layout, 'gutter') {\n        $gutter: map-get($layout, 'gutter');\n      }\n\n      @if map-has-key($layout, 'output style') {\n        $output-style: map-get($layout, 'output style');\n      }\n      @if map-has-key($layout, 'output') {\n        $output-style: map-get($layout, 'output');\n      }\n\n      @if map-has-key($layout, 'gutter style') {\n        $gutter-style: map-get($layout, 'gutter style');\n      }\n\n      @include layout($grid, $gutter, $output-style, $gutter-style) {\n        @content;\n      }\n    }\n  }\n}","@import \"language/parse-list\";\n@import \"language/parse-add\";\n@import \"language/span\";","//////////////////////////////\n// Parse natural language string\n//\n// Retrieve values from the natural language string.\n// parse-string($var, $list)\n//  $var  : <string>\n//        - 'at'/'span'/'of' or any other keywords.\n//        - 'span' queries the unprefixed span declaration.\n//        - 'at' can also query first, last, alpha, and omega.\n//        - 'grid' will return the same as 'of'\n//  $list : <list>\n//        - A list like this: last 2 of (1 1 2) push 1\n//\n//////////////////////////////\n@function parse-span-list($var, $list) {\n\n  $found: false;\n\n  $grid: ();\n\n  // Loop through list.\n  @each $item in $list {\n    // if 'span' - return the first numeric.\n    // if keyword was found - return the following item.\n    @if (type-of($item) == number and $var == span and $found != 'grid') or $found == true {\n\n      // @if $found == true\n      @return $item;\n    }\n\n    // Special handling for Grids\n    @else if ($item == $var or $item == 'grid' or $item == 'of') and ($var == 'of' or $var == 'grid') {\n      $found: 'grid';\n    }\n\n    @else if $found == 'grid' {\n      @if type-of($item) == number {\n        $grid: append($grid, $item, 'space');\n      }\n      @else {\n        @return $grid;\n      }\n    }\n\n    // Any keyword - return the following value.\n    @else if $item == $var {\n      $found: true;\n    }\n  }\n\n  // Wasn't found.\n  @return false;\n}","//////////////////////////////\n// Parse add string\n//\n// Retrieve add and media query values from a definition\n// parse-add($definition)\n//  $definition : <list>\n//        - A list like: .25 at 300px\n//\n//////////////////////////////\n@function parse-add($definition) {\n  $parse-find: ();\n  $parse-mq: null;\n  $parse-mq-find: false;\n  $Mobile-First: sgs-get('mobile first');\n\n  @each $item in $definition {\n    @if $item != 'at' and $parse-mq-find != true {\n      $parse-find: append($parse-find, $item, 'space');\n    }\n    @else if $item == 'at' {\n      $parse-mq-find: true;\n    }\n    @else {\n      $parse-mq: $item;\n    }\n  }\n\n  @if $parse-mq {\n    @if not function-exists(breakpoint) {\n      @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. Context set to -1px.\";\n      $parse-mq: -1px;\n    }\n    @else {\n      $breakpoint-parse: breakpoint($parse-mq);\n      $breakpoint-parse: map-get($breakpoint-parse, 'context holder');\n      $breakpoint-mq: null;\n      @if $Mobile-First {\n        $breakpoint-mq: map-get($breakpoint-parse, 'min-width');\n      }\n      @else {\n        $breakpoint-mq: map-get($breakpoint-parse, 'max-width');\n      }\n\n      @if length($breakpoint-mq) > 1 {\n        @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Context set to -1px.\";\n        $parse-mq: -1px;\n      }\n      @else if length($breakpoint-mq) < 1 {\n        @warn \"No \" + if($Mobile-First, 'min-width', 'max-width') + ' context found. Please use a media query with the correct context. Context set to -1px.';\n        $parse-mq: -1px;\n      }\n      @else {\n        $parse-mq: nth($breakpoint-mq, 1);\n      }\n    }\n  }\n\n  @if $parse-mq and unit($parse-mq) == 'em' {\n    $parse-mq: $parse-mq / 1em * 16px;\n  }\n\n  @return ($parse-find $parse-mq);\n}\n","//////////////////////////////\n// \"Natural Language\" Parsing\n//\n// Keywords:\n//  span:     Column Span\n//  at:       Column Location\n//  of:       Context\n//  gutters:  Gutters\n//  output:   Output\n//////////////////////////////\n@mixin span($input) {\n  $span:      nth($input, 1);\n\n  $location:  parse-span-list('at', $input);\n  $context:   parse-span-list('of', $input);\n  $gutter:    parse-span-list('gutters', $input);\n  $output:    parse-span-list('output', $input);\n\n  @include grid-span($span, $location, $context, $gutter, $output)\n}","@import \"math/columns\";\n@import \"math/gutters\";\n@import \"math/context\";\n@import \"math/grid\";","//////////////////////////////\n// Find width, in percentages, of the column span\n//////////////////////////////\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\n  // Find the grid and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    $gutter: 0;\n  }\n\n  // @debug $grid;\n  // @debug $gutter;\n\n  // Combine the grid and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  // @debug $grid-and-gutters;\n\n  // Equal width grid are easy! Deal with them!\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    $span-and-gutters: $span + $gutter * ($span - 1);\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\n    $span-and-gutters: 0;\n\n    @if $location == 1 and $span >= 1 {\n      @for $i from 1 through $span {\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n      }\n    }\n    @else {\n      $total: $location + $span - 1;\n      @if $total != 0 {\n        @for $i from $location through $total {\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n        }\n      }\n    }\n    $span-and-gutters: $span-and-gutters - $gutter;\n\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  @else {\n    @warn \"Can't find a working set of grid! That's terrible!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find the total sum of the grid\n//////////////////////////////\n@function column-sum($grid, $gutter, $gutter-style) {\n  $split: if(index($gutter-style, 'split'), true, false);\n\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    @if $split {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\n    }\n    @else {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\n    }\n\n  }\n  @else if type-of($grid) == 'list' {\n    $sum: 0;\n    @each $column in $grid {\n      $sum: $sum + nth($column, 1);\n    }\n    @if $split {\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\n    }\n    @else {\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\n    }\n    @return $sum;\n  }\n}\n\n//////////////////////////////\n// Find the number of grid\n//////////////////////////////\n@function column-count($grid) {\n  @if type-of($grid) == 'number' {\n    @return $grid;\n  }\n  @if type-of($grid) == 'list' {\n    @if length($grid) == 1 {\n      @return nth($grid, 1);\n    }\n    @else {\n      @return length($grid);\n    }\n  }\n}","@function gutter-span($gutter: false, $grid: false, $gutter-style: false) {\n\n  // Find the columns and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    @return nth($gutter, 1);\n  }\n\n  // Combine the columns and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  @return (nth($gutter, 1) / $grid-and-gutters) * 100%\n}","@function context($primary, $secondary) {\n  @return ($primary / $secondary) * 100%;\n}","@function grid-span($span, $location, $grid: false, $gutter: false, $gutter-style: false) {\n  @return column-span($span, $location, $grid, $gutter, $gutter-style) + gutter-span($gutter, $grid, $gutter-style);\n}","@import \"grids/add\";\n@import \"grids/find\";","// Accepts a grid definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of grids and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-grid($grid-definition, $append-to-list)\n// - $grid-definition : <definition>  See documentation for syntax:\n//                                    https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\n// - $append-to-list  : [list]        A list to append to.\n//                                    Defaults to $grids if none is specified.\n@function add-grid($grid-definition, $custom-map: false) {\n  $Parsed:      parse-add($grid-definition); // Parses grid definition to grid/breakpoint\n  $Grid:        nth($Parsed, 1); // E. g. `(<grid>)`.\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First: sgs-get('mobile first');\n  $Grid-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Grid-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('grids') {\n      $Grid-Map: sgs-get('grids');\n    }\n  }\n  $Grid-Key-Length: length(map-keys($Grid-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<grid>)`\n    $Grid-Map: map-merge($Grid-Map, (-1px: $Grid));\n  }\n  // IF the list is initiated with a list of grid columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Grid-Map, -1px)) {\n      $Grid-Map: map-merge($Grid-Map, map-get($Singularity-Settings, 'grids'));\n    }\n    $Grid-Map: map-merge($Grid-Map, ($Breakpoint: $Grid));\n  }\n\n  $Grid-Map: sort-map($Grid-Map, not $Mobile-First);\n\n  @return $Grid-Map;\n}\n\n\n@mixin add-grid($grid-definition) {\n  $Add-Grid: add-grid($grid-definition);\n  $HOLDER: sgs-set('grids', $Add-Grid);\n}","//////////////////////////////\n// Find Grid\n//\n// Finds the grid that you are on.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-grid($user-columns: null) {\n\n  // We supply a default if the user hasn't set any grids and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Grids: sgs-get('grids');\n\n  $Found: find-object($Grids, $user-columns);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@import \"gutters/add\";\n@import \"gutters/find\";","// Accepts a gutter definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of gutter and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-gutter($Gutter-definition, $append-to-list)\n// - $gutter-definition : <definition>  See documentation for syntax:\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Gutters\n// - $append-to-list    : [list]        A list to append to.\n//                                      Defaults to $gutters if none is specified.\n@function add-gutter($gutter-definition, $custom-map: false) {\n  $Parsed:      parse-add($gutter-definition); // Parses Gutter definition to Gutter/breakpoint\n  $Gutter:        nth($Parsed, 1); // E. g. `(<Gutter>)`.\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First: sgs-get('mobile first');\n  $Gutter-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Gutter-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('gutters') {\n      $Gutter-Map: sgs-get('gutters');\n    }\n  }\n  $Gutter-Key-Length: length(map-keys($Gutter-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<Gutter>)`\n    $Gutter-Map: map-merge($Gutter-Map, (-1px: $Gutter));\n  }\n  // IF the list is initiated with a list of Gutter columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Gutter-Map, -1px)) {\n      $Gutter-Map: map-merge($Gutter-Map, map-get($Singularity-Settings, 'gutters'));\n    }\n    $Gutter-Map: map-merge($Gutter-Map, ($Breakpoint: $Gutter));\n  }\n\n  $Gutter-Map: sort-map($Gutter-Map, not $Mobile-First);\n\n  @return $Gutter-Map;\n}\n\n@mixin add-gutter($gutter-definition) {\n  $Add-Gutter: add-gutter($gutter-definition);\n  $HOLDER: sgs-set('gutters', $Add-Gutter);\n}","//////////////////////////////\n// Find gutter\n//\n// Finds the gutter that you are on.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-gutter($user-gutters: null) {\n\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Gutters: sgs-get('gutters');\n\n  $Found: find-object($Gutters, $user-gutters);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@import \"gutter-styles/add\";\n@import \"gutter-styles/find\";\n@import \"gutter-styles/helpers\";","// Accepts a gutter-style style definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of gutter-style styles and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-gutter-style-style($gutter-style-style-definition, $append-to-list)\n// - $gutter-style-definition : <definition>  See documentation for syntax:\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\n// - $append-to-list    : [list]        A list to append to.\n//                                      Defaults to $gutter-styles if none is specified.\n@function add-gutter-style($gutter-style-definition, $custom-map: false) {\n  $Parsed:        parse-add($gutter-style-definition); // Parses gutter-style definition to gutter-style/breakpoint\n  $Gutter-Style:  nth($Parsed, 1); // E. g. `(<gutter-style>)`.\n  $Breakpoint:    nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First:  sgs-get('mobile first');\n  $Gutter-Style-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Gutter-Style-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('gutter styles') {\n      $Gutter-Style-Map: sgs-get('gutter styles');\n    }\n  }\n  $Gutter-Style-Key-Length: length(map-keys($Gutter-Style-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<gutter-style>)`\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, (-1px: $Gutter-Style));\n  }\n  // IF the list is initiated with a list of gutter-style columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Gutter-Style-Map, -1px)) {\n      $Gutter-Style-Map: map-merge($Gutter-Style-Map, map-get($Singularity-Settings, 'gutter styles'));\n    }\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, ($Breakpoint: $Gutter-Style));\n  }\n\n  $Gutter-Style-Map: sort-map($Gutter-Style-Map, not $Mobile-First);\n\n  @return $Gutter-Style-Map;\n}\n\n@mixin add-gutter-style($gutter-style-definition) {\n  $Add-gutter-style: add-gutter-style($gutter-style-definition);\n  $HOLDER: sgs-set('gutter styles', $Add-gutter-style);\n}","//////////////////////////////\n// Find gutter style\n//\n// Finds the gutter style that you are working with.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-gutter-style($user-gutter-styles: null) {\n\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Gutters-Styles: sgs-get('gutter styles');\n\n  $Found: find-object($Gutters-Styles, $user-gutter-styles);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@function fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\n  @if index($user-gutter-style, 'fixed') {\n    // @debug 'Fixed in output style';\n    @return true;\n  }\n  @else if type-of($user-columns) == 'number' and not unitless($user-gutter) {\n    // @debug 'Equal columns with a unit based gutter';\n    @return true;\n  }\n  @else if type-of($user-columns) == 'list' {\n    @if unit(nth($user-columns, 1)) != unit($user-gutter) {\n      // @debug 'Columns and gutters are different units';\n      @return true;\n    }\n  }\n  @else {\n    @return false;\n  }\n\n  @return false;\n}\n\n@function gutter-property($user-columns, $user-gutter, $user-gutter-style) {\n  @if fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\n    @return 'padding';\n  }\n  @else {\n    @return 'margin';\n  }\n}","@import \"api/float\";\n@import \"api/isolation\";\n@import \"api/calc\";\n\n//////////////////////////////\n// Master Grid Span mixin\n//////////////////////////////\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\n\n  @if $output-style == null {\n    $output-style: sgs-get('output');\n  }\n\n  $Grid: find-grid($grid);\n  $Gutter: find-gutter($gutter);\n  $Style: find-gutter-style($gutter-style);\n\n  $Start-Row: start-row($location);\n  $End-Row: end-row($span, $location, $Grid);\n\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\n  $Split-Gutter: index($Style, 'split');\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\n\n  $Direction: sgs-get('direction');\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\n\n  $Holder: ();\n  @each $k, $v in $options {\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\n  }\n  $options: if(length($Holder) > 0, $Holder, null);\n\n  $Span-Map: (\n    'span': $span,\n    'location': $location,\n    'grid': $Grid,\n    'gutter': $Gutter,\n    'style': $Style,\n    'start row': $Start-Row,\n    'end row': $End-Row,\n    'fixed gutter': $Fixed-Gutter,\n    'split gutter': $Split-Gutter,\n    'gutter property': $Gutter-Property,\n    'options': $options\n  );\n\n  @if sgs-get('debug') != false {\n    -sgs-span-settings: inspect($Span-Map);\n  }\n\n\n  @if function-exists('output-#{$output-style}') {\n    $Left: ();\n    $Right: ();\n\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\n    }\n\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\n    }\n\n    $Left-Keys: map-keys($Left);\n    $Right-Keys: map-keys($Right);\n    $Exclude: ();\n\n    @each $key in $Left-Keys {\n      @if index($Right-Keys, $key) {\n        @if map-get($Right, $key) == map-get($Left, $key) {\n          $Exclude: append($Exclude, $key);\n        }\n      }\n    }\n\n    // Always try and print the Left value\n    @include grid-span-build-exclude($Left, $Exclude, false);\n\n    // If Direction is Both or RTL, add the RTL attribute selector\n    @if $Direction == 'both' or $Direction == 'rtl' {\n      [dir=\"rtl\"] & {\n        @include grid-span-build-exclude($Right, $Exclude, true);\n      }\n    }\n    @else {\n      @include grid-span-build-exclude($Right, $Exclude, true);\n    }\n  }\n  @else {\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\n  }\n}\n\n@mixin grid-span-build($property, $value) {\n  @if type-of($value) != 'map' {\n    #{$property}: $value;\n  }\n  @else {\n    @each $prefix, $val in $value {\n      #{$property}: $val;\n    }\n  }\n}\n\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\n  @each $property, $value in $properties {\n    @if $exclude {\n      @if not index($delta, $property) {\n        @include grid-span-build($property, $value);\n      }\n    }\n    @else {\n      @include grid-span-build($property, $value);\n    }\n  }\n}","@function output-float($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  @if $Start-Row {\n    $Location: 1;\n  }\n  @else if $End-Row {\n    $Location: column-count($Grid) - $Span + 1;\n  }\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n  $Return: map-merge($Return, ('clear': $Opp));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else if not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else if not $Fixed-Gutter {\n      @if $Start-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\n      }\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Float\n//\n// Makes working with Float easier, as it allows you to walk the grid for symmetric grids and easy applying of 'last' and 'first', as well as automatically building the verbose grid-span mixin call\n//////////////////////////////\n@mixin float-span($Span, $Location: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $row: false;\n\n  $Options: if($from, ('from': $from), null);\n\n  // Working around SASS treating a number like a list with one element\n  @if type-of($grid) == 'list' and length($grid) == 1 {\n    $grid: nth($grid, 1);\n  }\n\n  // Working with a symmetric grid\n  @if type-of($grid) == 'number' {\n    // Special treatment for non-numeric location\n    @if type-of($Location) != 'number' {\n      @if $Location == 'last' or $Location == 'omega' {\n        $Location: $grid - $Span + 1;\n      }\n      @else {\n        @if $Location == 'first' or $Location == 'alpha' {\n          $row: true;\n        }\n        $Location: 1;\n      }\n    }\n\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\n\n    @if $row {\n      clear: both;\n    }\n  }\n  // Working with an asymmetric grid, should have location provided\n  @else if type-of($grid) == 'list' and $Location != false {\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\n  }\n  @else {\n    @warn 'Asymmetric Grids need a Location value as well as a span value in order to know where on the grid you are! Please include a location value!';\n  }\n}\n","@function output-isolation($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\n      }\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Isolation\n//\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': unquote($clear)));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\n}\n\n//////////////////////////////\n// Happy Syntax of Asymmetric Grids\n//\n// Makes working with asymmetric grids easier!\n//////////////////////////////\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\n\n  $Span: if($Span != false, $Span, 1);\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\n\n  $Options: ();\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n  $Options: if(length($Options) > 0, $Options, null);\n\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\n}","@function output-calc($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  @if unitless($Gutter) {\n    $ERROR-MESSAGE: \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\n    @if feature-exists(at-error) {\n      @error $ERROR-MESSAGE;\n    }\n    @else {\n      @warn $ERROR-MESSAGE;\n    }\n    @return $Return;\n  }\n\n  @if type-of($Grid) == 'number' {\n    $ERROR-MESSAGE: \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid or use another output style.\";\n    @if feature-exists(at-error) {\n      @error $ERROR-MESSAGE;\n    }\n    @else {\n      @warn $ERROR-MESSAGE;\n    }\n    @return $Return;\n  }\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Width: '';\n  $Margin: null;\n  $Min-Width: '(';\n\n  $Fixed: ();\n  $Fluid: ();\n  $Fixed-Totals: ('px': 0, 'em': 0, '%': 0);\n  $Gutter-Totals: if(str-index($Style, 'split'), $Gutter * length($Grid), $Gutter * (length($Grid) - 1));\n  $Fluid-Totals: 0;\n  $Fluid-Fixed-Sum: '';\n  $Single-Fluid: '';\n\n  @for $i from 1 through length($Grid) {\n    $Item: nth($Grid, $i);\n    @if not unitless($Item) {\n      $Fixed: map-merge($Fixed, ($i: $Item));\n    }\n    @else {\n      $Fluid: map-merge($Fluid, ($i: $Item));\n    }\n  }\n\n  @each $k, $v in $Fixed {\n    $Unit: unit($v);\n    $Running: map-get($Fixed-Totals, $Unit) + $v;\n    $Fixed-Totals: map-merge($Fixed-Totals, ($Unit: $Running));\n  }\n\n  @each $k, $v in $Fluid {\n    $Fluid-Totals: $Fluid-Totals + $v;\n  }\n\n  @each $k, $v in $Fixed-Totals {\n\n    @if $v != 0 {\n      $Fluid-Fixed-Sum: '#{$Fluid-Fixed-Sum}#{$v} + ';\n    }\n  }\n\n  // Width of a single fluid item, for calc()\n  $Single-Fluid: '((100% - (#{$Fluid-Fixed-Sum}#{$Gutter-Totals})) / (#{$Fluid-Totals}))';\n\n  // Margin Calculation\n  @if not $Start-Row or not $End-Row {\n    @if $Split-Gutter {\n      $Margin: '#{$Gutter / 2} + ';\n    }\n\n    @for $i from 1 to $Location {\n      @if unitless(nth($Grid, $i)) {\n        $Margin: '#{$Margin}(#{$Single-Fluid} * #{nth($Grid, $i)} + #{$Gutter}) + ';\n      }\n      @else {\n        $Margin: '#{$Margin}(#{nth($Grid, $i)} + #{$Gutter}) + ';\n      }\n    }\n  }\n  @if $Margin != null {\n    $Margin: str-slice($Margin, 0, -4);\n  }\n\n\n  // Width Calculation\n  @if $Span == 1 {\n    @if map-has-key($Fixed, $Location) {\n      $Return: map-merge($Return, ('width': map-get($Fixed, $Location)));\n    }\n    @else if map-has-key($Fluid, $Location) {\n      $Math: '(#{$Single-Fluid}) * #{nth($Grid, $Location)}';\n      $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Math)}), 'standard': calc(#{unquote($Math)})));\n      $Return: map-merge($Return, $Span-Map);\n    }\n  }\n  @else {\n    $Location-End: $Location + ($Span - 1);\n    $Fixed-Counter: 0;\n    @for $i from $Location through $Location-End {\n      @if unitless(nth($Grid, $i)) {\n        $Width: '#{$Width}(#{$Single-Fluid} * #{nth($Grid, $i)}';\n      }\n      @else {\n        $Fixed-Counter: $Fixed-Counter + 1;\n        $Min-Width: '#{$Min-Width}#{nth($Grid, $i)} + #{$Gutter} + ';\n        $Width: '#{$Width}(#{nth($Grid, $i)}';\n      }\n\n\n      @if $i != $Location-End {\n        $Width: '#{$Width} + #{$Gutter}) + ';\n      }\n      @else {\n        $Min-Width: str-slice($Min-Width, 0, -4);\n        @if $Fixed-Counter == 1 {\n          $Min-Width: '#{$Min-Width} - #{$Gutter}';\n        }\n        $Min-Width: '#{$Min-Width})';\n        $Width: '#{$Width})';\n      }\n    }\n\n    // Min width handling\n    @if $Min-Width != ')' {\n      $Min-Map: ('min-width': ('webkit' : -webkit-calc(#{unquote($Min-Width)}), 'standard': calc(#{unquote($Min-Width)}) ));\n\n      @if sgs-get('calc include min-width') {\n        $Return: map-merge($Return, $Min-Map);\n      }\n    }\n\n    $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Width)}), 'standard': calc(#{unquote($Width)}) ) );\n    $Return: map-merge($Return, $Span-Map);\n  }\n\n  // Build margins and Floats\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter {\n      $Return: map-merge($Return, ('margin-#{$Opp}': $Gutter / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter / 2));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      $Margin-Map: ('margin-#{$Dir}': ('webkit': -webkit-calc(#{unquote($Margin)}), 'standard': calc(#{unquote($Margin)})));\n      $Return: map-merge($Return, $Margin-Map);\n    }\n  }\n\n  @return $Return;\n}\n\n\n\n//////////////////////////////\n// Happy Syntax for Calc\n//\n// Makes working with Calc easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin calc-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n\n  @if $gutter != false and unitless($gutter) {\n    @warn \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\n  }\n\n  @if $grid != false and type-of($grid) == 'number' {\n    @warn \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid.\";\n  }\n\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': $clear));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'calc', $gutter-style, $Options);\n}\n","@import \"modular-scale/ratios\";\n\n$ms-base:  1em      !default;\n$ms-ratio: $golden  !default;\n$ms-range: null     !default;\n$ms-fluid: true     !default;\n\n@import \"modular-scale/tests\";\n\n@import \"modular-scale/pow\";\n@import \"modular-scale/calc\";\n@import \"modular-scale/generate-list\";\n@import \"modular-scale/sort-list\";\n@import \"modular-scale/round-px\";\n@import \"modular-scale/function\";\n@import \"modular-scale/function-list\";\n\n@import \"modular-scale/respond\";","// Golden ratio\n$phi              : 1.618034          ;\n$golden           : $phi              ;\n\n$double-octave    : 4                 ;\n$major-twelfth    : 3                 ;\n$major-eleventh   : 2.666666667       ;\n$major-tenth      : 2.5               ;\n$octave           : 2                 ;\n$major-seventh    : 1.875             ;\n$minor-seventh    : 1.777777778       ;\n$major-sixth      : 1.666666667       ;\n$minor-sixth      : 1.6               ;\n$fifth            : 1.5               ;\n$augmented-fourth : 1.41421           ;\n$fourth           : 1.333333333       ;\n$major-third      : 1.25              ;\n$minor-third      : 1.2               ;\n$major-second     : 1.125             ;\n$minor-second     : 1.066666667       ;","// Feature testing\n\n\n// Test if the pow() function exists\n@function ms-pow-exists() {\n  @if pow(4, 2) == 16 {\n    @return true;\n  }\n  @return false;\n}\n\n$MS-pow-exists: ms-pow-exists();\n\n// Test if MS was installed via the gem\n@function ms-gem-exists() {\n  @if ms-gem-installed() == true {\n    @return true;\n  }\n  @return false;\n}\n\n$MS-gem-exists: ms-gem-exists();","// If a native exponent function doesnt exist\n// this one is needed.\n@function ms-pow($Base, $Exponent) {\n\n  // Find and remove unit.\n  // Avoids messyness with unit calculations\n  $Unit: $Base * 0 + 1;\n  $Base: $Base/$Unit;\n\n  // This function doesnt support non-interger exponents.\n  // Warn the user about why this is breaking.\n\t@if round($Exponent) != $Exponent {\n\t\t@warn \"Unfortunately, you need Compass to use non-integer exponents\";\n\t}\n\n  // Set up the loop, priming the return with the base.\n\t$Return: $Base;\n\n  // If the number is positive, multiply it.\n  @if $Exponent > 0 {\n    // Basic feedback loop as exponents\n    // are recursivley multiplied numbers.\n    @for $i from 1 to $Exponent {\n      $Return: $Return * $Base;\n    }\n  }\n\n  // If the number is 0 or negitive\n  // divide instead of multiply.\n  @else {\n    // Libsass doesnt allow negitive values in loops\n    @for $i from (-1 + 1) to (abs($Exponent) + 1) {\n      $Return: $Return / $Base;\n    }\n  }\n\n  // Return is now compounded redy to be returned.\n  // Add the unit back onto the number.\n\t@return $Return * $Unit;\n}","@function ms-calc($Value, $Base: $ms-base, $Ratio: $ms-ratio) {\n  \n  // If pow exists use it.\n  // It supports non-interger values!\n  @if $MS-pow-exists {\n\n    // The formula for figuring out modular scales is:\n    // (r^v)*b\n    @return pow($Ratio, $Value) * $Base;\n  }\n\n  // If not, use ms-pow().\n  // Not as fast or capable of non-integer exponents.\n  @else {\n    @return ms-pow($Ratio, $Value) * $Base;\n  }\n}","@function ms-reverse-list($list) {\n  @if length($list) > 1 {\n    @if nth($list, 1) > nth($list, length($list)) {\n      $MS-reversed-list: ();\n      @each $Value in $list {\n        $MS-reversed-list: join($Value, $MS-reversed-list);\n      }\n      @return $MS-reversed-list;\n    }\n  }\n  @return $list;\n}\n\n\n@function ms-generate-list($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\n\n  // Create blank lists\n  $MS-list: ();\n  $MS-base-list: ();\n\n  // Loop through each ratio AND each base\n  // to generate all possibilities.\n  @each $Ratio in $Ratios {\n    @each $Base in $Bases {\n      \n      // Set base variables\n      $MS-base-list: ();\n      $Base-counter: 0;\n      \n      // Seed list with an initial value\n      $MS-base-list: $Base;\n      \n      // Find values on a positive scale\n      @if $Value >= 0 {\n        \n        // Find lower values on the scale\n        $Base-counter: -1;\n        @while ms-calc($Base-counter, $Base, $Ratio) >= nth($Bases, 1) {\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\n          $Base-counter: $Base-counter - 1;\n        }\n        \n        // Ensure the list is smallest to largest\n        $MS-base-list: ms-reverse-list($MS-base-list);\n\n        // Find higher possible values on the scale\n        $Base-counter: 1;\n        @while ms-calc($Base-counter, $Base, $Ratio) <= ms-calc($Value, nth($Bases, 1), $Ratio) {\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\n          $Base-counter: $Base-counter + 1;\n        }\n      }\n\n      // Find values on a negitive scale\n      @else {\n        \n        // Find lower values on the scale\n        $Base-counter: 1;\n        @while ms-calc($Base-counter, $Base, $Ratio) <= nth($Bases, 1) {\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\n          $Base-counter: $Base-counter + 1;\n        }\n\n        // Ensure the list is smallest to largest\n        $MS-base-list: ms-reverse-list($MS-base-list);\n\n        // Find higher possible values on the scale\n        $Base-counter: -1;\n        @while ms-calc($Base-counter, $Base, $Ratio) >= ms-calc($Value, nth($Bases, 1), $Ratio) {\n          $MS-calc: ms-calc($Base-counter, $Base, $Ratio);\n          // detect if the value excedes the main base value\n          @if $MS-calc < nth($Bases, 1) {\n            $MS-base-list: join($MS-base-list, $MS-calc);\n          }\n          $Base-counter: $Base-counter - 1;\n        }\n        \n        // Trim outlier base.\n        @if length($Bases) > 1 {\n          @for $i from 2 through length($Bases) {\n            @if nth($MS-base-list, 1) > nth($Bases, 1) {\n              $MS-new-list: ();\n              @for $i from 2 through length($MS-base-list) {\n                $MS-new-list: join($MS-new-list, nth($MS-base-list, $i));\n              }\n              $MS-base-list: $MS-new-list;\n            }\n          }\n        }\n      }\n      \n      // reverse list if its largest to smallest\n      $MS-base-list: ms-reverse-list($MS-base-list);\n\n      // Add new possibilities to the master list\n      $MS-list: append($MS-list, $MS-base-list, comma);\n\n    }\n  }\n  \n  // After all the possibilities are found, output a master list\n  @return $MS-list;\n}","// List sorting via a modified merge-sort algorythmn\n// http://en.wikipedia.org/wiki/Merge_sort\n\n@function ms-merge($A, $B) {\n\n  $Return: ();\n\n  // Some empty lists get passed through\n  // so just pass the other list throguh\n  @if length($A) == 0 {\n    @return $B;\n  }\n\n  // If lists fit next to each other, just merge them\n  // This helps performance skipping the need to check each value\n  @if nth($A, length($A)) < nth($B, 1) {\n    @return join($A, $B);\n  }\n  @if nth($B, length($B)) < nth($A, 1) {\n    @return join($B, $A);\n  }\n\n  // Counters start at 1\n  $A-counter: 1;\n  $B-counter: 1;\n\n  // Start looping through all numbers in array\n  @while $A-counter <= length($A) and $B-counter <= length($B) {\n\n    // Check if the A value is smaller\n    // Uses or equal to avoid duplicate numbers\n    @if nth($A, $A-counter) <= nth($B, $B-counter) {\n      $Return: join($Return, nth($A, $A-counter));\n      $A-counter: $A-counter + 1;\n    }\n\n    // Check if the B value is smaller\n    @else if nth($A, $A-counter) > nth($B, $B-counter) {\n      $Return: join($Return, nth($B, $B-counter));\n      $B-counter: $B-counter + 1;\n    }\n  }\n\n  // Run through remainder values in the list\n  @while $A-counter <= length($A) {\n    $Current: nth($A, $A-counter);\n    @if $Current != nth($Return, length($Return)) {\n      $Return: join($Return, $Current);\n    }\n    $A-counter: $A-counter + 1;\n  }\n  @while $B-counter <= length($B) {\n    $Current: nth($B, $B-counter);\n    @if $Current != nth($Return, length($Return)) {\n      $Return: join($Return, $Current);\n    }\n    $B-counter: $B-counter + 1;\n  }\n\n  // Done! return is now sorted and complete\n  @return $Return;\n}\n\n\n\n// Pull it all together\n@function ms-sort-list($Lists) {\n\n  $Return: ();\n\n  @each $List in $Lists {\n    @if $Return == () {\n      $Return: $List;\n    }\n    @else {\n      $Return: ms-merge($List, $Return);\n    }\n  }\n\n  // final cleanup of repeated items\n  $Last: null;\n  $New-list: ();\n  @each $Item in $Return {\n    @if $Item != $Last {\n      $New-list: join($New-list, $Item);\n    }\n    $Last: $Item;\n  }\n  $Return: $New-list;\n\n\n  @return $Return;\n}","@function ms-round-px($Result) {\n  @if unit($Result) == 'px' {\n    @return round($Result);\n  }\n  @return $Result;\n}","// The main function that brings it all together\n@function ms($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\n\n  // If no multi-base or multi-ratio stuff is going on\n  // then just retrn the basic calculaiton\n  @if length($Bases) == 1 and length($Ratios) == 1 {\n    @return ms-round-px(ms-calc($Value, $Bases, $Ratios));\n  }\n\n  // Do calculations directly in Ruby when avalible\n  @if $MS-gem-exists {\n\n    // Remove units from bases\n    $Unit: nth($Bases, 1) * 0 + 1; // Extracts the unit from the base\n    $Unitless-Bases: ();\n    @each $Base in $Bases {\n      $Base: $Base/$Unit;\n      $Unitless-Bases: join($Unitless-Bases, $Base);\n    }\n\n    // Calculate natively in Ruby\n    @return ms-round-px(ms-gem-func($Value, $Unitless-Bases, $Ratios) * $Unit);\n  }\n\n  // Generate a list of all possible values\n  $Return: ms-generate-list($Value, $Bases, $Ratios);\n\n  // Sort the generated lists\n  $Return: ms-sort-list($Return);\n\n  // Reverse list if its negitive.\n  @if $Value < 0 {\n    $MS-new-return: ();\n    @each $i in $Return {\n      $MS-new-return: join($i, $MS-new-return);\n    }\n    $Return: $MS-new-return;\n  }\n\n  // Normalize value for counting from 1\n  // Because CSS counts things from 1\n  // So Sass does as well\n  // So I get to write fun stuff like this\n  $Value: abs($Value) + 1;\n\n  // Find the correct value in the list\n  $Return: nth($Return, $Value);\n\n  @return ms-round-px($Return);\n}\n\n// Same function, different name, for good measure.\n@function modular-scale($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\n  @return ms($Value, $Bases, $Ratios);\n}","// Outputs a list of values instead of a single value\n@function ms-list($Start: 0, $End: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\n  \n  // Seed results\n  $Positive-return: ();\n  $Negitive-return: ();\n  $Return: ();\n\n  @if $End >= 0 {\n    // Generate a list of all possible values\n    $Positive-return: ms-generate-list($End, $Bases, $Ratios);\n    \n    // Sort the generated lists\n    $Positive-return: ms-sort-list($Positive-return);\n\n    // Trim list\n    $Trim-list: ();\n    // If the starting value is a positive number\n    // trim the positive return from that\n    @if $Start >= 0 {\n      @for $i from ($Start + 1) through $End + 1 {\n        $Trim-list: join($Trim-list, nth($Positive-return, $i));\n      }\n    }\n    // If not, then include everything up to the end.\n    @else {\n      @for $i from 1 through $End + 1 {\n        $Trim-list: join($Trim-list, nth($Positive-return, $i));\n      }\n    }\n    $Positive-return: $Trim-list;\n  }\n  \n  // Generate a negitive list\n  @if $Start < 0 {\n    // Generate a list of all possible values\n    $Negitive-return: ms-generate-list($Start, $Bases, $Ratios);\n    \n    // Sort the generated lists\n    $Negitive-return: ms-sort-list($Negitive-return);\n    \n    // Reverse negitive list results.\n    $MS-new-return: ();\n    @each $i in $Negitive-return {\n      $MS-new-return: join($i, $MS-new-return);\n    }\n    $Negitive-return: $MS-new-return;\n\n    // Trim list\n    $Trim-list: ();\n    @if $End < 0 {\n      @for $i from abs($End) through (abs($Start) + 2) {\n        $Trim-list: join(nth($Negitive-return, $i), $Trim-list);\n      }\n    }\n    @else {\n      @for $i from 2 through (abs($Start) + 1) {\n        $Trim-list: join(nth($Negitive-return, $i), $Trim-list);\n      }\n    }\n    $Negitive-return: $Trim-list;\n  }\n  \n  // Join both positive and negitive possibilities.\n  $Return: join($Negitive-return, $Positive-return);\n\n  @return $Return;\n}\n","// Stripping units is rarely a best practice and this function\n// should not be used elsewhere\n@function ms-unitless($val) {\n  $val: $val / ($val - $val + 1);\n  @return $val;\n}\n\n// Search config for values\n@function ms-range($x,$y,$range:$ms-range) {\n  @return nth(nth($range,$x),$y);\n}\n\n// Generate calc() function\n@function ms-respond-calc($value, $n, $range: $ms-range, $base: $ms-base) {\n  $val1: ms($value,$base,ms-range($n,1,$range));\n  $val2: ms($value,$base,ms-range($n+1,1,$range));\n  $break1: ms-range($n,2,$range);\n  $break2: ms-range($n+1,2,$range);\n  $diff: ms-unitless($val2) - ms-unitless($val1);\n  @if $ms-fluid {\n    @return calc( #{$val1} + #{$diff} * ( ( 100vw - #{$break1}) / #{ms-unitless($break2) - ms-unitless($break1)} ) );\n  } @else {\n    @return ms($value,$base,ms-range($n,1,$range));\n  }\n}\n\n// Main responsive mixin\n@mixin ms-respond($property, $value, $range: $ms-range, $base: $ms-base) {\n  // If there is no responsive config, just output the property and value\n  @if $ms-range == null {\n    #{$property}: ms($value,$base,$ms-ratio);\n  } @else {\n\n    // Initial value\n    #{$property}: ms($value,$base,ms-range(1,1,$range));\n\n    // Loop through breakpoints\n    @for $i from 1 through (length($range) - 1) {\n      @media (min-width: ms-range($i,2,$range)) and (max-width: ms-range($i+1,2,$range)) {\n        #{$property}: ms-respond-calc($value, $i, $range, $base);\n      }\n    }\n\n    // Final breakpoint is just an override value\n    @media (min-width: ms-range(length($range),2,$range)) {\n      #{$property}: ms($value,$base,ms-range(length($range),1,$range));\n    }\n  }\n}","@import 'breakpoints';\n@import 'colors';\n@import 'grid';\n@import 'modular-scale';\n@import 'typography';\n","// @responsive breakpoints    ==============================================\n\n$small-screen: 464px; // 29em\n$small-screen-max: 607px;  // 37.9375em\n\n$narrow-screen: 608px; // 38em\n$narrow-screen-max: 767px; // 47.9375em\n\n$weird-screen: 768px; // 48em what else I call this?!?!?!\n$weird-screen-max : 895px; // 55.9375em\n\n$medium-screen: 896px; // 56em\n$medium-screen-max: 991px; // 61.9375em\n\n$standard-screen: 992px; // 62em - 992px = 1024 - (16px*2)\n$standard-screen-max: 1187px; // 74.1875em\n\n$wide-screen: 1188px; // 74.25em - 1188px = 1220px - (16px*2)\n$wide-screen-max: 1333px; // 83.3125em\n\n$wxga-screen: 1334px; // 83.375em - 1334px = 1366 - (16px*2)\n$wxga-screen-max: 1407px; // 87.9375em\n\n$super-wide-screen: 1441px; // 88em - 1408px = 1440px - (16px*2)\n\n\n","// @colour palettte  ==============================================\n// using color names as variables is fine.\n\n// theme colors\n// $var-color: #ffffff\n$footer-bg:#383838;\n$red: #e02626;\n$white: #fff;\n$black: #000;\n$almostblack: #222222;\n$almostwhite: #f5f5f5;\n$contrastgrey: #757575;\n\n// greys\n// $light-grey: #E0E0E0;\n$light-grey: #f8f8f8;\n$neutral-grey: #757575;\n$dark-grey: #212121;\n$grey-bg: #dedede;\n$credit-grey: #757575;\n$hr-color: #a5a5a5;\n$warm-grey: #444444;\n\n// ui colours for shadows, borders, etc. Can be used on their own, or part of mixins or placeholders\n$ui-borders-color: $neutral-grey;\n$ui-grey: $neutral-grey;\n\n$translucent-box: rgba(0, 0, 0, 0.65);\n\n//alert colours\n$green: #2ee255;\n$yellow: #eae307;\n$alert-red: #ff0100;\n$mint: #DDFDE4;\n$light-blue: #DAF1FC;\n$pale-yellow: #FAFCDB;\n$light-pink: #FFDDDD;\n\n$colours: (\n  light-grey: $light-grey,\n  dark: $almostblack,\n  grey: $light-grey,\n  black: $almostblack,\n  white: $white,\n  red: $red,\n);\n","// @grid settings   ==============================================\n\n@include add-grid(12);\n@include add-gutter(1/3);\n\n@include breakpoint-set('to ems', true);\n","// @modular scale ==============================================\n\n// http://thesassway.com/projects/modular-scale\n// https://github.com/modularscale/modularscale-sass\n// http://www.modularscale.com/\n\n// $ms-base: 1em 1.25em;\n// $ms-ratio: $golden;\n\n$ms-base: 1em;\n$ms-ratio: 1.125;\n\n// $ms-range: 1 29em, 1.618 62em;\n\n// $ms-fluid: false;\n// $ms-range:\n//   1.2 $narrow-screen,\n//   1.3 38em,\n//   1.4 48em,\n//   1.5 56em,\n//   1.6 62em;\n\n$class-slug: ms;\n\n// http://www.modularscale.com/?1&em&1.25&sass&text\n// http://pxtoem.com/\n// use two links above to caculate ms number\n// common number like ms() = 1em, ms(1) = 1.25em, ms(-1) = 0.8em, ms(-2) = .64em\n// you can use em, rem, px if you want, de_theme use ms to set default value\n\n//CHART and usages\n\n//ms(20)  168.721px  10.545em  10.545em @ 16  *hero\n\n//ms(16)  105.332px  6.583em   6.583em @ 16\n//ms(15)  93.628px   5.852em   5.852em @ 16   *ex title\n//ms(14)  83.225px   5.202em   5.202em @ 16\n//ms(13)  73.978px   4.624em   4.624em @ 16\n//ms(12)  65.758px   4.11em    4.11em @ 16\t  \n//ms(11)  58.452px   3.653em   3.653em @ 16   *h1\n//ms(10)  51.957px   3.247em   3.247em @ 16\t\n//ms(9)   46.184px   2.887em   2.887em @ 16   \n//ms(8)   41.053px   2.566em   2.566em @ 16\n//ms(7)   36.491px   2.281em   2.281em @ 16   *h2\n//ms(6)   32.437px   2.027em   2.027em @ 16\n//ms(5)   28.833px   1.802em   1.802em @ 16   *h3\n//ms(4)   25.629px   1.602em   1.602em @ 16\n//ms(3)   22.781px   1.424em   1.424em @ 16   *\n//ms(2)   20.25px    1.266em   1.266em @ 16\n//ms(1)   18px       1.125em   1.125em @ 16\n//ms(0)   16px       1em       1em @ 16       *body text\n//ms(-1)  14.222px   0.889em   0.889em @ 16   *credits\n//ms(-2)  12.642px   0.79em    0.79em @ 16 \n//ms(-3)  11.237px   0.702em   0.702em @ 16\n//ms(-4)  9.989px    0.624em   0.624em @ 16\n//ms(-5)  8.879px    0.555em   0.555em @ 16\n//ms(-6)  7.892px    0.493em   0.493em @ 16","// @type settings    ==============================================\n\n// ===== Font Awesome\n\n$fa-font-path: '../../../fonts/webfonts';\n@import '../../../node_modules/@fortawesome/fontawesome-free/scss/variables';\n@import '../../../node_modules/@fortawesome/fontawesome-free/scss/solid';\n@import '../../../node_modules/@fortawesome/fontawesome-free/scss/brands';\n\n\n// modular scale settings are located in typography/_modular-scale.scss\n\n$light: 100;\n$normal: 300;\n$medium: 600;\n$bold: 700;\n$ultra-bold: 900;\n\n\n$font-set-1b: 'Alternate Gothic No3 D Regular', 'nimbus-sans', Helvetica, sans-serif;\n\n$font-set-1: 'Knockout 28 A', 'Knockout 28 B', 'Alternate Gothic No3 D Regular', 'nimbus-sans', sans-serif;\n$font-set-2: 'nimbus-sans', Helvetica, Arial, sans-serif;\n$font-set-3: 'Knockout 48 A', 'Knockout 48 B', 'Alternate Gothic No3 D Regular', 'nimbus-sans', sans-serif;\n$font-set-4: 'nimbus-sans-novus','nimbus-sans', Helvetica, Arial, sans-serif;","// Variables\n// --------------------------\n\n$fa-font-path:         \"../webfonts\" !default;\n$fa-font-size-base:    16px !default;\n$fa-font-display:      block !default;\n$fa-css-prefix:        fa !default;\n$fa-version:           \"5.14.0\" !default;\n$fa-border-color:      #eee !default;\n$fa-inverse:           #fff !default;\n$fa-li-width:          2em !default;\n$fa-fw-width:          (20em / 16);\n$fa-primary-opacity:   1 !default;\n$fa-secondary-opacity: .4 !default;\n\n// Convenience function used to set content property\n@function fa-content($fa-var) {\n  @return unquote(\"\\\"#{ $fa-var }\\\"\");\n}\n\n$fa-var-500px: \\f26e;\n$fa-var-accessible-icon: \\f368;\n$fa-var-accusoft: \\f369;\n$fa-var-acquisitions-incorporated: \\f6af;\n$fa-var-ad: \\f641;\n$fa-var-address-book: \\f2b9;\n$fa-var-address-card: \\f2bb;\n$fa-var-adjust: \\f042;\n$fa-var-adn: \\f170;\n$fa-var-adobe: \\f778;\n$fa-var-adversal: \\f36a;\n$fa-var-affiliatetheme: \\f36b;\n$fa-var-air-freshener: \\f5d0;\n$fa-var-airbnb: \\f834;\n$fa-var-algolia: \\f36c;\n$fa-var-align-center: \\f037;\n$fa-var-align-justify: \\f039;\n$fa-var-align-left: \\f036;\n$fa-var-align-right: \\f038;\n$fa-var-alipay: \\f642;\n$fa-var-allergies: \\f461;\n$fa-var-amazon: \\f270;\n$fa-var-amazon-pay: \\f42c;\n$fa-var-ambulance: \\f0f9;\n$fa-var-american-sign-language-interpreting: \\f2a3;\n$fa-var-amilia: \\f36d;\n$fa-var-anchor: \\f13d;\n$fa-var-android: \\f17b;\n$fa-var-angellist: \\f209;\n$fa-var-angle-double-down: \\f103;\n$fa-var-angle-double-left: \\f100;\n$fa-var-angle-double-right: \\f101;\n$fa-var-angle-double-up: \\f102;\n$fa-var-angle-down: \\f107;\n$fa-var-angle-left: \\f104;\n$fa-var-angle-right: \\f105;\n$fa-var-angle-up: \\f106;\n$fa-var-angry: \\f556;\n$fa-var-angrycreative: \\f36e;\n$fa-var-angular: \\f420;\n$fa-var-ankh: \\f644;\n$fa-var-app-store: \\f36f;\n$fa-var-app-store-ios: \\f370;\n$fa-var-apper: \\f371;\n$fa-var-apple: \\f179;\n$fa-var-apple-alt: \\f5d1;\n$fa-var-apple-pay: \\f415;\n$fa-var-archive: \\f187;\n$fa-var-archway: \\f557;\n$fa-var-arrow-alt-circle-down: \\f358;\n$fa-var-arrow-alt-circle-left: \\f359;\n$fa-var-arrow-alt-circle-right: \\f35a;\n$fa-var-arrow-alt-circle-up: \\f35b;\n$fa-var-arrow-circle-down: \\f0ab;\n$fa-var-arrow-circle-left: \\f0a8;\n$fa-var-arrow-circle-right: \\f0a9;\n$fa-var-arrow-circle-up: \\f0aa;\n$fa-var-arrow-down: \\f063;\n$fa-var-arrow-left: \\f060;\n$fa-var-arrow-right: \\f061;\n$fa-var-arrow-up: \\f062;\n$fa-var-arrows-alt: \\f0b2;\n$fa-var-arrows-alt-h: \\f337;\n$fa-var-arrows-alt-v: \\f338;\n$fa-var-artstation: \\f77a;\n$fa-var-assistive-listening-systems: \\f2a2;\n$fa-var-asterisk: \\f069;\n$fa-var-asymmetrik: \\f372;\n$fa-var-at: \\f1fa;\n$fa-var-atlas: \\f558;\n$fa-var-atlassian: \\f77b;\n$fa-var-atom: \\f5d2;\n$fa-var-audible: \\f373;\n$fa-var-audio-description: \\f29e;\n$fa-var-autoprefixer: \\f41c;\n$fa-var-avianex: \\f374;\n$fa-var-aviato: \\f421;\n$fa-var-award: \\f559;\n$fa-var-aws: \\f375;\n$fa-var-baby: \\f77c;\n$fa-var-baby-carriage: \\f77d;\n$fa-var-backspace: \\f55a;\n$fa-var-backward: \\f04a;\n$fa-var-bacon: \\f7e5;\n$fa-var-bacteria: \\e059;\n$fa-var-bacterium: \\e05a;\n$fa-var-bahai: \\f666;\n$fa-var-balance-scale: \\f24e;\n$fa-var-balance-scale-left: \\f515;\n$fa-var-balance-scale-right: \\f516;\n$fa-var-ban: \\f05e;\n$fa-var-band-aid: \\f462;\n$fa-var-bandcamp: \\f2d5;\n$fa-var-barcode: \\f02a;\n$fa-var-bars: \\f0c9;\n$fa-var-baseball-ball: \\f433;\n$fa-var-basketball-ball: \\f434;\n$fa-var-bath: \\f2cd;\n$fa-var-battery-empty: \\f244;\n$fa-var-battery-full: \\f240;\n$fa-var-battery-half: \\f242;\n$fa-var-battery-quarter: \\f243;\n$fa-var-battery-three-quarters: \\f241;\n$fa-var-battle-net: \\f835;\n$fa-var-bed: \\f236;\n$fa-var-beer: \\f0fc;\n$fa-var-behance: \\f1b4;\n$fa-var-behance-square: \\f1b5;\n$fa-var-bell: \\f0f3;\n$fa-var-bell-slash: \\f1f6;\n$fa-var-bezier-curve: \\f55b;\n$fa-var-bible: \\f647;\n$fa-var-bicycle: \\f206;\n$fa-var-biking: \\f84a;\n$fa-var-bimobject: \\f378;\n$fa-var-binoculars: \\f1e5;\n$fa-var-biohazard: \\f780;\n$fa-var-birthday-cake: \\f1fd;\n$fa-var-bitbucket: \\f171;\n$fa-var-bitcoin: \\f379;\n$fa-var-bity: \\f37a;\n$fa-var-black-tie: \\f27e;\n$fa-var-blackberry: \\f37b;\n$fa-var-blender: \\f517;\n$fa-var-blender-phone: \\f6b6;\n$fa-var-blind: \\f29d;\n$fa-var-blog: \\f781;\n$fa-var-blogger: \\f37c;\n$fa-var-blogger-b: \\f37d;\n$fa-var-bluetooth: \\f293;\n$fa-var-bluetooth-b: \\f294;\n$fa-var-bold: \\f032;\n$fa-var-bolt: \\f0e7;\n$fa-var-bomb: \\f1e2;\n$fa-var-bone: \\f5d7;\n$fa-var-bong: \\f55c;\n$fa-var-book: \\f02d;\n$fa-var-book-dead: \\f6b7;\n$fa-var-book-medical: \\f7e6;\n$fa-var-book-open: \\f518;\n$fa-var-book-reader: \\f5da;\n$fa-var-bookmark: \\f02e;\n$fa-var-bootstrap: \\f836;\n$fa-var-border-all: \\f84c;\n$fa-var-border-none: \\f850;\n$fa-var-border-style: \\f853;\n$fa-var-bowling-ball: \\f436;\n$fa-var-box: \\f466;\n$fa-var-box-open: \\f49e;\n$fa-var-box-tissue: \\e05b;\n$fa-var-boxes: \\f468;\n$fa-var-braille: \\f2a1;\n$fa-var-brain: \\f5dc;\n$fa-var-bread-slice: \\f7ec;\n$fa-var-briefcase: \\f0b1;\n$fa-var-briefcase-medical: \\f469;\n$fa-var-broadcast-tower: \\f519;\n$fa-var-broom: \\f51a;\n$fa-var-brush: \\f55d;\n$fa-var-btc: \\f15a;\n$fa-var-buffer: \\f837;\n$fa-var-bug: \\f188;\n$fa-var-building: \\f1ad;\n$fa-var-bullhorn: \\f0a1;\n$fa-var-bullseye: \\f140;\n$fa-var-burn: \\f46a;\n$fa-var-buromobelexperte: \\f37f;\n$fa-var-bus: \\f207;\n$fa-var-bus-alt: \\f55e;\n$fa-var-business-time: \\f64a;\n$fa-var-buy-n-large: \\f8a6;\n$fa-var-buysellads: \\f20d;\n$fa-var-calculator: \\f1ec;\n$fa-var-calendar: \\f133;\n$fa-var-calendar-alt: \\f073;\n$fa-var-calendar-check: \\f274;\n$fa-var-calendar-day: \\f783;\n$fa-var-calendar-minus: \\f272;\n$fa-var-calendar-plus: \\f271;\n$fa-var-calendar-times: \\f273;\n$fa-var-calendar-week: \\f784;\n$fa-var-camera: \\f030;\n$fa-var-camera-retro: \\f083;\n$fa-var-campground: \\f6bb;\n$fa-var-canadian-maple-leaf: \\f785;\n$fa-var-candy-cane: \\f786;\n$fa-var-cannabis: \\f55f;\n$fa-var-capsules: \\f46b;\n$fa-var-car: \\f1b9;\n$fa-var-car-alt: \\f5de;\n$fa-var-car-battery: \\f5df;\n$fa-var-car-crash: \\f5e1;\n$fa-var-car-side: \\f5e4;\n$fa-var-caravan: \\f8ff;\n$fa-var-caret-down: \\f0d7;\n$fa-var-caret-left: \\f0d9;\n$fa-var-caret-right: \\f0da;\n$fa-var-caret-square-down: \\f150;\n$fa-var-caret-square-left: \\f191;\n$fa-var-caret-square-right: \\f152;\n$fa-var-caret-square-up: \\f151;\n$fa-var-caret-up: \\f0d8;\n$fa-var-carrot: \\f787;\n$fa-var-cart-arrow-down: \\f218;\n$fa-var-cart-plus: \\f217;\n$fa-var-cash-register: \\f788;\n$fa-var-cat: \\f6be;\n$fa-var-cc-amazon-pay: \\f42d;\n$fa-var-cc-amex: \\f1f3;\n$fa-var-cc-apple-pay: \\f416;\n$fa-var-cc-diners-club: \\f24c;\n$fa-var-cc-discover: \\f1f2;\n$fa-var-cc-jcb: \\f24b;\n$fa-var-cc-mastercard: \\f1f1;\n$fa-var-cc-paypal: \\f1f4;\n$fa-var-cc-stripe: \\f1f5;\n$fa-var-cc-visa: \\f1f0;\n$fa-var-centercode: \\f380;\n$fa-var-centos: \\f789;\n$fa-var-certificate: \\f0a3;\n$fa-var-chair: \\f6c0;\n$fa-var-chalkboard: \\f51b;\n$fa-var-chalkboard-teacher: \\f51c;\n$fa-var-charging-station: \\f5e7;\n$fa-var-chart-area: \\f1fe;\n$fa-var-chart-bar: \\f080;\n$fa-var-chart-line: \\f201;\n$fa-var-chart-pie: \\f200;\n$fa-var-check: \\f00c;\n$fa-var-check-circle: \\f058;\n$fa-var-check-double: \\f560;\n$fa-var-check-square: \\f14a;\n$fa-var-cheese: \\f7ef;\n$fa-var-chess: \\f439;\n$fa-var-chess-bishop: \\f43a;\n$fa-var-chess-board: \\f43c;\n$fa-var-chess-king: \\f43f;\n$fa-var-chess-knight: \\f441;\n$fa-var-chess-pawn: \\f443;\n$fa-var-chess-queen: \\f445;\n$fa-var-chess-rook: \\f447;\n$fa-var-chevron-circle-down: \\f13a;\n$fa-var-chevron-circle-left: \\f137;\n$fa-var-chevron-circle-right: \\f138;\n$fa-var-chevron-circle-up: \\f139;\n$fa-var-chevron-down: \\f078;\n$fa-var-chevron-left: \\f053;\n$fa-var-chevron-right: \\f054;\n$fa-var-chevron-up: \\f077;\n$fa-var-child: \\f1ae;\n$fa-var-chrome: \\f268;\n$fa-var-chromecast: \\f838;\n$fa-var-church: \\f51d;\n$fa-var-circle: \\f111;\n$fa-var-circle-notch: \\f1ce;\n$fa-var-city: \\f64f;\n$fa-var-clinic-medical: \\f7f2;\n$fa-var-clipboard: \\f328;\n$fa-var-clipboard-check: \\f46c;\n$fa-var-clipboard-list: \\f46d;\n$fa-var-clock: \\f017;\n$fa-var-clone: \\f24d;\n$fa-var-closed-captioning: \\f20a;\n$fa-var-cloud: \\f0c2;\n$fa-var-cloud-download-alt: \\f381;\n$fa-var-cloud-meatball: \\f73b;\n$fa-var-cloud-moon: \\f6c3;\n$fa-var-cloud-moon-rain: \\f73c;\n$fa-var-cloud-rain: \\f73d;\n$fa-var-cloud-showers-heavy: \\f740;\n$fa-var-cloud-sun: \\f6c4;\n$fa-var-cloud-sun-rain: \\f743;\n$fa-var-cloud-upload-alt: \\f382;\n$fa-var-cloudscale: \\f383;\n$fa-var-cloudsmith: \\f384;\n$fa-var-cloudversify: \\f385;\n$fa-var-cocktail: \\f561;\n$fa-var-code: \\f121;\n$fa-var-code-branch: \\f126;\n$fa-var-codepen: \\f1cb;\n$fa-var-codiepie: \\f284;\n$fa-var-coffee: \\f0f4;\n$fa-var-cog: \\f013;\n$fa-var-cogs: \\f085;\n$fa-var-coins: \\f51e;\n$fa-var-columns: \\f0db;\n$fa-var-comment: \\f075;\n$fa-var-comment-alt: \\f27a;\n$fa-var-comment-dollar: \\f651;\n$fa-var-comment-dots: \\f4ad;\n$fa-var-comment-medical: \\f7f5;\n$fa-var-comment-slash: \\f4b3;\n$fa-var-comments: \\f086;\n$fa-var-comments-dollar: \\f653;\n$fa-var-compact-disc: \\f51f;\n$fa-var-compass: \\f14e;\n$fa-var-compress: \\f066;\n$fa-var-compress-alt: \\f422;\n$fa-var-compress-arrows-alt: \\f78c;\n$fa-var-concierge-bell: \\f562;\n$fa-var-confluence: \\f78d;\n$fa-var-connectdevelop: \\f20e;\n$fa-var-contao: \\f26d;\n$fa-var-cookie: \\f563;\n$fa-var-cookie-bite: \\f564;\n$fa-var-copy: \\f0c5;\n$fa-var-copyright: \\f1f9;\n$fa-var-cotton-bureau: \\f89e;\n$fa-var-couch: \\f4b8;\n$fa-var-cpanel: \\f388;\n$fa-var-creative-commons: \\f25e;\n$fa-var-creative-commons-by: \\f4e7;\n$fa-var-creative-commons-nc: \\f4e8;\n$fa-var-creative-commons-nc-eu: \\f4e9;\n$fa-var-creative-commons-nc-jp: \\f4ea;\n$fa-var-creative-commons-nd: \\f4eb;\n$fa-var-creative-commons-pd: \\f4ec;\n$fa-var-creative-commons-pd-alt: \\f4ed;\n$fa-var-creative-commons-remix: \\f4ee;\n$fa-var-creative-commons-sa: \\f4ef;\n$fa-var-creative-commons-sampling: \\f4f0;\n$fa-var-creative-commons-sampling-plus: \\f4f1;\n$fa-var-creative-commons-share: \\f4f2;\n$fa-var-creative-commons-zero: \\f4f3;\n$fa-var-credit-card: \\f09d;\n$fa-var-critical-role: \\f6c9;\n$fa-var-crop: \\f125;\n$fa-var-crop-alt: \\f565;\n$fa-var-cross: \\f654;\n$fa-var-crosshairs: \\f05b;\n$fa-var-crow: \\f520;\n$fa-var-crown: \\f521;\n$fa-var-crutch: \\f7f7;\n$fa-var-css3: \\f13c;\n$fa-var-css3-alt: \\f38b;\n$fa-var-cube: \\f1b2;\n$fa-var-cubes: \\f1b3;\n$fa-var-cut: \\f0c4;\n$fa-var-cuttlefish: \\f38c;\n$fa-var-d-and-d: \\f38d;\n$fa-var-d-and-d-beyond: \\f6ca;\n$fa-var-dailymotion: \\e052;\n$fa-var-dashcube: \\f210;\n$fa-var-database: \\f1c0;\n$fa-var-deaf: \\f2a4;\n$fa-var-deezer: \\e077;\n$fa-var-delicious: \\f1a5;\n$fa-var-democrat: \\f747;\n$fa-var-deploydog: \\f38e;\n$fa-var-deskpro: \\f38f;\n$fa-var-desktop: \\f108;\n$fa-var-dev: \\f6cc;\n$fa-var-deviantart: \\f1bd;\n$fa-var-dharmachakra: \\f655;\n$fa-var-dhl: \\f790;\n$fa-var-diagnoses: \\f470;\n$fa-var-diaspora: \\f791;\n$fa-var-dice: \\f522;\n$fa-var-dice-d20: \\f6cf;\n$fa-var-dice-d6: \\f6d1;\n$fa-var-dice-five: \\f523;\n$fa-var-dice-four: \\f524;\n$fa-var-dice-one: \\f525;\n$fa-var-dice-six: \\f526;\n$fa-var-dice-three: \\f527;\n$fa-var-dice-two: \\f528;\n$fa-var-digg: \\f1a6;\n$fa-var-digital-ocean: \\f391;\n$fa-var-digital-tachograph: \\f566;\n$fa-var-directions: \\f5eb;\n$fa-var-discord: \\f392;\n$fa-var-discourse: \\f393;\n$fa-var-disease: \\f7fa;\n$fa-var-divide: \\f529;\n$fa-var-dizzy: \\f567;\n$fa-var-dna: \\f471;\n$fa-var-dochub: \\f394;\n$fa-var-docker: \\f395;\n$fa-var-dog: \\f6d3;\n$fa-var-dollar-sign: \\f155;\n$fa-var-dolly: \\f472;\n$fa-var-dolly-flatbed: \\f474;\n$fa-var-donate: \\f4b9;\n$fa-var-door-closed: \\f52a;\n$fa-var-door-open: \\f52b;\n$fa-var-dot-circle: \\f192;\n$fa-var-dove: \\f4ba;\n$fa-var-download: \\f019;\n$fa-var-draft2digital: \\f396;\n$fa-var-drafting-compass: \\f568;\n$fa-var-dragon: \\f6d5;\n$fa-var-draw-polygon: \\f5ee;\n$fa-var-dribbble: \\f17d;\n$fa-var-dribbble-square: \\f397;\n$fa-var-dropbox: \\f16b;\n$fa-var-drum: \\f569;\n$fa-var-drum-steelpan: \\f56a;\n$fa-var-drumstick-bite: \\f6d7;\n$fa-var-drupal: \\f1a9;\n$fa-var-dumbbell: \\f44b;\n$fa-var-dumpster: \\f793;\n$fa-var-dumpster-fire: \\f794;\n$fa-var-dungeon: \\f6d9;\n$fa-var-dyalog: \\f399;\n$fa-var-earlybirds: \\f39a;\n$fa-var-ebay: \\f4f4;\n$fa-var-edge: \\f282;\n$fa-var-edge-legacy: \\e078;\n$fa-var-edit: \\f044;\n$fa-var-egg: \\f7fb;\n$fa-var-eject: \\f052;\n$fa-var-elementor: \\f430;\n$fa-var-ellipsis-h: \\f141;\n$fa-var-ellipsis-v: \\f142;\n$fa-var-ello: \\f5f1;\n$fa-var-ember: \\f423;\n$fa-var-empire: \\f1d1;\n$fa-var-envelope: \\f0e0;\n$fa-var-envelope-open: \\f2b6;\n$fa-var-envelope-open-text: \\f658;\n$fa-var-envelope-square: \\f199;\n$fa-var-envira: \\f299;\n$fa-var-equals: \\f52c;\n$fa-var-eraser: \\f12d;\n$fa-var-erlang: \\f39d;\n$fa-var-ethereum: \\f42e;\n$fa-var-ethernet: \\f796;\n$fa-var-etsy: \\f2d7;\n$fa-var-euro-sign: \\f153;\n$fa-var-evernote: \\f839;\n$fa-var-exchange-alt: \\f362;\n$fa-var-exclamation: \\f12a;\n$fa-var-exclamation-circle: \\f06a;\n$fa-var-exclamation-triangle: \\f071;\n$fa-var-expand: \\f065;\n$fa-var-expand-alt: \\f424;\n$fa-var-expand-arrows-alt: \\f31e;\n$fa-var-expeditedssl: \\f23e;\n$fa-var-external-link-alt: \\f35d;\n$fa-var-external-link-square-alt: \\f360;\n$fa-var-eye: \\f06e;\n$fa-var-eye-dropper: \\f1fb;\n$fa-var-eye-slash: \\f070;\n$fa-var-facebook: \\f09a;\n$fa-var-facebook-f: \\f39e;\n$fa-var-facebook-messenger: \\f39f;\n$fa-var-facebook-square: \\f082;\n$fa-var-fan: \\f863;\n$fa-var-fantasy-flight-games: \\f6dc;\n$fa-var-fast-backward: \\f049;\n$fa-var-fast-forward: \\f050;\n$fa-var-faucet: \\e005;\n$fa-var-fax: \\f1ac;\n$fa-var-feather: \\f52d;\n$fa-var-feather-alt: \\f56b;\n$fa-var-fedex: \\f797;\n$fa-var-fedora: \\f798;\n$fa-var-female: \\f182;\n$fa-var-fighter-jet: \\f0fb;\n$fa-var-figma: \\f799;\n$fa-var-file: \\f15b;\n$fa-var-file-alt: \\f15c;\n$fa-var-file-archive: \\f1c6;\n$fa-var-file-audio: \\f1c7;\n$fa-var-file-code: \\f1c9;\n$fa-var-file-contract: \\f56c;\n$fa-var-file-csv: \\f6dd;\n$fa-var-file-download: \\f56d;\n$fa-var-file-excel: \\f1c3;\n$fa-var-file-export: \\f56e;\n$fa-var-file-image: \\f1c5;\n$fa-var-file-import: \\f56f;\n$fa-var-file-invoice: \\f570;\n$fa-var-file-invoice-dollar: \\f571;\n$fa-var-file-medical: \\f477;\n$fa-var-file-medical-alt: \\f478;\n$fa-var-file-pdf: \\f1c1;\n$fa-var-file-powerpoint: \\f1c4;\n$fa-var-file-prescription: \\f572;\n$fa-var-file-signature: \\f573;\n$fa-var-file-upload: \\f574;\n$fa-var-file-video: \\f1c8;\n$fa-var-file-word: \\f1c2;\n$fa-var-fill: \\f575;\n$fa-var-fill-drip: \\f576;\n$fa-var-film: \\f008;\n$fa-var-filter: \\f0b0;\n$fa-var-fingerprint: \\f577;\n$fa-var-fire: \\f06d;\n$fa-var-fire-alt: \\f7e4;\n$fa-var-fire-extinguisher: \\f134;\n$fa-var-firefox: \\f269;\n$fa-var-firefox-browser: \\e007;\n$fa-var-first-aid: \\f479;\n$fa-var-first-order: \\f2b0;\n$fa-var-first-order-alt: \\f50a;\n$fa-var-firstdraft: \\f3a1;\n$fa-var-fish: \\f578;\n$fa-var-fist-raised: \\f6de;\n$fa-var-flag: \\f024;\n$fa-var-flag-checkered: \\f11e;\n$fa-var-flag-usa: \\f74d;\n$fa-var-flask: \\f0c3;\n$fa-var-flickr: \\f16e;\n$fa-var-flipboard: \\f44d;\n$fa-var-flushed: \\f579;\n$fa-var-fly: \\f417;\n$fa-var-folder: \\f07b;\n$fa-var-folder-minus: \\f65d;\n$fa-var-folder-open: \\f07c;\n$fa-var-folder-plus: \\f65e;\n$fa-var-font: \\f031;\n$fa-var-font-awesome: \\f2b4;\n$fa-var-font-awesome-alt: \\f35c;\n$fa-var-font-awesome-flag: \\f425;\n$fa-var-font-awesome-logo-full: \\f4e6;\n$fa-var-fonticons: \\f280;\n$fa-var-fonticons-fi: \\f3a2;\n$fa-var-football-ball: \\f44e;\n$fa-var-fort-awesome: \\f286;\n$fa-var-fort-awesome-alt: \\f3a3;\n$fa-var-forumbee: \\f211;\n$fa-var-forward: \\f04e;\n$fa-var-foursquare: \\f180;\n$fa-var-free-code-camp: \\f2c5;\n$fa-var-freebsd: \\f3a4;\n$fa-var-frog: \\f52e;\n$fa-var-frown: \\f119;\n$fa-var-frown-open: \\f57a;\n$fa-var-fulcrum: \\f50b;\n$fa-var-funnel-dollar: \\f662;\n$fa-var-futbol: \\f1e3;\n$fa-var-galactic-republic: \\f50c;\n$fa-var-galactic-senate: \\f50d;\n$fa-var-gamepad: \\f11b;\n$fa-var-gas-pump: \\f52f;\n$fa-var-gavel: \\f0e3;\n$fa-var-gem: \\f3a5;\n$fa-var-genderless: \\f22d;\n$fa-var-get-pocket: \\f265;\n$fa-var-gg: \\f260;\n$fa-var-gg-circle: \\f261;\n$fa-var-ghost: \\f6e2;\n$fa-var-gift: \\f06b;\n$fa-var-gifts: \\f79c;\n$fa-var-git: \\f1d3;\n$fa-var-git-alt: \\f841;\n$fa-var-git-square: \\f1d2;\n$fa-var-github: \\f09b;\n$fa-var-github-alt: \\f113;\n$fa-var-github-square: \\f092;\n$fa-var-gitkraken: \\f3a6;\n$fa-var-gitlab: \\f296;\n$fa-var-gitter: \\f426;\n$fa-var-glass-cheers: \\f79f;\n$fa-var-glass-martini: \\f000;\n$fa-var-glass-martini-alt: \\f57b;\n$fa-var-glass-whiskey: \\f7a0;\n$fa-var-glasses: \\f530;\n$fa-var-glide: \\f2a5;\n$fa-var-glide-g: \\f2a6;\n$fa-var-globe: \\f0ac;\n$fa-var-globe-africa: \\f57c;\n$fa-var-globe-americas: \\f57d;\n$fa-var-globe-asia: \\f57e;\n$fa-var-globe-europe: \\f7a2;\n$fa-var-gofore: \\f3a7;\n$fa-var-golf-ball: \\f450;\n$fa-var-goodreads: \\f3a8;\n$fa-var-goodreads-g: \\f3a9;\n$fa-var-google: \\f1a0;\n$fa-var-google-drive: \\f3aa;\n$fa-var-google-pay: \\e079;\n$fa-var-google-play: \\f3ab;\n$fa-var-google-plus: \\f2b3;\n$fa-var-google-plus-g: \\f0d5;\n$fa-var-google-plus-square: \\f0d4;\n$fa-var-google-wallet: \\f1ee;\n$fa-var-gopuram: \\f664;\n$fa-var-graduation-cap: \\f19d;\n$fa-var-gratipay: \\f184;\n$fa-var-grav: \\f2d6;\n$fa-var-greater-than: \\f531;\n$fa-var-greater-than-equal: \\f532;\n$fa-var-grimace: \\f57f;\n$fa-var-grin: \\f580;\n$fa-var-grin-alt: \\f581;\n$fa-var-grin-beam: \\f582;\n$fa-var-grin-beam-sweat: \\f583;\n$fa-var-grin-hearts: \\f584;\n$fa-var-grin-squint: \\f585;\n$fa-var-grin-squint-tears: \\f586;\n$fa-var-grin-stars: \\f587;\n$fa-var-grin-tears: \\f588;\n$fa-var-grin-tongue: \\f589;\n$fa-var-grin-tongue-squint: \\f58a;\n$fa-var-grin-tongue-wink: \\f58b;\n$fa-var-grin-wink: \\f58c;\n$fa-var-grip-horizontal: \\f58d;\n$fa-var-grip-lines: \\f7a4;\n$fa-var-grip-lines-vertical: \\f7a5;\n$fa-var-grip-vertical: \\f58e;\n$fa-var-gripfire: \\f3ac;\n$fa-var-grunt: \\f3ad;\n$fa-var-guitar: \\f7a6;\n$fa-var-gulp: \\f3ae;\n$fa-var-h-square: \\f0fd;\n$fa-var-hacker-news: \\f1d4;\n$fa-var-hacker-news-square: \\f3af;\n$fa-var-hackerrank: \\f5f7;\n$fa-var-hamburger: \\f805;\n$fa-var-hammer: \\f6e3;\n$fa-var-hamsa: \\f665;\n$fa-var-hand-holding: \\f4bd;\n$fa-var-hand-holding-heart: \\f4be;\n$fa-var-hand-holding-medical: \\e05c;\n$fa-var-hand-holding-usd: \\f4c0;\n$fa-var-hand-holding-water: \\f4c1;\n$fa-var-hand-lizard: \\f258;\n$fa-var-hand-middle-finger: \\f806;\n$fa-var-hand-paper: \\f256;\n$fa-var-hand-peace: \\f25b;\n$fa-var-hand-point-down: \\f0a7;\n$fa-var-hand-point-left: \\f0a5;\n$fa-var-hand-point-right: \\f0a4;\n$fa-var-hand-point-up: \\f0a6;\n$fa-var-hand-pointer: \\f25a;\n$fa-var-hand-rock: \\f255;\n$fa-var-hand-scissors: \\f257;\n$fa-var-hand-sparkles: \\e05d;\n$fa-var-hand-spock: \\f259;\n$fa-var-hands: \\f4c2;\n$fa-var-hands-helping: \\f4c4;\n$fa-var-hands-wash: \\e05e;\n$fa-var-handshake: \\f2b5;\n$fa-var-handshake-alt-slash: \\e05f;\n$fa-var-handshake-slash: \\e060;\n$fa-var-hanukiah: \\f6e6;\n$fa-var-hard-hat: \\f807;\n$fa-var-hashtag: \\f292;\n$fa-var-hat-cowboy: \\f8c0;\n$fa-var-hat-cowboy-side: \\f8c1;\n$fa-var-hat-wizard: \\f6e8;\n$fa-var-hdd: \\f0a0;\n$fa-var-head-side-cough: \\e061;\n$fa-var-head-side-cough-slash: \\e062;\n$fa-var-head-side-mask: \\e063;\n$fa-var-head-side-virus: \\e064;\n$fa-var-heading: \\f1dc;\n$fa-var-headphones: \\f025;\n$fa-var-headphones-alt: \\f58f;\n$fa-var-headset: \\f590;\n$fa-var-heart: \\f004;\n$fa-var-heart-broken: \\f7a9;\n$fa-var-heartbeat: \\f21e;\n$fa-var-helicopter: \\f533;\n$fa-var-highlighter: \\f591;\n$fa-var-hiking: \\f6ec;\n$fa-var-hippo: \\f6ed;\n$fa-var-hips: \\f452;\n$fa-var-hire-a-helper: \\f3b0;\n$fa-var-history: \\f1da;\n$fa-var-hockey-puck: \\f453;\n$fa-var-holly-berry: \\f7aa;\n$fa-var-home: \\f015;\n$fa-var-hooli: \\f427;\n$fa-var-hornbill: \\f592;\n$fa-var-horse: \\f6f0;\n$fa-var-horse-head: \\f7ab;\n$fa-var-hospital: \\f0f8;\n$fa-var-hospital-alt: \\f47d;\n$fa-var-hospital-symbol: \\f47e;\n$fa-var-hospital-user: \\f80d;\n$fa-var-hot-tub: \\f593;\n$fa-var-hotdog: \\f80f;\n$fa-var-hotel: \\f594;\n$fa-var-hotjar: \\f3b1;\n$fa-var-hourglass: \\f254;\n$fa-var-hourglass-end: \\f253;\n$fa-var-hourglass-half: \\f252;\n$fa-var-hourglass-start: \\f251;\n$fa-var-house-damage: \\f6f1;\n$fa-var-house-user: \\e065;\n$fa-var-houzz: \\f27c;\n$fa-var-hryvnia: \\f6f2;\n$fa-var-html5: \\f13b;\n$fa-var-hubspot: \\f3b2;\n$fa-var-i-cursor: \\f246;\n$fa-var-ice-cream: \\f810;\n$fa-var-icicles: \\f7ad;\n$fa-var-icons: \\f86d;\n$fa-var-id-badge: \\f2c1;\n$fa-var-id-card: \\f2c2;\n$fa-var-id-card-alt: \\f47f;\n$fa-var-ideal: \\e013;\n$fa-var-igloo: \\f7ae;\n$fa-var-image: \\f03e;\n$fa-var-images: \\f302;\n$fa-var-imdb: \\f2d8;\n$fa-var-inbox: \\f01c;\n$fa-var-indent: \\f03c;\n$fa-var-industry: \\f275;\n$fa-var-infinity: \\f534;\n$fa-var-info: \\f129;\n$fa-var-info-circle: \\f05a;\n$fa-var-instagram: \\f16d;\n$fa-var-instagram-square: \\e055;\n$fa-var-intercom: \\f7af;\n$fa-var-internet-explorer: \\f26b;\n$fa-var-invision: \\f7b0;\n$fa-var-ioxhost: \\f208;\n$fa-var-italic: \\f033;\n$fa-var-itch-io: \\f83a;\n$fa-var-itunes: \\f3b4;\n$fa-var-itunes-note: \\f3b5;\n$fa-var-java: \\f4e4;\n$fa-var-jedi: \\f669;\n$fa-var-jedi-order: \\f50e;\n$fa-var-jenkins: \\f3b6;\n$fa-var-jira: \\f7b1;\n$fa-var-joget: \\f3b7;\n$fa-var-joint: \\f595;\n$fa-var-joomla: \\f1aa;\n$fa-var-journal-whills: \\f66a;\n$fa-var-js: \\f3b8;\n$fa-var-js-square: \\f3b9;\n$fa-var-jsfiddle: \\f1cc;\n$fa-var-kaaba: \\f66b;\n$fa-var-kaggle: \\f5fa;\n$fa-var-key: \\f084;\n$fa-var-keybase: \\f4f5;\n$fa-var-keyboard: \\f11c;\n$fa-var-keycdn: \\f3ba;\n$fa-var-khanda: \\f66d;\n$fa-var-kickstarter: \\f3bb;\n$fa-var-kickstarter-k: \\f3bc;\n$fa-var-kiss: \\f596;\n$fa-var-kiss-beam: \\f597;\n$fa-var-kiss-wink-heart: \\f598;\n$fa-var-kiwi-bird: \\f535;\n$fa-var-korvue: \\f42f;\n$fa-var-landmark: \\f66f;\n$fa-var-language: \\f1ab;\n$fa-var-laptop: \\f109;\n$fa-var-laptop-code: \\f5fc;\n$fa-var-laptop-house: \\e066;\n$fa-var-laptop-medical: \\f812;\n$fa-var-laravel: \\f3bd;\n$fa-var-lastfm: \\f202;\n$fa-var-lastfm-square: \\f203;\n$fa-var-laugh: \\f599;\n$fa-var-laugh-beam: \\f59a;\n$fa-var-laugh-squint: \\f59b;\n$fa-var-laugh-wink: \\f59c;\n$fa-var-layer-group: \\f5fd;\n$fa-var-leaf: \\f06c;\n$fa-var-leanpub: \\f212;\n$fa-var-lemon: \\f094;\n$fa-var-less: \\f41d;\n$fa-var-less-than: \\f536;\n$fa-var-less-than-equal: \\f537;\n$fa-var-level-down-alt: \\f3be;\n$fa-var-level-up-alt: \\f3bf;\n$fa-var-life-ring: \\f1cd;\n$fa-var-lightbulb: \\f0eb;\n$fa-var-line: \\f3c0;\n$fa-var-link: \\f0c1;\n$fa-var-linkedin: \\f08c;\n$fa-var-linkedin-in: \\f0e1;\n$fa-var-linode: \\f2b8;\n$fa-var-linux: \\f17c;\n$fa-var-lira-sign: \\f195;\n$fa-var-list: \\f03a;\n$fa-var-list-alt: \\f022;\n$fa-var-list-ol: \\f0cb;\n$fa-var-list-ul: \\f0ca;\n$fa-var-location-arrow: \\f124;\n$fa-var-lock: \\f023;\n$fa-var-lock-open: \\f3c1;\n$fa-var-long-arrow-alt-down: \\f309;\n$fa-var-long-arrow-alt-left: \\f30a;\n$fa-var-long-arrow-alt-right: \\f30b;\n$fa-var-long-arrow-alt-up: \\f30c;\n$fa-var-low-vision: \\f2a8;\n$fa-var-luggage-cart: \\f59d;\n$fa-var-lungs: \\f604;\n$fa-var-lungs-virus: \\e067;\n$fa-var-lyft: \\f3c3;\n$fa-var-magento: \\f3c4;\n$fa-var-magic: \\f0d0;\n$fa-var-magnet: \\f076;\n$fa-var-mail-bulk: \\f674;\n$fa-var-mailchimp: \\f59e;\n$fa-var-male: \\f183;\n$fa-var-mandalorian: \\f50f;\n$fa-var-map: \\f279;\n$fa-var-map-marked: \\f59f;\n$fa-var-map-marked-alt: \\f5a0;\n$fa-var-map-marker: \\f041;\n$fa-var-map-marker-alt: \\f3c5;\n$fa-var-map-pin: \\f276;\n$fa-var-map-signs: \\f277;\n$fa-var-markdown: \\f60f;\n$fa-var-marker: \\f5a1;\n$fa-var-mars: \\f222;\n$fa-var-mars-double: \\f227;\n$fa-var-mars-stroke: \\f229;\n$fa-var-mars-stroke-h: \\f22b;\n$fa-var-mars-stroke-v: \\f22a;\n$fa-var-mask: \\f6fa;\n$fa-var-mastodon: \\f4f6;\n$fa-var-maxcdn: \\f136;\n$fa-var-mdb: \\f8ca;\n$fa-var-medal: \\f5a2;\n$fa-var-medapps: \\f3c6;\n$fa-var-medium: \\f23a;\n$fa-var-medium-m: \\f3c7;\n$fa-var-medkit: \\f0fa;\n$fa-var-medrt: \\f3c8;\n$fa-var-meetup: \\f2e0;\n$fa-var-megaport: \\f5a3;\n$fa-var-meh: \\f11a;\n$fa-var-meh-blank: \\f5a4;\n$fa-var-meh-rolling-eyes: \\f5a5;\n$fa-var-memory: \\f538;\n$fa-var-mendeley: \\f7b3;\n$fa-var-menorah: \\f676;\n$fa-var-mercury: \\f223;\n$fa-var-meteor: \\f753;\n$fa-var-microblog: \\e01a;\n$fa-var-microchip: \\f2db;\n$fa-var-microphone: \\f130;\n$fa-var-microphone-alt: \\f3c9;\n$fa-var-microphone-alt-slash: \\f539;\n$fa-var-microphone-slash: \\f131;\n$fa-var-microscope: \\f610;\n$fa-var-microsoft: \\f3ca;\n$fa-var-minus: \\f068;\n$fa-var-minus-circle: \\f056;\n$fa-var-minus-square: \\f146;\n$fa-var-mitten: \\f7b5;\n$fa-var-mix: \\f3cb;\n$fa-var-mixcloud: \\f289;\n$fa-var-mixer: \\e056;\n$fa-var-mizuni: \\f3cc;\n$fa-var-mobile: \\f10b;\n$fa-var-mobile-alt: \\f3cd;\n$fa-var-modx: \\f285;\n$fa-var-monero: \\f3d0;\n$fa-var-money-bill: \\f0d6;\n$fa-var-money-bill-alt: \\f3d1;\n$fa-var-money-bill-wave: \\f53a;\n$fa-var-money-bill-wave-alt: \\f53b;\n$fa-var-money-check: \\f53c;\n$fa-var-money-check-alt: \\f53d;\n$fa-var-monument: \\f5a6;\n$fa-var-moon: \\f186;\n$fa-var-mortar-pestle: \\f5a7;\n$fa-var-mosque: \\f678;\n$fa-var-motorcycle: \\f21c;\n$fa-var-mountain: \\f6fc;\n$fa-var-mouse: \\f8cc;\n$fa-var-mouse-pointer: \\f245;\n$fa-var-mug-hot: \\f7b6;\n$fa-var-music: \\f001;\n$fa-var-napster: \\f3d2;\n$fa-var-neos: \\f612;\n$fa-var-network-wired: \\f6ff;\n$fa-var-neuter: \\f22c;\n$fa-var-newspaper: \\f1ea;\n$fa-var-nimblr: \\f5a8;\n$fa-var-node: \\f419;\n$fa-var-node-js: \\f3d3;\n$fa-var-not-equal: \\f53e;\n$fa-var-notes-medical: \\f481;\n$fa-var-npm: \\f3d4;\n$fa-var-ns8: \\f3d5;\n$fa-var-nutritionix: \\f3d6;\n$fa-var-object-group: \\f247;\n$fa-var-object-ungroup: \\f248;\n$fa-var-odnoklassniki: \\f263;\n$fa-var-odnoklassniki-square: \\f264;\n$fa-var-oil-can: \\f613;\n$fa-var-old-republic: \\f510;\n$fa-var-om: \\f679;\n$fa-var-opencart: \\f23d;\n$fa-var-openid: \\f19b;\n$fa-var-opera: \\f26a;\n$fa-var-optin-monster: \\f23c;\n$fa-var-orcid: \\f8d2;\n$fa-var-osi: \\f41a;\n$fa-var-otter: \\f700;\n$fa-var-outdent: \\f03b;\n$fa-var-page4: \\f3d7;\n$fa-var-pagelines: \\f18c;\n$fa-var-pager: \\f815;\n$fa-var-paint-brush: \\f1fc;\n$fa-var-paint-roller: \\f5aa;\n$fa-var-palette: \\f53f;\n$fa-var-palfed: \\f3d8;\n$fa-var-pallet: \\f482;\n$fa-var-paper-plane: \\f1d8;\n$fa-var-paperclip: \\f0c6;\n$fa-var-parachute-box: \\f4cd;\n$fa-var-paragraph: \\f1dd;\n$fa-var-parking: \\f540;\n$fa-var-passport: \\f5ab;\n$fa-var-pastafarianism: \\f67b;\n$fa-var-paste: \\f0ea;\n$fa-var-patreon: \\f3d9;\n$fa-var-pause: \\f04c;\n$fa-var-pause-circle: \\f28b;\n$fa-var-paw: \\f1b0;\n$fa-var-paypal: \\f1ed;\n$fa-var-peace: \\f67c;\n$fa-var-pen: \\f304;\n$fa-var-pen-alt: \\f305;\n$fa-var-pen-fancy: \\f5ac;\n$fa-var-pen-nib: \\f5ad;\n$fa-var-pen-square: \\f14b;\n$fa-var-pencil-alt: \\f303;\n$fa-var-pencil-ruler: \\f5ae;\n$fa-var-penny-arcade: \\f704;\n$fa-var-people-arrows: \\e068;\n$fa-var-people-carry: \\f4ce;\n$fa-var-pepper-hot: \\f816;\n$fa-var-percent: \\f295;\n$fa-var-percentage: \\f541;\n$fa-var-periscope: \\f3da;\n$fa-var-person-booth: \\f756;\n$fa-var-phabricator: \\f3db;\n$fa-var-phoenix-framework: \\f3dc;\n$fa-var-phoenix-squadron: \\f511;\n$fa-var-phone: \\f095;\n$fa-var-phone-alt: \\f879;\n$fa-var-phone-slash: \\f3dd;\n$fa-var-phone-square: \\f098;\n$fa-var-phone-square-alt: \\f87b;\n$fa-var-phone-volume: \\f2a0;\n$fa-var-photo-video: \\f87c;\n$fa-var-php: \\f457;\n$fa-var-pied-piper: \\f2ae;\n$fa-var-pied-piper-alt: \\f1a8;\n$fa-var-pied-piper-hat: \\f4e5;\n$fa-var-pied-piper-pp: \\f1a7;\n$fa-var-pied-piper-square: \\e01e;\n$fa-var-piggy-bank: \\f4d3;\n$fa-var-pills: \\f484;\n$fa-var-pinterest: \\f0d2;\n$fa-var-pinterest-p: \\f231;\n$fa-var-pinterest-square: \\f0d3;\n$fa-var-pizza-slice: \\f818;\n$fa-var-place-of-worship: \\f67f;\n$fa-var-plane: \\f072;\n$fa-var-plane-arrival: \\f5af;\n$fa-var-plane-departure: \\f5b0;\n$fa-var-plane-slash: \\e069;\n$fa-var-play: \\f04b;\n$fa-var-play-circle: \\f144;\n$fa-var-playstation: \\f3df;\n$fa-var-plug: \\f1e6;\n$fa-var-plus: \\f067;\n$fa-var-plus-circle: \\f055;\n$fa-var-plus-square: \\f0fe;\n$fa-var-podcast: \\f2ce;\n$fa-var-poll: \\f681;\n$fa-var-poll-h: \\f682;\n$fa-var-poo: \\f2fe;\n$fa-var-poo-storm: \\f75a;\n$fa-var-poop: \\f619;\n$fa-var-portrait: \\f3e0;\n$fa-var-pound-sign: \\f154;\n$fa-var-power-off: \\f011;\n$fa-var-pray: \\f683;\n$fa-var-praying-hands: \\f684;\n$fa-var-prescription: \\f5b1;\n$fa-var-prescription-bottle: \\f485;\n$fa-var-prescription-bottle-alt: \\f486;\n$fa-var-print: \\f02f;\n$fa-var-procedures: \\f487;\n$fa-var-product-hunt: \\f288;\n$fa-var-project-diagram: \\f542;\n$fa-var-pump-medical: \\e06a;\n$fa-var-pump-soap: \\e06b;\n$fa-var-pushed: \\f3e1;\n$fa-var-puzzle-piece: \\f12e;\n$fa-var-python: \\f3e2;\n$fa-var-qq: \\f1d6;\n$fa-var-qrcode: \\f029;\n$fa-var-question: \\f128;\n$fa-var-question-circle: \\f059;\n$fa-var-quidditch: \\f458;\n$fa-var-quinscape: \\f459;\n$fa-var-quora: \\f2c4;\n$fa-var-quote-left: \\f10d;\n$fa-var-quote-right: \\f10e;\n$fa-var-quran: \\f687;\n$fa-var-r-project: \\f4f7;\n$fa-var-radiation: \\f7b9;\n$fa-var-radiation-alt: \\f7ba;\n$fa-var-rainbow: \\f75b;\n$fa-var-random: \\f074;\n$fa-var-raspberry-pi: \\f7bb;\n$fa-var-ravelry: \\f2d9;\n$fa-var-react: \\f41b;\n$fa-var-reacteurope: \\f75d;\n$fa-var-readme: \\f4d5;\n$fa-var-rebel: \\f1d0;\n$fa-var-receipt: \\f543;\n$fa-var-record-vinyl: \\f8d9;\n$fa-var-recycle: \\f1b8;\n$fa-var-red-river: \\f3e3;\n$fa-var-reddit: \\f1a1;\n$fa-var-reddit-alien: \\f281;\n$fa-var-reddit-square: \\f1a2;\n$fa-var-redhat: \\f7bc;\n$fa-var-redo: \\f01e;\n$fa-var-redo-alt: \\f2f9;\n$fa-var-registered: \\f25d;\n$fa-var-remove-format: \\f87d;\n$fa-var-renren: \\f18b;\n$fa-var-reply: \\f3e5;\n$fa-var-reply-all: \\f122;\n$fa-var-replyd: \\f3e6;\n$fa-var-republican: \\f75e;\n$fa-var-researchgate: \\f4f8;\n$fa-var-resolving: \\f3e7;\n$fa-var-restroom: \\f7bd;\n$fa-var-retweet: \\f079;\n$fa-var-rev: \\f5b2;\n$fa-var-ribbon: \\f4d6;\n$fa-var-ring: \\f70b;\n$fa-var-road: \\f018;\n$fa-var-robot: \\f544;\n$fa-var-rocket: \\f135;\n$fa-var-rocketchat: \\f3e8;\n$fa-var-rockrms: \\f3e9;\n$fa-var-route: \\f4d7;\n$fa-var-rss: \\f09e;\n$fa-var-rss-square: \\f143;\n$fa-var-ruble-sign: \\f158;\n$fa-var-ruler: \\f545;\n$fa-var-ruler-combined: \\f546;\n$fa-var-ruler-horizontal: \\f547;\n$fa-var-ruler-vertical: \\f548;\n$fa-var-running: \\f70c;\n$fa-var-rupee-sign: \\f156;\n$fa-var-rust: \\e07a;\n$fa-var-sad-cry: \\f5b3;\n$fa-var-sad-tear: \\f5b4;\n$fa-var-safari: \\f267;\n$fa-var-salesforce: \\f83b;\n$fa-var-sass: \\f41e;\n$fa-var-satellite: \\f7bf;\n$fa-var-satellite-dish: \\f7c0;\n$fa-var-save: \\f0c7;\n$fa-var-schlix: \\f3ea;\n$fa-var-school: \\f549;\n$fa-var-screwdriver: \\f54a;\n$fa-var-scribd: \\f28a;\n$fa-var-scroll: \\f70e;\n$fa-var-sd-card: \\f7c2;\n$fa-var-search: \\f002;\n$fa-var-search-dollar: \\f688;\n$fa-var-search-location: \\f689;\n$fa-var-search-minus: \\f010;\n$fa-var-search-plus: \\f00e;\n$fa-var-searchengin: \\f3eb;\n$fa-var-seedling: \\f4d8;\n$fa-var-sellcast: \\f2da;\n$fa-var-sellsy: \\f213;\n$fa-var-server: \\f233;\n$fa-var-servicestack: \\f3ec;\n$fa-var-shapes: \\f61f;\n$fa-var-share: \\f064;\n$fa-var-share-alt: \\f1e0;\n$fa-var-share-alt-square: \\f1e1;\n$fa-var-share-square: \\f14d;\n$fa-var-shekel-sign: \\f20b;\n$fa-var-shield-alt: \\f3ed;\n$fa-var-shield-virus: \\e06c;\n$fa-var-ship: \\f21a;\n$fa-var-shipping-fast: \\f48b;\n$fa-var-shirtsinbulk: \\f214;\n$fa-var-shoe-prints: \\f54b;\n$fa-var-shopify: \\e057;\n$fa-var-shopping-bag: \\f290;\n$fa-var-shopping-basket: \\f291;\n$fa-var-shopping-cart: \\f07a;\n$fa-var-shopware: \\f5b5;\n$fa-var-shower: \\f2cc;\n$fa-var-shuttle-van: \\f5b6;\n$fa-var-sign: \\f4d9;\n$fa-var-sign-in-alt: \\f2f6;\n$fa-var-sign-language: \\f2a7;\n$fa-var-sign-out-alt: \\f2f5;\n$fa-var-signal: \\f012;\n$fa-var-signature: \\f5b7;\n$fa-var-sim-card: \\f7c4;\n$fa-var-simplybuilt: \\f215;\n$fa-var-sink: \\e06d;\n$fa-var-sistrix: \\f3ee;\n$fa-var-sitemap: \\f0e8;\n$fa-var-sith: \\f512;\n$fa-var-skating: \\f7c5;\n$fa-var-sketch: \\f7c6;\n$fa-var-skiing: \\f7c9;\n$fa-var-skiing-nordic: \\f7ca;\n$fa-var-skull: \\f54c;\n$fa-var-skull-crossbones: \\f714;\n$fa-var-skyatlas: \\f216;\n$fa-var-skype: \\f17e;\n$fa-var-slack: \\f198;\n$fa-var-slack-hash: \\f3ef;\n$fa-var-slash: \\f715;\n$fa-var-sleigh: \\f7cc;\n$fa-var-sliders-h: \\f1de;\n$fa-var-slideshare: \\f1e7;\n$fa-var-smile: \\f118;\n$fa-var-smile-beam: \\f5b8;\n$fa-var-smile-wink: \\f4da;\n$fa-var-smog: \\f75f;\n$fa-var-smoking: \\f48d;\n$fa-var-smoking-ban: \\f54d;\n$fa-var-sms: \\f7cd;\n$fa-var-snapchat: \\f2ab;\n$fa-var-snapchat-ghost: \\f2ac;\n$fa-var-snapchat-square: \\f2ad;\n$fa-var-snowboarding: \\f7ce;\n$fa-var-snowflake: \\f2dc;\n$fa-var-snowman: \\f7d0;\n$fa-var-snowplow: \\f7d2;\n$fa-var-soap: \\e06e;\n$fa-var-socks: \\f696;\n$fa-var-solar-panel: \\f5ba;\n$fa-var-sort: \\f0dc;\n$fa-var-sort-alpha-down: \\f15d;\n$fa-var-sort-alpha-down-alt: \\f881;\n$fa-var-sort-alpha-up: \\f15e;\n$fa-var-sort-alpha-up-alt: \\f882;\n$fa-var-sort-amount-down: \\f160;\n$fa-var-sort-amount-down-alt: \\f884;\n$fa-var-sort-amount-up: \\f161;\n$fa-var-sort-amount-up-alt: \\f885;\n$fa-var-sort-down: \\f0dd;\n$fa-var-sort-numeric-down: \\f162;\n$fa-var-sort-numeric-down-alt: \\f886;\n$fa-var-sort-numeric-up: \\f163;\n$fa-var-sort-numeric-up-alt: \\f887;\n$fa-var-sort-up: \\f0de;\n$fa-var-soundcloud: \\f1be;\n$fa-var-sourcetree: \\f7d3;\n$fa-var-spa: \\f5bb;\n$fa-var-space-shuttle: \\f197;\n$fa-var-speakap: \\f3f3;\n$fa-var-speaker-deck: \\f83c;\n$fa-var-spell-check: \\f891;\n$fa-var-spider: \\f717;\n$fa-var-spinner: \\f110;\n$fa-var-splotch: \\f5bc;\n$fa-var-spotify: \\f1bc;\n$fa-var-spray-can: \\f5bd;\n$fa-var-square: \\f0c8;\n$fa-var-square-full: \\f45c;\n$fa-var-square-root-alt: \\f698;\n$fa-var-squarespace: \\f5be;\n$fa-var-stack-exchange: \\f18d;\n$fa-var-stack-overflow: \\f16c;\n$fa-var-stackpath: \\f842;\n$fa-var-stamp: \\f5bf;\n$fa-var-star: \\f005;\n$fa-var-star-and-crescent: \\f699;\n$fa-var-star-half: \\f089;\n$fa-var-star-half-alt: \\f5c0;\n$fa-var-star-of-david: \\f69a;\n$fa-var-star-of-life: \\f621;\n$fa-var-staylinked: \\f3f5;\n$fa-var-steam: \\f1b6;\n$fa-var-steam-square: \\f1b7;\n$fa-var-steam-symbol: \\f3f6;\n$fa-var-step-backward: \\f048;\n$fa-var-step-forward: \\f051;\n$fa-var-stethoscope: \\f0f1;\n$fa-var-sticker-mule: \\f3f7;\n$fa-var-sticky-note: \\f249;\n$fa-var-stop: \\f04d;\n$fa-var-stop-circle: \\f28d;\n$fa-var-stopwatch: \\f2f2;\n$fa-var-stopwatch-20: \\e06f;\n$fa-var-store: \\f54e;\n$fa-var-store-alt: \\f54f;\n$fa-var-store-alt-slash: \\e070;\n$fa-var-store-slash: \\e071;\n$fa-var-strava: \\f428;\n$fa-var-stream: \\f550;\n$fa-var-street-view: \\f21d;\n$fa-var-strikethrough: \\f0cc;\n$fa-var-stripe: \\f429;\n$fa-var-stripe-s: \\f42a;\n$fa-var-stroopwafel: \\f551;\n$fa-var-studiovinari: \\f3f8;\n$fa-var-stumbleupon: \\f1a4;\n$fa-var-stumbleupon-circle: \\f1a3;\n$fa-var-subscript: \\f12c;\n$fa-var-subway: \\f239;\n$fa-var-suitcase: \\f0f2;\n$fa-var-suitcase-rolling: \\f5c1;\n$fa-var-sun: \\f185;\n$fa-var-superpowers: \\f2dd;\n$fa-var-superscript: \\f12b;\n$fa-var-supple: \\f3f9;\n$fa-var-surprise: \\f5c2;\n$fa-var-suse: \\f7d6;\n$fa-var-swatchbook: \\f5c3;\n$fa-var-swift: \\f8e1;\n$fa-var-swimmer: \\f5c4;\n$fa-var-swimming-pool: \\f5c5;\n$fa-var-symfony: \\f83d;\n$fa-var-synagogue: \\f69b;\n$fa-var-sync: \\f021;\n$fa-var-sync-alt: \\f2f1;\n$fa-var-syringe: \\f48e;\n$fa-var-table: \\f0ce;\n$fa-var-table-tennis: \\f45d;\n$fa-var-tablet: \\f10a;\n$fa-var-tablet-alt: \\f3fa;\n$fa-var-tablets: \\f490;\n$fa-var-tachometer-alt: \\f3fd;\n$fa-var-tag: \\f02b;\n$fa-var-tags: \\f02c;\n$fa-var-tape: \\f4db;\n$fa-var-tasks: \\f0ae;\n$fa-var-taxi: \\f1ba;\n$fa-var-teamspeak: \\f4f9;\n$fa-var-teeth: \\f62e;\n$fa-var-teeth-open: \\f62f;\n$fa-var-telegram: \\f2c6;\n$fa-var-telegram-plane: \\f3fe;\n$fa-var-temperature-high: \\f769;\n$fa-var-temperature-low: \\f76b;\n$fa-var-tencent-weibo: \\f1d5;\n$fa-var-tenge: \\f7d7;\n$fa-var-terminal: \\f120;\n$fa-var-text-height: \\f034;\n$fa-var-text-width: \\f035;\n$fa-var-th: \\f00a;\n$fa-var-th-large: \\f009;\n$fa-var-th-list: \\f00b;\n$fa-var-the-red-yeti: \\f69d;\n$fa-var-theater-masks: \\f630;\n$fa-var-themeco: \\f5c6;\n$fa-var-themeisle: \\f2b2;\n$fa-var-thermometer: \\f491;\n$fa-var-thermometer-empty: \\f2cb;\n$fa-var-thermometer-full: \\f2c7;\n$fa-var-thermometer-half: \\f2c9;\n$fa-var-thermometer-quarter: \\f2ca;\n$fa-var-thermometer-three-quarters: \\f2c8;\n$fa-var-think-peaks: \\f731;\n$fa-var-thumbs-down: \\f165;\n$fa-var-thumbs-up: \\f164;\n$fa-var-thumbtack: \\f08d;\n$fa-var-ticket-alt: \\f3ff;\n$fa-var-tiktok: \\e07b;\n$fa-var-times: \\f00d;\n$fa-var-times-circle: \\f057;\n$fa-var-tint: \\f043;\n$fa-var-tint-slash: \\f5c7;\n$fa-var-tired: \\f5c8;\n$fa-var-toggle-off: \\f204;\n$fa-var-toggle-on: \\f205;\n$fa-var-toilet: \\f7d8;\n$fa-var-toilet-paper: \\f71e;\n$fa-var-toilet-paper-slash: \\e072;\n$fa-var-toolbox: \\f552;\n$fa-var-tools: \\f7d9;\n$fa-var-tooth: \\f5c9;\n$fa-var-torah: \\f6a0;\n$fa-var-torii-gate: \\f6a1;\n$fa-var-tractor: \\f722;\n$fa-var-trade-federation: \\f513;\n$fa-var-trademark: \\f25c;\n$fa-var-traffic-light: \\f637;\n$fa-var-trailer: \\e041;\n$fa-var-train: \\f238;\n$fa-var-tram: \\f7da;\n$fa-var-transgender: \\f224;\n$fa-var-transgender-alt: \\f225;\n$fa-var-trash: \\f1f8;\n$fa-var-trash-alt: \\f2ed;\n$fa-var-trash-restore: \\f829;\n$fa-var-trash-restore-alt: \\f82a;\n$fa-var-tree: \\f1bb;\n$fa-var-trello: \\f181;\n$fa-var-tripadvisor: \\f262;\n$fa-var-trophy: \\f091;\n$fa-var-truck: \\f0d1;\n$fa-var-truck-loading: \\f4de;\n$fa-var-truck-monster: \\f63b;\n$fa-var-truck-moving: \\f4df;\n$fa-var-truck-pickup: \\f63c;\n$fa-var-tshirt: \\f553;\n$fa-var-tty: \\f1e4;\n$fa-var-tumblr: \\f173;\n$fa-var-tumblr-square: \\f174;\n$fa-var-tv: \\f26c;\n$fa-var-twitch: \\f1e8;\n$fa-var-twitter: \\f099;\n$fa-var-twitter-square: \\f081;\n$fa-var-typo3: \\f42b;\n$fa-var-uber: \\f402;\n$fa-var-ubuntu: \\f7df;\n$fa-var-uikit: \\f403;\n$fa-var-umbraco: \\f8e8;\n$fa-var-umbrella: \\f0e9;\n$fa-var-umbrella-beach: \\f5ca;\n$fa-var-underline: \\f0cd;\n$fa-var-undo: \\f0e2;\n$fa-var-undo-alt: \\f2ea;\n$fa-var-uniregistry: \\f404;\n$fa-var-unity: \\e049;\n$fa-var-universal-access: \\f29a;\n$fa-var-university: \\f19c;\n$fa-var-unlink: \\f127;\n$fa-var-unlock: \\f09c;\n$fa-var-unlock-alt: \\f13e;\n$fa-var-unsplash: \\e07c;\n$fa-var-untappd: \\f405;\n$fa-var-upload: \\f093;\n$fa-var-ups: \\f7e0;\n$fa-var-usb: \\f287;\n$fa-var-user: \\f007;\n$fa-var-user-alt: \\f406;\n$fa-var-user-alt-slash: \\f4fa;\n$fa-var-user-astronaut: \\f4fb;\n$fa-var-user-check: \\f4fc;\n$fa-var-user-circle: \\f2bd;\n$fa-var-user-clock: \\f4fd;\n$fa-var-user-cog: \\f4fe;\n$fa-var-user-edit: \\f4ff;\n$fa-var-user-friends: \\f500;\n$fa-var-user-graduate: \\f501;\n$fa-var-user-injured: \\f728;\n$fa-var-user-lock: \\f502;\n$fa-var-user-md: \\f0f0;\n$fa-var-user-minus: \\f503;\n$fa-var-user-ninja: \\f504;\n$fa-var-user-nurse: \\f82f;\n$fa-var-user-plus: \\f234;\n$fa-var-user-secret: \\f21b;\n$fa-var-user-shield: \\f505;\n$fa-var-user-slash: \\f506;\n$fa-var-user-tag: \\f507;\n$fa-var-user-tie: \\f508;\n$fa-var-user-times: \\f235;\n$fa-var-users: \\f0c0;\n$fa-var-users-cog: \\f509;\n$fa-var-users-slash: \\e073;\n$fa-var-usps: \\f7e1;\n$fa-var-ussunnah: \\f407;\n$fa-var-utensil-spoon: \\f2e5;\n$fa-var-utensils: \\f2e7;\n$fa-var-vaadin: \\f408;\n$fa-var-vector-square: \\f5cb;\n$fa-var-venus: \\f221;\n$fa-var-venus-double: \\f226;\n$fa-var-venus-mars: \\f228;\n$fa-var-viacoin: \\f237;\n$fa-var-viadeo: \\f2a9;\n$fa-var-viadeo-square: \\f2aa;\n$fa-var-vial: \\f492;\n$fa-var-vials: \\f493;\n$fa-var-viber: \\f409;\n$fa-var-video: \\f03d;\n$fa-var-video-slash: \\f4e2;\n$fa-var-vihara: \\f6a7;\n$fa-var-vimeo: \\f40a;\n$fa-var-vimeo-square: \\f194;\n$fa-var-vimeo-v: \\f27d;\n$fa-var-vine: \\f1ca;\n$fa-var-virus: \\e074;\n$fa-var-virus-slash: \\e075;\n$fa-var-viruses: \\e076;\n$fa-var-vk: \\f189;\n$fa-var-vnv: \\f40b;\n$fa-var-voicemail: \\f897;\n$fa-var-volleyball-ball: \\f45f;\n$fa-var-volume-down: \\f027;\n$fa-var-volume-mute: \\f6a9;\n$fa-var-volume-off: \\f026;\n$fa-var-volume-up: \\f028;\n$fa-var-vote-yea: \\f772;\n$fa-var-vr-cardboard: \\f729;\n$fa-var-vuejs: \\f41f;\n$fa-var-walking: \\f554;\n$fa-var-wallet: \\f555;\n$fa-var-warehouse: \\f494;\n$fa-var-water: \\f773;\n$fa-var-wave-square: \\f83e;\n$fa-var-waze: \\f83f;\n$fa-var-weebly: \\f5cc;\n$fa-var-weibo: \\f18a;\n$fa-var-weight: \\f496;\n$fa-var-weight-hanging: \\f5cd;\n$fa-var-weixin: \\f1d7;\n$fa-var-whatsapp: \\f232;\n$fa-var-whatsapp-square: \\f40c;\n$fa-var-wheelchair: \\f193;\n$fa-var-whmcs: \\f40d;\n$fa-var-wifi: \\f1eb;\n$fa-var-wikipedia-w: \\f266;\n$fa-var-wind: \\f72e;\n$fa-var-window-close: \\f410;\n$fa-var-window-maximize: \\f2d0;\n$fa-var-window-minimize: \\f2d1;\n$fa-var-window-restore: \\f2d2;\n$fa-var-windows: \\f17a;\n$fa-var-wine-bottle: \\f72f;\n$fa-var-wine-glass: \\f4e3;\n$fa-var-wine-glass-alt: \\f5ce;\n$fa-var-wix: \\f5cf;\n$fa-var-wizards-of-the-coast: \\f730;\n$fa-var-wolf-pack-battalion: \\f514;\n$fa-var-won-sign: \\f159;\n$fa-var-wordpress: \\f19a;\n$fa-var-wordpress-simple: \\f411;\n$fa-var-wpbeginner: \\f297;\n$fa-var-wpexplorer: \\f2de;\n$fa-var-wpforms: \\f298;\n$fa-var-wpressr: \\f3e4;\n$fa-var-wrench: \\f0ad;\n$fa-var-x-ray: \\f497;\n$fa-var-xbox: \\f412;\n$fa-var-xing: \\f168;\n$fa-var-xing-square: \\f169;\n$fa-var-y-combinator: \\f23b;\n$fa-var-yahoo: \\f19e;\n$fa-var-yammer: \\f840;\n$fa-var-yandex: \\f413;\n$fa-var-yandex-international: \\f414;\n$fa-var-yarn: \\f7e3;\n$fa-var-yelp: \\f1e9;\n$fa-var-yen-sign: \\f157;\n$fa-var-yin-yang: \\f6ad;\n$fa-var-yoast: \\f2b1;\n$fa-var-youtube: \\f167;\n$fa-var-youtube-square: \\f431;\n$fa-var-zhihu: \\f63f;\n","/*!\n * Font Awesome Free 5.14.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n@import 'variables';\n\n@font-face {\n  font-family: 'Font Awesome 5 Free';\n  font-style: normal;\n  font-weight: 900;\n  font-display: $fa-font-display;\n  src: url('#{$fa-font-path}/fa-solid-900.eot');\n  src: url('#{$fa-font-path}/fa-solid-900.eot?#iefix') format('embedded-opentype'),\n  url('#{$fa-font-path}/fa-solid-900.woff2') format('woff2'),\n  url('#{$fa-font-path}/fa-solid-900.woff') format('woff'),\n  url('#{$fa-font-path}/fa-solid-900.ttf') format('truetype'),\n  url('#{$fa-font-path}/fa-solid-900.svg#fontawesome') format('svg');\n}\n\n.fa,\n.fas {\n  font-family: 'Font Awesome 5 Free';\n  font-weight: 900;\n}\n","/*!\n * Font Awesome Free 5.14.0 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */\n@import 'variables';\n\n@font-face {\n  font-family: 'Font Awesome 5 Brands';\n  font-style: normal;\n  font-weight: 400;\n  font-display: $fa-font-display;\n  src: url('#{$fa-font-path}/fa-brands-400.eot');\n  src: url('#{$fa-font-path}/fa-brands-400.eot?#iefix') format('embedded-opentype'),\n  url('#{$fa-font-path}/fa-brands-400.woff2') format('woff2'),\n  url('#{$fa-font-path}/fa-brands-400.woff') format('woff'),\n  url('#{$fa-font-path}/fa-brands-400.ttf') format('truetype'),\n  url('#{$fa-font-path}/fa-brands-400.svg#fontawesome') format('svg');\n}\n\n.fab {\n  font-family: 'Font Awesome 5 Brands';\n  font-weight: 400;\n}\n","@import 'library/typography/index';\n@import 'library/reset-utilities/index';\n@import 'library/vendors/index';\n\n// organize\n\n@import 'library/box-shadows';\n@import 'library/buttons';\n@import 'library/center-block';\n@import 'library/divider-line';\n@import 'library/headline-type';\n@import 'library/highlight-box';\n@import 'library/image-2x';\n@import 'library/image-styles';\n@import 'library/navigation-list';\n@import 'library/no-drag-image';\n@import 'library/svg-bg';\n@import 'library/elements';\n\n// Custom\n\n@import 'library/custom/button-arrow';\n@import 'library/custom/view-title';\n","@import 'font-size';\n@import 'line-height';\n@import 'no-bullet';\n@import 'no-bullets';\n@import 'pretty-bullets';\n@import 'text-truncate';\n@import 'unstyled-link';\n@import 'text-replacement/index';\n","// This mixin sets the font size in rem's with a px fallback.\n\n// Usage\n// body {\n  // @include font-size(16);\n// }\n\n@mixin font-size($sizeValue: 12 ){\n  font-size: $sizeValue + px; //fallback for old browsers\n  font-size: (0.125 * $sizeValue) + rem;\n}\n","// This mixin sets the line height in rem's with a px fallback.\n\n// Usage\n// body {\n  // @include line-height (16);\n// }\n\n@mixin line-height($heightValue: 12 ){\n    line-height: $heightValue + px; //fallback for old browsers\n    line-height: (0.125 * $heightValue) + rem;\n}\n","@mixin no-bullet{\n  list-style-image: none;\n  list-style-type: none;\n  list-style: none;\n  margin-left: 0;\n}\n","@mixin no-bullets {\n  li {\n    @include no-bullet;\n  }\n}\n","// http://compass-style.org/reference/compass/typography/lists/bullets/#mixin-pretty-bullets\n\n@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {\n  margin-left: 0;\n  li {\n    padding-left: $padding;\n    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;\n    list-style-type: none;\n  }\n}\n","// Requires the element to be block or inline-block.\n@mixin text-truncate {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n","@mixin unstyled-link {\n  color: inherit;\n  text-decoration: inherit;\n  // cursor: inherit;\n  &:active, &:focus {\n    outline: none;\n  }\n}\n","@import 'replace-text-with-dimensions';\n@import 'replace-text';\n@import 'squish-text';\n","// http://compass-style.org/reference/compass/typography/text/replacement/#mixin-replace-text-with-dimensions\n\n@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {\n  @include replace-text(if($inline, inline-image($img), $img), $x, $y);\n  width: image-width($img);\n  height: image-height($img);\n}\n","// http://compass-style.org/reference/compass/typography/text/replacement/#mixin-replace-text\n@mixin replace-text($img, $x: 50%, $y: 50%) {\n  @include hide-text;\n  background: {\n    @if is-url($img) {\n      image: $img;\n    }\n    @else {\n      image: image-url($img);\n    }\n    repeat: no-repeat;\n    position: $x $y;\n  };\n}\n","// http://compass-style.org/reference/compass/typography/text/replacement/#mixin-squish-text\n\n@mixin squish-text {\n  font: 0/0 serif;\n  text-shadow: none;\n  color: transparent;\n}\n","@import 'reset-box-model';\n@import 'reset-column';\n@import 'reset-font';\n@import 'reset-form-field';\n@import 'reset-image-hover';\n@import 'reset-quotation';\n@import 'reset-table-cell';\n@import 'reset-tap';\n@import 'reset';\n@import 'reset-user-select';\n","@mixin reset-box-model {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}\n","@mixin reset-column{\n    width:  auto;\n    float:  none;\n    clear:  none;\n    margin-right: 0;\n    margin-left:  0;\n}\n","@mixin reset-font {\n  font: inherit;\n  font-size: 100%;\n  vertical-align: baseline;\n}\n","// removes shadow and border radius on form fields on iOS\n@mixin reset-form-field{\n  // -webkit-appearance: none;\n  appearance: none;\n  border: none;\n  border-radius: 0;\n  width: 100%;\n  &:focus{\n    outline: 0;\n  }\n}\n","// use this mixin if your image looks jagged. Opacity reduction still works\n@mixin reset-image-hover {\n  img{\n    transition: none;\n  }\n  a img{\n    transform: none;\n   -webkit-backface-visibility: visible;\n  }\n}\n","@mixin reset-quotation {\n  quotes: none;\n  &:before, &:after {\n    content: \"\";\n    content: none;\n  }\n}\n","@mixin reset-table-cell {\n  text-align: left;\n  font-weight: normal;\n  vertical-align: middle;\n}\n","// removes tap highlight on touchscreens\n@mixin reset-tap($color: rgba(0,0,0,0)) {\n  -webkit-tap-highlight-color: $color;\n  outline: none;\n}\n","@mixin reset {\n  margin: 0;\n  padding: 0;\n}\n","@mixin reset-user-select{\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n}\n","@import 'material-design-icons/material-icons';\n","/* patterns//material-design-icons/_material-icons.scss */\n// http://google.github.io/material-design-icons/#sizing\n// if you need to use images for browser compatibility, you can find\n// instructions on how to download them on github\n// http://google.github.io/material-design-icons/#icon-images-for-the-web\n\n// Rules for sizing the icon.\n@mixin md-18{\n  font-size: 18px;\n}\n\n@mixin md-24{\n  font-size: 24px;\n}\n\n@mixin md-36{\n  font-size: 36px;\n}\n\n@mixin md-48{\n  font-size: 48px;\n}\n\n// Rules for using icons as black on a light background.\n@mixin md-dark{\n color: rgba(0, 0, 0, 0.54);\n}\n\n@mixin md-dark-inactive{\n  color: rgba(0, 0, 0, 0.26);\n}\n\n// Rules for using icons as white on a dark background.\n@mixin md-light{\n  color: rgba(255, 255, 255, 1);\n}\n\n@mixin md-light-inactive{\n  color: rgba(255, 255, 255, 0.3);\n}\n\n\n@mixin material-icons{\n  color: rgba(0, 0, 0, 0.54);\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n  vertical-align: bottom;\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n","/* patterns/_box-shadows.scss */\n\n@mixin z-default-shadow {\n  box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);\n}\n\n@mixin z-depth-0 {\n  box-shadow: none !important;\n}\n\n@mixin z-depth-1{\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n}\n\n@mixin z-depth-1-half{\n  box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);\n}\n\n@mixin z-depth-2{\n  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n@mixin z-depth-3{\n  box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);\n}\n\n@mixin z-depth-4{\n  box-shadow: 0 16px 28px 0 rgba(0, 0, 0, 0.22), 0 25px 55px 0 rgba(0, 0, 0, 0.21);\n}\n\n@mixin z-depth-5{\n  box-shadow: 0 27px 24px 0 rgba(0, 0, 0, 0.2), 0 40px 77px 0 rgba(0, 0, 0, 0.22);\n}\n\n@mixin shadow-hoverable{\n  transition: box-shadow .25s;\n  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n","// General button styling\n@mixin btn{\n  display: inline-block;\n  position: relative;\n  font-size: ms(1);\n  font-weight: $normal;\n  overflow: hidden;\n  text-decoration: none;\n  vertical-align: bottom;\n  transition: background-color .3s ease-out, border-color .3s ease-out;\n  margin-right: ms();\n  margin-bottom: ms();\n  @include reset-tap;\n  text-decoration: none;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n}\n\n\n// Black button styles, eg. submit buttons\n@mixin btn-black{\n  background-color: $almostblack;\n  border: 1px solid $almostblack;\n  color: white;\n  text-transform: uppercase;\n  font-family: $font-set-3;\n  letter-spacing: 1px;\n  text-decoration: none;\n  padding: 10px 10px 10px 10px;\n  -webkit-border-radius: 0;\n  -webkit-font-smoothing: antialiased;\n    border-radius: 0;\n  &:hover{\n    color: $almostblack;\n    background-color: white;\n    border: 1px solid $almostblack;\n  }\n}\n\n\n\n// Red button styles, eg. cancel or preview buttons\n@mixin btn-red{\n  border: 1px solid $red;\n  background-color: $red;\n  color: white;\n  text-transform: uppercase;\n  font-family: $font-set-3;\n  letter-spacing: 1px;\n  text-decoration: none;\n  -webkit-border-radius: 0;\n  -webkit-font-smoothing: antialiased;\n    border-radius: 0;\n  &:hover,&:focus{\n    color: $red;\n    background-color: white;\n    border: 1px solid $red;\n\n  }\n}\n\n@mixin btn-grey {\n  border: 1px solid $contrastgrey;\n  background-color: $contrastgrey;\n  color: white;\n  text-transform: uppercase;\n  font-family: $font-set-3;\n  letter-spacing: 1px;\n  text-decoration: none;\n  display: inline-block;\n  -webkit-border-radius: 0;\n  -webkit-font-smoothing: antialiased;\n    border-radius: 0;\n  &:hover,&:focus{\n    background-color: white;\n    border: 1px solid $contrastgrey;\n    color: $contrastgrey;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n@mixin btn-white{\n  border: 1px solid $almostblack;\n  background-color: $white;\n  color: $almostblack;\n  text-transform: uppercase;\n  font-family: $font-set-3;\n  letter-spacing: 1px;\n  text-decoration: none;\n  display: inline-block;\n  -webkit-border-radius: 0;\n  -webkit-font-smoothing: antialiased;\n    border-radius: 0;\n  &:hover,&:focus{\n    background-color: $almostblack;\n    border: 1px solid $almostblack;\n    color: $white;\n  }\n}\n\n\n@mixin btn-big{\n  font-size: ms(3);\n  padding: 10px 15px 10px 15px;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n}\n\n@mixin btn-really-big{\n  font-size: ms(5);\n  padding: 10px 15px 10px 15px;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n}\n\n\n// a flat simple button style with no default background color.\n// NOT an extension of .btn\n@mixin btn-flat{\n  border: 1px solid $almostblack;\n  font-size: ms(-1);\n  padding: ms(-2) ms();\n  background-color: $white;\n  color: $almostblack;\n  text-decoration: none;\n  display: inline-block;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n  &:hover {\n    background-color: $almostblack;\n    border: 1px solid $almostblack;\n    color: white;\n  }\n}\n\n@mixin btn-white-nimbus{\n  @include btn-flat;\n  @include nimbus-reg;\n  // padding: 7px 10px 3px 10px;\n  // line-height: 1.6em;\n}\n\n\n@mixin btn-cta{\n  -webkit-border-radius: 0;\n    border-radius: 0;\n  &:hover,&:focus, &:active {\n    color: tint(black, 35%);\n  }\n}\n\n@mixin btn-view {\n  @include btn-flat;\n  font-family: $font-set-2;\n  padding: 7px 12px 3px 36px;\n  position: relative;\n\n  &:before {\n    content: '\\e8ef';\n    @include material-icon;\n  }\n}\n\n@mixin material-icon{\n    display: inline-block;\n    -webkit-font-smoothing: antialiased;\n    padding-right: 13px;\n    font-family: 'Material Icons';\n    font-size: 24px;\n    top: 7px;\n    left: 0;\n    padding: 0px 7px;\n    position: absolute;\n}\n\n\n@mixin btn-grid {\n  @include btn-flat;\n  font-family: $font-set-2;\n  padding: 7px 12px 3px 36px;\n  position: relative;\n  &:before {\n    content: '\\e8f0';\n    @include material-icon;\n  }\n}\n\n@mixin btn-compare {\n  border: 1px solid $red;\n  background-color: $red;\n  color: white;\n  @include nimbus-reg;\n  padding: 10px 12px 10px 36px;\n  position: relative;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n  &:before {\n    content: '\\e3b9';\n    @include material-icon;\n    }\n    &:hover {\n    background-color: $white;\n    border: 1px solid $red;\n    color: $red;\n  }\n\n}\n\n@mixin btn-zoom {\n  @include btn-flat;\n  padding: 7px 12px 3px 36px;\n  position: relative;\n  -webkit-border-radius: 0;\n    border-radius: 0;\n  margin-right: 3px;\n  &:before {\n    content: '\\e56b';\n    @include material-icon;\n    }\n\n}\n","// requires width or max-width to be set\n@mixin center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n","// divider line\n@mixin divider-line($border-width: 1px, $border-style: solid, $border-color: $ui-borders-color, $spacing-top: ms(-2), $spacing-bottom: ms(-2)){\n  border-bottom: $border-width $border-style $border-color;\n  padding-top: $spacing-top;\n  padding-bottom: $spacing-bottom;\n  // &:first-child{\n  //   padding-top: 0;\n  // }\n  // &:last-child{\n  //   padding-bottom: 0;\n  // }\n}\n\n@mixin divider-line-2 ($border-width: 3px, $border-style: solid, $border-color: lighten($ui-borders-color, 30%), $spacing-top: ms(), $spacing-bottom: ms(-2)) {\n  border-bottom: $border-width $border-style $border-color;\n  padding-top: $spacing-top;\n  padding-bottom: $spacing-bottom;\n  &:last-child {\n    border: none;\n  }\n}\n\n@mixin divider-line-3 ($border-width: 1px, $border-style: solid, $border-color: lighten($ui-borders-color, 30%), $spacing-top: ms(1), $spacing-bottom: ms(3)) {\n  border-bottom: $border-width $border-style $border-color;\n  padding-top: $spacing-top;\n  padding-bottom: $spacing-bottom;\n  &:last-child {\n    border: none;\n  }\n}\n","@mixin headline-type{\n  font-size: ms(1);\n  line-height: ms(1);\n  @include breakpoint($narrow-screen) {\n    font-size: ms(3);\n  }\n  b,strong{\n    font-weight: $bold;\n  }\n}\n","@mixin highlight-box{\n  margin-bottom: ms(1);\n  position: relative;\n  padding: ms() ms(3);\n  background-color: white;\n  border-radius: 2px;\n  color: shade($neutral-grey,45%);\n  // color: black;\n  text-transform: uppercase;\n  font-size: ms();\n  line-height: ms(2);\n  @include z-depth-1;\n  @include breakpoint($narrow-screen) {\n    padding: ms(1) ms(8);\n    font-size: ms(1);\n  }\n  p,li{\n   &:last-child{\n      margin-bottom: 0;\n    }\n  }\n}\n","// Retina background images\n// https://signalvnoise.com/posts/3271-easy-retina-ready-images-using-scss\n\n// usage example\n// div.logo {\n  // background: url(\"logo.png\") no-repeat;\n  // @include image-2x(\"logo2x.png\", 100px, 25px);\n// }\n\n\n@mixin image-2x($image, $width, $height) {\n  @media (min--moz-device-pixel-ratio: 1.3),\n         (-o-min-device-pixel-ratio: 2.6/2),\n         (-webkit-min-device-pixel-ratio: 1.3),\n         (min-device-pixel-ratio: 1.3),\n         (min-resolution: 1.3dppx) {\n    /* on retina, use image that's scaled by 2 */\n    background-image: url($image);\n    background-size: $width $height;\n  }\n}\n","// basic styles, padding. detect ie variable and do fixes plus border\n\n@mixin image-style{\n  width:  (100%/2);\n  margin-top: ms(-4);\n  margin-bottom: ms(1);\n}\n\n@mixin image-style-left{\n  float:  left;\n  margin-right: ms()\n}\n\n@mixin image-style-right{\n  float:  right;\n  margin-left: ms()\n}\n\n@mixin image-style-center{\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  width: 100%;\n}\n","@mixin navigation-list {\n    list-style-type:none;\n    padding:0;\n    margin:0;\n    overflow:hidden;\n    > li{\n        display:block;\n        float:left;\n        &:last-child{\n            margin-right:0;\n        }\n    }\n}\n","@mixin no-drag-image {\n    user-drag: none;\n    // -moz-user-select: none;\n    // -webkit-user-drag: none;\n}\n","// ********************\n//  MIXINS\n// ********************\n\n// *****\n//  no-svg\n\n// modernizr adds .no-svg - this will be the fallback\n@mixin no-svg {\n    .no-svg & { @content }\n}\n\n\n@mixin svg-bg($width, $height, $image) {\n\n  $png: '#{$image}.png';\n  $svg: '#{$image}.svg';\n\n  // container size\n  width: $width;\n  height: $height;\n  display: inline-block;\n\n  // output the svg\n  background-size: contain;\n  background-image: none, url($svg);\n  background-repeat: no-repeat;\n\n  // output the png\n  @include no-svg { background-image: image-url($png);}\n}\n\n\n\n\n\n// ********************\n//  USAGE\n// ********************\n\n// .logo {\n//     @include text-replace(100px, 100px, '/img/logo');\n// }\n","// ********************\n//  ELEMENTAL MIXINS\n// ********************\n\n\n//type styles\n\n@mixin nimbus-bold-reg{\n  font-family: $font-set-2;\n  font-weight: $bold;\n\n}\n\n@mixin nimbus-reg{\n  font-family: $font-set-2;\n  font-weight: $normal;\n}\n\n@mixin nimbus-novus{\n  font-family: $font-set-4;\n  font-weight: $normal;\n}\n\n@mixin nimbus-bold-novus{\n  font-family: $font-set-4;\n  font-weight: $bold;\n}\n\n@mixin knockout-28{\n  font-family: $font-set-1;\n  -webkit-font-smoothing: antialiased;\n}\n\n@mixin knockout-48{\n  font-family: $font-set-3;\n  -webkit-font-smoothing: antialiased;\n}\n\n@mixin heading-1{\n  @include knockout-48;\n  font-size: ms(9);\n  line-height: ms(-1);\n  -webkit-font-smoothing: antialiased;\n    a {\n      color: $almostblack;\n    }\n  line-height: ms(-1);\n  @include breakpoint($narrow-screen) {\n    font-size: ms(11);\n    margin-bottom: 0;\n  }\n}\n\n@mixin heading-2{\n  @include knockout-28;\n  font-size: ms(7);\n  margin-bottom: ms(-5);\n  line-height: ms(1);\n  font-weight: $normal;\n  -webkit-font-smoothing: antialiased;\n  a{\n    color: $almostblack;\n    text-decoration: underline;\n  }\n  @include breakpoint($standard-screen-max) {\n    font-size: ms(7);\n  }\n}\n\n@mixin heading-3{\n  font-size: ms(5);\n  margin-bottom: ms(-2);\n  line-height: ms(1);\n  font-family: $font-set-1;\n  -webkit-font-smoothing: antialiased;\n  @include breakpoint($narrow-screen) {\n    font-size: ms(5);\n  }\n}\n\n@mixin filter-label{\n  @include knockout-28;\n  font-size: ms(3);\n  text-transform: uppercase;\n  margin-bottom: ms(-3);\n  letter-spacing: 1px;\n  -webkit-font-smoothing: antialiased;\n}\n\n@mixin card-title {\n    display: block;\n    font-family: $font-set-1;\n    color: $almostblack;\n    text-decoration: none;\n    letter-spacing: 0.01em;\n    -webkit-font-smoothing: antialiased;\n}\n\n@mixin grey-info {\n  @include nimbus-bold-reg;\n  color: $contrastgrey;\n}\n\n@mixin category-label{\n    display: block;\n    font-family: $font-set-2;\n    text-transform: uppercase;\n    font-size: ms(0);\n    -webkit-font-smoothing: subpixel-antialiased;\n    letter-spacing: 1px;\n    a {\n      text-decoration: none;\n      padding: ms(-3) 0;\n    }\n}\n\n@mixin price {\n  width: 170px;\n  clear: both;\n  font-size: ms(1);\n  @include nimbus-bold-reg;\n  text-transform: none;\n  margin-bottom: 0;\n}\n\n\n@mixin credit{\n \n  p{line-height: ms(3);\n    padding-top: 5px;\n    font-size: ms(-2);\n  }\n  a{color: $almostblack;\n  }\n}\n\n@mixin antialiased{\n  -webkit-font-smoothing: antialiased;\n}\n\n@mixin subpixel-antialiased{\n  -webkit-font-smoothing: subpixel-antialiased;\n}","/* mixins/library/custom/_button-arrow */\n\n@mixin arrow-right {\n  &:after {\n    content: '\\f105';\n    display: inline-block;\n    font-family: \"Font Awesome 5 Free\";\n    font-size: 22px;\n    // background: url(\"../../img/file_icons/arrow-right.png\");\n    padding-left: 15px;\n    // vertical-align: middle;\n    font-weight: $light;\n    @include breakpoint ($narrow-screen) {\n      font-size: 25px;\n    }\n    @include breakpoint ($standard-screen) {\n      font-size: 30px;\n    }\n  }\n  &:hover:after {\n  }\n}\n\n@mixin arrow-right-small {\n  &:after {\n    content: '\\f054';\n    display: inline-block;\n    padding-left: 5px;\n    // vertical-align: middle;\n    vertical-align: text-bottom;\n    font-family: \"Font Awesome 5 Free\";\n    font-weight: $light;\n    font-size: 12px;\n    @include breakpoint ($narrow-screen) {\n      font-size: 15px;\n      padding-left: 10px;\n      vertical-align: text-bottom;\n    }\n  }\n  &:hover:after {\n\n  }\n}\n","@mixin view-title {\n  a{\n    display: inline;\n    font-weight: $normal;\n    color: black;\n    text-decoration: none;\n    font-size: ms(4);\n    font-family: $font-set-1;\n    line-height: ms();\n    &:hover, &:focus, &:active {\n      text-decoration: underline;\n    }\n  }\n}\n"],"names":[],"mappings":"ACAA,yBAAyB;AyFAzB;;;GAGG;AAGH,UAAU;EACR,WAAW,EAAE,qBAAqB;EAClC,UAAU,EAAE,MAAM;EAClB,WAAW,EAAE,GAAG;EAChB,YAAY,EDLS,KAAK;ECM1B,GAAG,EAAE,+CAAwC;EAC7C,GAAG,EAAE,sDAA+C,CAAC,2BAA2B,EAChF,iDAA0C,CAAC,eAAe,EAC1D,gDAAyC,CAAC,cAAc,EACxD,+CAAwC,CAAC,kBAAkB,EAC3D,2DAAoD,CAAC,aAAa;;AAGpE,AAAA,GAAG;AACH,IAAI,CAAC;EACH,WAAW,EAAE,qBAAqB;EAClC,WAAW,EAAE,GAAG,GACjB;;ACvBD;;;GAGG;AAGH,UAAU;EACR,WAAW,EAAE,uBAAuB;EACpC,UAAU,EAAE,MAAM;EAClB,WAAW,EAAE,GAAG;EAChB,YAAY,EFLS,KAAK;EEM1B,GAAG,EAAE,gDAAyC;EAC9C,GAAG,EAAE,uDAAgD,CAAC,2BAA2B,EACjF,kDAA2C,CAAC,eAAe,EAC3D,iDAA0C,CAAC,cAAc,EACzD,gDAAyC,CAAC,kBAAkB,EAC5D,4DAAqD,CAAC,aAAa;;AAGrE,AAAA,IAAI,CAAC;EACH,WAAW,EAAE,uBAAuB;EACpC,WAAW,EAAE,GAAG,GACjB;;A0BtBD,0DAA0D;ACA1D,gCAAgC;AYAhC,yCAAyC;AlIKzC,AAAA,OAAO,CAAC;EACN,UAAU,EqFCJ,IAAI,GrFAX;;AAGD,AAAA,OAAO,CAAC;EACN,UAAU,EAAE,WAAW;EACvB,OAAO,EAAE,IAAI,GACd;;AAED,AAAA,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;EACd,OAAO,EAAE,IAAI,GACd;;AAED,AAAA,MAAM,CAAC,KAAK,AAAA,KAAK;AACjB,MAAM,CAAC,QAAQ,AAAA,SAAS;AACxB,MAAM,CAAC,MAAM,AAAA,OAAO,CAClB;EiIOA,WAAW,EzCRA,eAAe,EAAE,eAAe,EAAE,gCAAgC,EAAE,aAAa,EAAE,UAAU;EyCSxG,sBAAsB,EAAE,WAAW;EjILnC,SAAS,E4EXC,OAA8B;E5EYxC,KAAK,EqFjBO,OAAO;ErFmBnB,WAAW,EAAE,GAAG,GACjB;;AAED,AAAA,WAAW,CAAC,MAAM,CAAC,KAAK,AAAA,KAAK,CAAC;EAC5B,SAAS,EAAE,gBAAgB,GAC5B;;AAED,AAAA,MAAM,CAAC,KAAK,AAAA,OAAO,CAAC;EAClB,SAAS,EAAE,eAAe;EAC1B,KAAK,EqF5BO,OAAO;ErF6BnB,OAAO,EAAE,OAAO,GACjB;;AAED,AAAA,MAAM,CAAC,KAAK,AAAA,KAAK;AACjB,MAAM,CAAC,QAAQ,AAAA,SAAS,CAAC;EACvB,UAAU,EAAE,UAAU,GACvB;;AAED,AAAA,MAAM,CAAC,KAAK,AAAA,KAAK;AACjB,MAAM,CAAC,MAAM,AAAA,KAAK,CAAC;EiIvCjB,WAAW,EzCcA,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU;EyCbtD,WAAW,EzCMN,GAAG;ExFkCR,SAAS,E4EnCC,OAA8B,C5EmCvB,UAAU;EAC3B,KAAK,EqFzCO,OAAO;ErF0CnB,cAAc,EAAE,IAAI;EACpB,sBAAsB,EAAE,oBAAoB,GAC7C;;AAED,AAAA,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;EiIzCnB,WAAW,EzCQA,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU;EyCPtD,WAAW,EzCFJ,GAAG;ExF4CV,KAAK,EqFhDO,OAAO;ErFiDnB,UAAU,EAAE,IAAI;EAChB,sBAAsB,EAAE,oBAAoB,GAC7C;;AAED,AAAA,IAAI,CAAC,EAAE,AAAA,KAAK,CAAC,IAAI,CAAC,KAAK;AACvB,IAAI,CAAC,EAAE,AAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;EACtB,UAAU,EAAE,IAAI,GACjB;;AAED,AAAA,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK;AACjB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;EACjB,SAAS,E4EvDC,SAA8B,G5EwDzC;;AAED,AAAA,IAAI,CAAC,EAAE,AAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;EACvB,UAAU,EAAE,IAAI,GACjB;;AAED,AAAA,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC;EACV,SAAS,EAAE,GAAG,GACf;;AAED,AAAA,MAAM,CAAC,QAAQ,CAAC;EACd,UAAU,EqFlEC,OAAO,GrFmEnB;;AAED,AAAA,MAAM,CAAC,KAAK,CAAC;EACX,YAAY,EAAE,IAAI,GACnB;;AAED,AAAA,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,KAAK,AAAA,KAAK;AAC5B,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,MAAM,AAAA,KAAK;AAC7B,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,GAAG;AACrB,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,IAAI;AACtB,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,GAAG,CAAC,KAAK;AAC3B,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,IAAI,CAAC,KAAK;AAC5B,OAAO,CAAC,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC,KAAK,AAAA,KAAK,CAAC;EACnC,KAAK,EqFvFC,IAAI,GrFwFX;;AAED,AAAA,MAAM,CAAC,EAAE,AAAA,QAAQ,CAAC;EAChB,gBAAgB,EqF5FV,IAAI,GrF6FX;;AAED,AAAA,MAAM,CAAC,MAAM,AAAA,OAAO;AACpB,OAAO,CAAC,MAAM,CAAC,MAAM,AAAA,OAAO,CAAC;EAC3B,aAAa,EAAE,YAAY;EAC3B,SAAS,E4E3FC,SAA8B,C5E2FvB,UAAU;EAC3B,KAAK,EqFjGO,OAAO;ErFkGnB,eAAe,EAAE,IAAI;EACrB,kBAAkB,EAAE,IAAI;EACxB,UAAU,EAAE,0CAA0C,CAAC,SAAS;EAChE,mBAAmB,EAAE,OAAO;EAC5B,eAAe,EAAE,OAAO;EAExB,gBAAgB,EqFlGL,OAAO;ErFmGlB,OAAO,EAAE,mBAAmB;EAC5B,MAAM,EAAE,CAAC;EACT,WAAW,EAAE,2CAA2C;EACxD,MAAM,EAAE,qBAAqB;EAC7B,sBAAsB,EAAE,oBAAoB;EAC5C,SAAS,EAAE,IAAI;EACf,WAAW,EAAE,GAAG,GACjB;;AAED,AAAA,MAAM,CAAC,MAAM,AAAA,OAAO,CAAC,MAAM,CAAC;EiI7G1B,WAAW,EzCQA,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU;EyCPtD,WAAW,EzCFJ,GAAG;ExFgHV,gBAAgB,EqFtHV,IAAI,CrFsHe,UAAU;EACnC,KAAK,EqFrHO,OAAO;ErFsHnB,kBAAkB,EAAE,eAAe;EACnC,eAAe,EAAE,eAAe;EAChC,OAAO,EAAE,GAAG;EACZ,sBAAsB,EAAE,oBAAoB,GAC7C;;AAED,AAAA,KAAK,AAAA,KAAK;AACV,KAAK,AAAA,OAAO;AACZ,QAAQ,AAAA,SAAS,CAAC;EAChB,UAAU,EAAE,GAAG,CAAC,KAAK,CqF7HR,OAAO;ErF8HpB,WAAW,EAAE,GAAG,CAAC,KAAK,CqF9HT,OAAO;ErF+HpB,YAAY,EAAE,GAAG,CAAC,KAAK,CqF/HV,OAAO;ErFgIpB,aAAa,EAAE,GAAG,CAAC,KAAK,CqFhIX,OAAO;ErFiIpB,OAAO,EAAE,IAAI;EACb,UAAU,EAAE,WAAW,GACxB;;AAED,AAAA,KAAK,AAAA,MAAM,CAAC;EACV,SAAS,E4EnIC,SAA8B,C5EmIvB,UAAU;EAC3B,OAAO,EAAE,8BAA8B;EACvC,qBAAqB,EAAE,YAAY;EACnC,aAAa,EAAE,YAAY;EAC3B,MAAM,EAAE,GAAG,CAAC,KAAK,CqF/Ib,OAAO,CrF+IY,UAAU;EACjC,gBAAgB,EqFhJZ,OAAO,CrFgJY,UAAU;EACjC,KAAK,EAAE,gBAAgB;EACvB,cAAc,EAAE,oBAAoB;EACpC,WAAW,EwFlIA,eAAe,EAAE,eAAe,EAAE,gCAAgC,EAAE,aAAa,EAAE,UAAU,CxFkI/E,UAAU;EACnC,cAAc,EAAE,cAAc;EAC9B,eAAe,EAAE,eAAe;EAChC,qBAAqB,EAAE,YAAY;EACnC,sBAAsB,EAAE,sBAAsB;EAC9C,kBAAkB,EAAE,eAAe;EACnC,WAAW,EAAE,GAAG,GASjB;EAxBD,AAiBE,KAjBG,AAAA,MAAM,AAiBR,MAAM,EAjBT,KAAK,AAAA,MAAM,AAkBR,MAAM,CAAC;IACN,KAAK,EqF7JH,OAAO;IrF8JT,gBAAgB,EAAE,KAAK;IACvB,MAAM,EAAE,GAAG,CAAC,KAAK,CqF/Jf,OAAO,GrFiKV;;AAGH,AAAA,IAAI,CAAC,EAAE,CAAC;EACN,OAAO,EAAE,yBAAyB,GACnC;;AAED,AAAA,IAAI,CAAC,EAAE,AAAA,QAAQ,CAAC;EACd,OAAO,EAAE,0BAA0B,GACpC;;AAED,AAAA,MAAM,CAAC,KAAK,CAAC;EACX,KAAK,EqF7KD,OAAO,GrF8KZ;;AAED,AAAA,KAAK,AAAA,MAAM,CAAC;EACV,MAAM,EAAE,eAAe,GACxB;;AAED,AAAA,IAAI,CAAC,EAAE,AAAA,QAAQ,CAAC,EAAE,CAAC;EiIpHjB,SAAS,ErDxDC,SAA8B;EqDyDxC,aAAa,ErDzDH,SAA8B;EqD0DxC,WAAW,ErD1DD,OAA8B;EqD2DxC,WAAW,EzCpDA,eAAe,EAAE,eAAe,EAAE,gCAAgC,EAAE,aAAa,EAAE,UAAU;EyCqDxG,sBAAsB,EAAE,WAAW;EjIkHnC,OAAO,EAAE,YAAY,GACtB;EmB7HG,MAAM,EAAG,SAAS,EAAE,IAAI;InB0H5B,AAAA,IAAI,CAAC,EAAE,AAAA,QAAQ,CAAC,EAAE,CAAC;MiI9Gf,SAAS,ErD9DD,SAA8B,G5E+KzC;;AAED,AAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;EAClB,SAAS,EAAE,IAAI;EiIlLf,WAAW,EzCQA,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU;EyCPtD,WAAW,EzCFJ,GAAG;ExFqLV,WAAW,EAAE,MAAM;EACnB,sBAAsB,EAAE,oBAAoB,GAC7C;;AAED,AAAA,IAAI,AAAA,OAAO,CAAC;EACV,OAAO,EAAE,eAAe,GACzB;;AAED,AAAA,SAAS,CAAC,GAAG;AACb,SAAS,CAAC,EAAE,CAAC;EACX,MAAM,EAAE,GAAG,CAAC,KAAK,CqFjMJ,OAAO,GrFmMrB;;AAED,AAAA,SAAS,CAAC,EAAE,CAAC;EACX,aAAa,EAAE,GAAG,GACnB;;AAED,AAAA,SAAS,CAAC,SAAS,CAAC,GAAG;AACvB,SAAS,CAAC,GAAG;AACb,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;EACf,UAAU,EqFjNN,OAAO;ErFkNX,aAAa,EAAE,GAAG;EAClB,KAAK,EqFlNC,IAAI,GrFmNX;;AAED,AAAA,MAAM,AAAA,KAAK,CAAC;EACV,KAAK,EqFvND,OAAO,GrF4NZ;EAND,AAGE,MAHI,AAAA,KAAK,AAGR,MAAM,CAAC;IACN,KAAK,EqFvNK,OAAO,GrFwNlB;;AAGH,AAAA,GAAG,CAAA,AAAA,EAAC,EAAI,UAAU,AAAd,EAAgB;EAClB,OAAO,EAAE,cAAc;EACvB,SAAS,E4ExNC,SAA8B,C5EwNvB,UAAU,GAC5B;;AAED,AAAA,MAAM,CAAC,CAAC,AAAA,iBAAiB,CAAC;EACxB,KAAK,EqFpOD,OAAO,GrFqOZ"}